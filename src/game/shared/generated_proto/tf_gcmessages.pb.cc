// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "cbase.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tf_gcmessages.pb.h"

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(push)
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _PS3
#endif // _GNUC

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgTFGoldenWrenchBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFGoldenWrenchBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFSaxxyBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFSaxxyBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCTFSpecificItemBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCTFSpecificItemBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFWorldStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFWorldStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFDuelSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFDuelSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFMapContribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFMapContribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFVoteKickBanPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFVoteKickBanPlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFRequestTF2Friends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFRequestTF2Friends_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFRequestTF2FriendsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFRequestTF2FriendsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFThankedBySomeone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFThankedBySomeone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFThankedSomeone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFThankedSomeone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFFreeTrialConvertedToPremium_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFFreeTrialConvertedToPremium_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSaxxyAwarded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSaxxyAwarded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplaySubmitContestEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplaySubmitContestEntryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CReplayCachedContestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CReplayCachedContestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AddToCoaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AddToCoaches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveFromCoaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_RemoveFromCoaches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_FindCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_FindCoachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AskCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AskCoachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_LikeCurrentCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_LikeCurrentCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveCurrentCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_RemoveCurrentCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_PlayerJoining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_PlayerJoining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthChallengeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_CreateIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_CreateIdentityResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ResetIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ResetIdentityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AckPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AckPolicyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Client_UseServerModificationItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Client_UseServerModificationItem_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_UseServerModificationItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_UseServerModificationItem_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItemExpired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ServerModificationItemExpired_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ServerModificationItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ReservedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Halloween_ReservedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Halloween_GrantItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Halloween_GrantItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ItemClaimed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Halloween_ItemClaimed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_PickupItemEligibility_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_QueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_PickupItemEligibility_QueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPartyMember_Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPartyMember_Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFPendingPartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFPendingPartyMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TFPendingPartyMember_EType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TFSyncedMMUIState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFSyncedMMUIState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTFGroupMatchCriteriaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFGroupMatchCriteriaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTFCasualMatchCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFCasualMatchCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTFPerPlayerMatchCriteriaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFPerPlayerMatchCriteriaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTFPartyOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFPartyOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartySetOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartySetOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartySetOptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartySetOptionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyQueueForMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyQueueForMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyQueueForMatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyQueueForMatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyQueueForStandby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyQueueForStandby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyQueueForStandbyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyQueueForStandbyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyRemoveFromQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyRemoveFromQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromStandbyQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyRemoveFromStandbyQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromStandbyQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyRemoveFromStandbyQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyInvitePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyInvitePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyRequestJoinPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyRequestJoinPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyClearPendingPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyClearPendingPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyClearPendingPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyClearPendingPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyClearOtherPartyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyClearOtherPartyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyClearOtherPartyRequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyClearOtherPartyRequestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyPromoteToLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyPromoteToLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyKickMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyKickMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartySendChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartySendChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFParty_QueueEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFParty_QueueEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPartyInvite_PartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPartyInvite_PartyMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSOTFPartyInvite_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CTFLobbyPlayerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFLobbyPlayerProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CTFLobbyPlayerProto_ConnectState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CTFLobbyPlayerProto_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CTFLobbyInviteProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTFLobbyInviteProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFGameServerLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFGameServerLobby_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_WarMatch_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgExitMatchmaking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgExitMatchmaking_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAcceptLobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAcceptLobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAcceptLobbyInviteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAcceptLobbyInviteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMatchmakingSearchCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMatchmakingSearchCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKickedFromMatchmakingQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKickedFromMatchmakingQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerMatchmakingStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerMatchmakingStatus_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_Event_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgMatchmakingProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMatchmakingProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMVictoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMVictoryInfo_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMVictoryInfo_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgMvMVictoryInfo_GrantReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgTFHelloResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgTFHelloResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgTFSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgTFSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgTFSyncEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgTFSyncEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMVictory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMVictory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMVictory_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMVictory_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMvMMannUpVictoryReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMvMMannUpVictoryReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerKickingLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobbyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerKickingLobbyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaveGameAndPrepareToJoinParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaveGameAndPrepareToJoinParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerLeftMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerLeftMatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerVoteKickedAfterLeavingMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerVoteKickedAfterLeavingMatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHalloween_ServerBossEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHalloween_ServerBossEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHalloween_Merasmus2012_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHalloween_Merasmus2012_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateHalloweenMerasmusLootLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateHalloweenMerasmusLootLevel_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_String_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_DynamicRecipeComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_ItemSlotCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_ItemSlotCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetItemSlotAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetItemSlotAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_War_IndividualUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_War_IndividualUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_War_JoinWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_War_JoinWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_War_RequestGlobalStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_War_RequestGlobalStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_War_GlobalStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_War_GlobalStatsResponse_SideScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_WorldItemPlacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_WorldItemPlacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsg_WorldItemPlacement_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsg_WorldItemPlacement_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAcknowledgeXP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAcknowledgeXP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFXPSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFXPSource_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgTFXPSource_XPSourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFXPSourceBreakdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFXPSourceBreakdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFClientInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFClientInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCNotification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCNotification_NotificationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCNotificationQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCNotificationQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNotificationAcknowledge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledgeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNotificationAcknowledgeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Match_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Match_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Match_Result_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Match_Result_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_Match_Result_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Match_ResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Match_ResultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEconItemPreviewDataBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Client2GCEconPreviewDataBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_Client2GCEconPreviewDataBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFLadderPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFLadderPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFRatingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFRatingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_TFVoteKickPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_TFVoteKickPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_VoteKickPlayerRequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_VoteKickPlayerRequestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_DailyCompetitiveStatsRollup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_DailyCompetitiveStatsRollup_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_ReportPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_ReportPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_ReportPlayer_EReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSOTFMatchResultPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFMatchResultPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestMatchMakerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestMatchMakerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCDataCenterPopulation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCDataCenterPopulation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMatchGroupDataCenterPopulation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMatchGroupDataCenterPopulation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMatchMakerStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMatchMakerStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMatchHistoryLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMatchHistoryLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCDataCenterPing_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update_PingEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCDataCenterPing_Update_PingEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCDataCenterPing_Update_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_KickPlayerFromLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_KickPlayerFromLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCSurveyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCSurveyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCSurveyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCSurveyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOQuestMapNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOQuestMapNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOQuestMapRewardPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOQuestMapRewardPurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestIdentify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestIdentify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestDevGive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestDevGive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestNodeTurnIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestNodeTurnIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestMapUnlockNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestMapUnlockNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCNewMatchForLobbyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCNewMatchForLobbyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCChangeMatchPlayerTeamsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCChangeMatchPlayerTeamsRequest_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCChangeMatchPlayerTeamsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestComplete_Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestComplete_Debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestMap_Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestMap_Debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestMapPurchaseReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestMapPurchaseReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCSetDisablePartyQuestProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCSetDisablePartyQuestProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestProgressReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestProgressReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConsumePaintkit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConsumePaintkit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPainkitDevGrant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPainkitDevGrant_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCQuestStrangeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCQuestStrangeEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETFGCMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerModificationItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETFSyncedMMMenuStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETFMatchGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETFPartyChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TF_GC_GameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TF_GC_TEAM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TFMatchLeaveReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMatchmakingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SurveyQuestionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tf_5fgcmessages_2eproto() {
  protobuf_AddDesc_tf_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tf_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgTFGoldenWrenchBroadcast_descriptor_ = file->message_type(0);
  static const int CMsgTFGoldenWrenchBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, wrench_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, user_name_),
  };
  CMsgTFGoldenWrenchBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFGoldenWrenchBroadcast_descriptor_,
      CMsgTFGoldenWrenchBroadcast::default_instance_,
      CMsgTFGoldenWrenchBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFGoldenWrenchBroadcast));
  CMsgTFSaxxyBroadcast_descriptor_ = file->message_type(1);
  static const int CMsgTFSaxxyBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, category_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, user_name_),
  };
  CMsgTFSaxxyBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFSaxxyBroadcast_descriptor_,
      CMsgTFSaxxyBroadcast::default_instance_,
      CMsgTFSaxxyBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFSaxxyBroadcast));
  CMsgGCTFSpecificItemBroadcast_descriptor_ = file->message_type(2);
  static const int CMsgGCTFSpecificItemBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, was_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, user_name_),
  };
  CMsgGCTFSpecificItemBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCTFSpecificItemBroadcast_descriptor_,
      CMsgGCTFSpecificItemBroadcast::default_instance_,
      CMsgGCTFSpecificItemBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCTFSpecificItemBroadcast));
  CMsgTFWorldStatus_descriptor_ = file->message_type(3);
  static const int CMsgTFWorldStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, beta_stress_test_event_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, event_match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, event_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, active_client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, disabled_match_groups_),
  };
  CMsgTFWorldStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFWorldStatus_descriptor_,
      CMsgTFWorldStatus::default_instance_,
      CMsgTFWorldStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFWorldStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFWorldStatus));
  CSOTFDuelSummary_descriptor_ = file->message_type(4);
  static const int CSOTFDuelSummary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, duel_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, duel_losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_status_),
  };
  CSOTFDuelSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFDuelSummary_descriptor_,
      CSOTFDuelSummary::default_instance_,
      CSOTFDuelSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFDuelSummary));
  CSOTFMapContribution_descriptor_ = file->message_type(5);
  static const int CSOTFMapContribution_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, contribution_level_),
  };
  CSOTFMapContribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFMapContribution_descriptor_,
      CSOTFMapContribution::default_instance_,
      CSOTFMapContribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFMapContribution));
  CMsgTFVoteKickBanPlayer_descriptor_ = file->message_type(6);
  static const int CMsgTFVoteKickBanPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, account_id_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, kick_reason_),
  };
  CMsgTFVoteKickBanPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFVoteKickBanPlayer_descriptor_,
      CMsgTFVoteKickBanPlayer::default_instance_,
      CMsgTFVoteKickBanPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFVoteKickBanPlayer));
  CMsgTFVoteKickBanPlayerResult_descriptor_ = file->message_type(7);
  static const int CMsgTFVoteKickBanPlayerResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, account_id_initiator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, account_id_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, kick_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, kick_successful_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_yes_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_no_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_possible_votes_),
  };
  CMsgTFVoteKickBanPlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFVoteKickBanPlayerResult_descriptor_,
      CMsgTFVoteKickBanPlayerResult::default_instance_,
      CMsgTFVoteKickBanPlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFVoteKickBanPlayerResult));
  CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_ = file->message_type(8);
  static const int CMsgTFFreeTrialChooseMostHelpfulFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, account_id_friend_),
  };
  CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_,
      CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_,
      CMsgTFFreeTrialChooseMostHelpfulFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFFreeTrialChooseMostHelpfulFriend));
  CMsgTFRequestTF2Friends_descriptor_ = file->message_type(9);
  static const int CMsgTFRequestTF2Friends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, account_ids_),
  };
  CMsgTFRequestTF2Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFRequestTF2Friends_descriptor_,
      CMsgTFRequestTF2Friends::default_instance_,
      CMsgTFRequestTF2Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFRequestTF2Friends));
  CMsgTFRequestTF2FriendsResponse_descriptor_ = file->message_type(10);
  static const int CMsgTFRequestTF2FriendsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, account_ids_),
  };
  CMsgTFRequestTF2FriendsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFRequestTF2FriendsResponse_descriptor_,
      CMsgTFRequestTF2FriendsResponse::default_instance_,
      CMsgTFRequestTF2FriendsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFRequestTF2FriendsResponse));
  CSOTFPlayerInfo_descriptor_ = file->message_type(11);
  static const int CSOTFPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, num_new_users_helped_),
  };
  CSOTFPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPlayerInfo_descriptor_,
      CSOTFPlayerInfo::default_instance_,
      CSOTFPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPlayerInfo));
  CMsgTFThankedBySomeone_descriptor_ = file->message_type(12);
  static const int CMsgTFThankedBySomeone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, thanker_steam_id_),
  };
  CMsgTFThankedBySomeone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFThankedBySomeone_descriptor_,
      CMsgTFThankedBySomeone::default_instance_,
      CMsgTFThankedBySomeone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFThankedBySomeone));
  CMsgTFThankedSomeone_descriptor_ = file->message_type(13);
  static const int CMsgTFThankedSomeone_offsets_[1] = {
  };
  CMsgTFThankedSomeone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFThankedSomeone_descriptor_,
      CMsgTFThankedSomeone::default_instance_,
      CMsgTFThankedSomeone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedSomeone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedSomeone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFThankedSomeone));
  CMsgTFFreeTrialConvertedToPremium_descriptor_ = file->message_type(14);
  static const int CMsgTFFreeTrialConvertedToPremium_offsets_[1] = {
  };
  CMsgTFFreeTrialConvertedToPremium_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFFreeTrialConvertedToPremium_descriptor_,
      CMsgTFFreeTrialConvertedToPremium::default_instance_,
      CMsgTFFreeTrialConvertedToPremium_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialConvertedToPremium, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialConvertedToPremium, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFFreeTrialConvertedToPremium));
  CMsgSaxxyAwarded_descriptor_ = file->message_type(15);
  static const int CMsgSaxxyAwarded_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, winner_names_),
  };
  CMsgSaxxyAwarded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSaxxyAwarded_descriptor_,
      CMsgSaxxyAwarded::default_instance_,
      CMsgSaxxyAwarded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSaxxyAwarded));
  CMsgReplaySubmitContestEntry_descriptor_ = file->message_type(16);
  static const int CMsgReplaySubmitContestEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, youtube_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, category_),
  };
  CMsgReplaySubmitContestEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplaySubmitContestEntry_descriptor_,
      CMsgReplaySubmitContestEntry::default_instance_,
      CMsgReplaySubmitContestEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplaySubmitContestEntry));
  CMsgReplaySubmitContestEntryResponse_descriptor_ = file->message_type(17);
  static const int CMsgReplaySubmitContestEntryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, success_),
  };
  CMsgReplaySubmitContestEntryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplaySubmitContestEntryResponse_descriptor_,
      CMsgReplaySubmitContestEntryResponse::default_instance_,
      CMsgReplaySubmitContestEntryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplaySubmitContestEntryResponse));
  CReplayCachedContestData_descriptor_ = file->message_type(18);
  static const int CReplayCachedContestData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, num_votes_last_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, video_entry_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, num_flags_last_day_),
  };
  CReplayCachedContestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CReplayCachedContestData_descriptor_,
      CReplayCachedContestData::default_instance_,
      CReplayCachedContestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CReplayCachedContestData));
  CMsgTFCoaching_AddToCoaches_descriptor_ = file->message_type(19);
  static const int CMsgTFCoaching_AddToCoaches_offsets_[1] = {
  };
  CMsgTFCoaching_AddToCoaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AddToCoaches_descriptor_,
      CMsgTFCoaching_AddToCoaches::default_instance_,
      CMsgTFCoaching_AddToCoaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AddToCoaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AddToCoaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AddToCoaches));
  CMsgTFCoaching_RemoveFromCoaches_descriptor_ = file->message_type(20);
  static const int CMsgTFCoaching_RemoveFromCoaches_offsets_[1] = {
  };
  CMsgTFCoaching_RemoveFromCoaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_RemoveFromCoaches_descriptor_,
      CMsgTFCoaching_RemoveFromCoaches::default_instance_,
      CMsgTFCoaching_RemoveFromCoaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveFromCoaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveFromCoaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_RemoveFromCoaches));
  CMsgTFCoaching_FindCoach_descriptor_ = file->message_type(21);
  static const int CMsgTFCoaching_FindCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, account_id_friend_as_coach_),
  };
  CMsgTFCoaching_FindCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_FindCoach_descriptor_,
      CMsgTFCoaching_FindCoach::default_instance_,
      CMsgTFCoaching_FindCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_FindCoach));
  CMsgTFCoaching_FindCoachResponse_descriptor_ = file->message_type(22);
  static const int CMsgTFCoaching_FindCoachResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, found_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, num_likes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, coach_name_),
  };
  CMsgTFCoaching_FindCoachResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_FindCoachResponse_descriptor_,
      CMsgTFCoaching_FindCoachResponse::default_instance_,
      CMsgTFCoaching_FindCoachResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_FindCoachResponse));
  CMsgTFCoaching_AskCoach_descriptor_ = file->message_type(23);
  static const int CMsgTFCoaching_AskCoach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, account_id_student_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, student_is_friend_),
  };
  CMsgTFCoaching_AskCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AskCoach_descriptor_,
      CMsgTFCoaching_AskCoach::default_instance_,
      CMsgTFCoaching_AskCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AskCoach));
  CMsgTFCoaching_AskCoachResponse_descriptor_ = file->message_type(24);
  static const int CMsgTFCoaching_AskCoachResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, accept_coaching_assignment_),
  };
  CMsgTFCoaching_AskCoachResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AskCoachResponse_descriptor_,
      CMsgTFCoaching_AskCoachResponse::default_instance_,
      CMsgTFCoaching_AskCoachResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AskCoachResponse));
  CMsgTFCoaching_CoachJoinGame_descriptor_ = file->message_type(25);
  static const int CMsgTFCoaching_CoachJoinGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, join_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, account_id_student_),
  };
  CMsgTFCoaching_CoachJoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoinGame_descriptor_,
      CMsgTFCoaching_CoachJoinGame::default_instance_,
      CMsgTFCoaching_CoachJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoinGame));
  CMsgTFCoaching_CoachJoining_descriptor_ = file->message_type(26);
  static const int CMsgTFCoaching_CoachJoining_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_student_),
  };
  CMsgTFCoaching_CoachJoining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoining_descriptor_,
      CMsgTFCoaching_CoachJoining::default_instance_,
      CMsgTFCoaching_CoachJoining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoining));
  CMsgTFCoaching_CoachJoined_descriptor_ = file->message_type(27);
  static const int CMsgTFCoaching_CoachJoined_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, account_id_coach_),
  };
  CMsgTFCoaching_CoachJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoined_descriptor_,
      CMsgTFCoaching_CoachJoined::default_instance_,
      CMsgTFCoaching_CoachJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoined));
  CMsgTFCoaching_LikeCurrentCoach_descriptor_ = file->message_type(28);
  static const int CMsgTFCoaching_LikeCurrentCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, like_coach_),
  };
  CMsgTFCoaching_LikeCurrentCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_LikeCurrentCoach_descriptor_,
      CMsgTFCoaching_LikeCurrentCoach::default_instance_,
      CMsgTFCoaching_LikeCurrentCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_LikeCurrentCoach));
  CMsgTFCoaching_RemoveCurrentCoach_descriptor_ = file->message_type(29);
  static const int CMsgTFCoaching_RemoveCurrentCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, account_id_coach_),
  };
  CMsgTFCoaching_RemoveCurrentCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_RemoveCurrentCoach_descriptor_,
      CMsgTFCoaching_RemoveCurrentCoach::default_instance_,
      CMsgTFCoaching_RemoveCurrentCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_RemoveCurrentCoach));
  CMsgTFQuickplay_ScoreServers_descriptor_ = file->message_type(30);
  static const int CMsgTFQuickplay_ScoreServers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, servers_),
  };
  CMsgTFQuickplay_ScoreServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServers_descriptor_,
      CMsgTFQuickplay_ScoreServers::default_instance_,
      CMsgTFQuickplay_ScoreServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServers));
  CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_ = CMsgTFQuickplay_ScoreServers_descriptor_->nested_type(0);
  static const int CMsgTFQuickplay_ScoreServers_ServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, num_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, max_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, user_score_),
  };
  CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_,
      CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_,
      CMsgTFQuickplay_ScoreServers_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServers_ServerInfo));
  CMsgTFQuickplay_ScoreServersResponse_descriptor_ = file->message_type(31);
  static const int CMsgTFQuickplay_ScoreServersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, servers_),
  };
  CMsgTFQuickplay_ScoreServersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServersResponse_descriptor_,
      CMsgTFQuickplay_ScoreServersResponse::default_instance_,
      CMsgTFQuickplay_ScoreServersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServersResponse));
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_ = CMsgTFQuickplay_ScoreServersResponse_descriptor_->nested_type(0);
  static const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, options_score_),
  };
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_,
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_,
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServersResponse_ServerInfo));
  CMsgTFQuickplay_PlayerJoining_descriptor_ = file->message_type(32);
  static const int CMsgTFQuickplay_PlayerJoining_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, account_id_),
  };
  CMsgTFQuickplay_PlayerJoining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_PlayerJoining_descriptor_,
      CMsgTFQuickplay_PlayerJoining::default_instance_,
      CMsgTFQuickplay_PlayerJoining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_PlayerJoining));
  CMsgGC_GameServer_LevelInfo_descriptor_ = file->message_type(33);
  static const int CMsgGC_GameServer_LevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, level_loaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, level_name_),
  };
  CMsgGC_GameServer_LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_LevelInfo_descriptor_,
      CMsgGC_GameServer_LevelInfo::default_instance_,
      CMsgGC_GameServer_LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_LevelInfo));
  CMsgGC_GameServer_AuthChallenge_descriptor_ = file->message_type(34);
  static const int CMsgGC_GameServer_AuthChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, challenge_string_),
  };
  CMsgGC_GameServer_AuthChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthChallenge_descriptor_,
      CMsgGC_GameServer_AuthChallenge::default_instance_,
      CMsgGC_GameServer_AuthChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthChallenge));
  CMsgGC_GameServer_AuthResult_descriptor_ = file->message_type(35);
  static const int CMsgGC_GameServer_AuthResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, authenticated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, is_valve_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, message_),
  };
  CMsgGC_GameServer_AuthResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthResult_descriptor_,
      CMsgGC_GameServer_AuthResult::default_instance_,
      CMsgGC_GameServer_AuthResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthResult));
  CMsgGC_GameServer_AuthChallengeResponse_descriptor_ = file->message_type(36);
  static const int CMsgGC_GameServer_AuthChallengeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, hashed_challenge_string_),
  };
  CMsgGC_GameServer_AuthChallengeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthChallengeResponse_descriptor_,
      CMsgGC_GameServer_AuthChallengeResponse::default_instance_,
      CMsgGC_GameServer_AuthChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthChallengeResponse));
  CMsgGC_GameServer_CreateIdentity_descriptor_ = file->message_type(37);
  static const int CMsgGC_GameServer_CreateIdentity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, account_id_),
  };
  CMsgGC_GameServer_CreateIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_CreateIdentity_descriptor_,
      CMsgGC_GameServer_CreateIdentity::default_instance_,
      CMsgGC_GameServer_CreateIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_CreateIdentity));
  CMsgGC_GameServer_CreateIdentityResponse_descriptor_ = file->message_type(38);
  static const int CMsgGC_GameServer_CreateIdentityResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, account_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, game_server_identity_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, status_),
  };
  CMsgGC_GameServer_CreateIdentityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_CreateIdentityResponse_descriptor_,
      CMsgGC_GameServer_CreateIdentityResponse::default_instance_,
      CMsgGC_GameServer_CreateIdentityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_CreateIdentityResponse));
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_ = CMsgGC_GameServer_CreateIdentityResponse_descriptor_->enum_type(0);
  CMsgGC_GameServer_List_descriptor_ = file->message_type(39);
  static const int CMsgGC_GameServer_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, account_id_),
  };
  CMsgGC_GameServer_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_List_descriptor_,
      CMsgGC_GameServer_List::default_instance_,
      CMsgGC_GameServer_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_List));
  CMsgGC_GameServer_ListResponse_descriptor_ = file->message_type(40);
  static const int CMsgGC_GameServer_ListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, owned_game_servers_),
  };
  CMsgGC_GameServer_ListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ListResponse_descriptor_,
      CMsgGC_GameServer_ListResponse::default_instance_,
      CMsgGC_GameServer_ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ListResponse));
  CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_ = CMsgGC_GameServer_ListResponse_descriptor_->nested_type(0);
  static const int CMsgGC_GameServer_ListResponse_GameServerIdentity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_identity_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_trend_),
  };
  CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_,
      CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_,
      CMsgGC_GameServer_ListResponse_GameServerIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ListResponse_GameServerIdentity));
  CMsgGC_GameServer_ResetIdentity_descriptor_ = file->message_type(41);
  static const int CMsgGC_GameServer_ResetIdentity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, game_server_account_id_),
  };
  CMsgGC_GameServer_ResetIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ResetIdentity_descriptor_,
      CMsgGC_GameServer_ResetIdentity::default_instance_,
      CMsgGC_GameServer_ResetIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ResetIdentity));
  CMsgGC_GameServer_ResetIdentityResponse_descriptor_ = file->message_type(42);
  static const int CMsgGC_GameServer_ResetIdentityResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_),
  };
  CMsgGC_GameServer_ResetIdentityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ResetIdentityResponse_descriptor_,
      CMsgGC_GameServer_ResetIdentityResponse::default_instance_,
      CMsgGC_GameServer_ResetIdentityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ResetIdentityResponse));
  CMsgGC_GameServer_AckPolicy_descriptor_ = file->message_type(43);
  static const int CMsgGC_GameServer_AckPolicy_offsets_[1] = {
  };
  CMsgGC_GameServer_AckPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AckPolicy_descriptor_,
      CMsgGC_GameServer_AckPolicy::default_instance_,
      CMsgGC_GameServer_AckPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AckPolicy));
  CMsgGC_GameServer_AckPolicyResponse_descriptor_ = file->message_type(44);
  static const int CMsgGC_GameServer_AckPolicyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicyResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicyResponse, message_),
  };
  CMsgGC_GameServer_AckPolicyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AckPolicyResponse_descriptor_,
      CMsgGC_GameServer_AckPolicyResponse::default_instance_,
      CMsgGC_GameServer_AckPolicyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AckPolicyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AckPolicyResponse));
  CMsgGC_Client_UseServerModificationItem_descriptor_ = file->message_type(45);
  static const int CMsgGC_Client_UseServerModificationItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem, item_id_),
  };
  CMsgGC_Client_UseServerModificationItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Client_UseServerModificationItem_descriptor_,
      CMsgGC_Client_UseServerModificationItem::default_instance_,
      CMsgGC_Client_UseServerModificationItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Client_UseServerModificationItem));
  CMsgGC_Client_UseServerModificationItem_Response_descriptor_ = file->message_type(46);
  static const int CMsgGC_Client_UseServerModificationItem_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem_Response, response_code_),
  };
  CMsgGC_Client_UseServerModificationItem_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Client_UseServerModificationItem_Response_descriptor_,
      CMsgGC_Client_UseServerModificationItem_Response::default_instance_,
      CMsgGC_Client_UseServerModificationItem_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client_UseServerModificationItem_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Client_UseServerModificationItem_Response));
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor_ = CMsgGC_Client_UseServerModificationItem_Response_descriptor_->enum_type(0);
  CMsgGC_GameServer_UseServerModificationItem_descriptor_ = file->message_type(47);
  static const int CMsgGC_GameServer_UseServerModificationItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem, modification_type_),
  };
  CMsgGC_GameServer_UseServerModificationItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_UseServerModificationItem_descriptor_,
      CMsgGC_GameServer_UseServerModificationItem::default_instance_,
      CMsgGC_GameServer_UseServerModificationItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_UseServerModificationItem));
  CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_ = file->message_type(48);
  static const int CMsgGC_GameServer_UseServerModificationItem_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem_Response, modification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem_Response, server_response_code_),
  };
  CMsgGC_GameServer_UseServerModificationItem_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_,
      CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_,
      CMsgGC_GameServer_UseServerModificationItem_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_UseServerModificationItem_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_UseServerModificationItem_Response));
  CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor_ = CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_->enum_type(0);
  CMsgGC_GameServer_ServerModificationItemExpired_descriptor_ = file->message_type(49);
  static const int CMsgGC_GameServer_ServerModificationItemExpired_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItemExpired, modification_type_),
  };
  CMsgGC_GameServer_ServerModificationItemExpired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ServerModificationItemExpired_descriptor_,
      CMsgGC_GameServer_ServerModificationItemExpired::default_instance_,
      CMsgGC_GameServer_ServerModificationItemExpired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItemExpired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItemExpired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ServerModificationItemExpired));
  CMsgGC_GameServer_ServerModificationItem_descriptor_ = file->message_type(50);
  static const int CMsgGC_GameServer_ServerModificationItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItem, modification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItem, active_),
  };
  CMsgGC_GameServer_ServerModificationItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ServerModificationItem_descriptor_,
      CMsgGC_GameServer_ServerModificationItem::default_instance_,
      CMsgGC_GameServer_ServerModificationItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ServerModificationItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ServerModificationItem));
  CMsgGC_Halloween_ReservedItem_descriptor_ = file->message_type(51);
  static const int CMsgGC_Halloween_ReservedItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, spawn_meta_info_),
  };
  CMsgGC_Halloween_ReservedItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Halloween_ReservedItem_descriptor_,
      CMsgGC_Halloween_ReservedItem::default_instance_,
      CMsgGC_Halloween_ReservedItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ReservedItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Halloween_ReservedItem));
  CMsgGC_Halloween_GrantItem_descriptor_ = file->message_type(52);
  static const int CMsgGC_Halloween_GrantItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, recipient_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, flagged_),
  };
  CMsgGC_Halloween_GrantItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Halloween_GrantItem_descriptor_,
      CMsgGC_Halloween_GrantItem::default_instance_,
      CMsgGC_Halloween_GrantItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Halloween_GrantItem));
  CMsgGC_Halloween_GrantItemResponse_descriptor_ = file->message_type(53);
  static const int CMsgGC_Halloween_GrantItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItemResponse, recipient_account_id_),
  };
  CMsgGC_Halloween_GrantItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Halloween_GrantItemResponse_descriptor_,
      CMsgGC_Halloween_GrantItemResponse::default_instance_,
      CMsgGC_Halloween_GrantItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_GrantItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Halloween_GrantItemResponse));
  CMsgGC_Halloween_ItemClaimed_descriptor_ = file->message_type(54);
  static const int CMsgGC_Halloween_ItemClaimed_offsets_[1] = {
  };
  CMsgGC_Halloween_ItemClaimed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Halloween_ItemClaimed_descriptor_,
      CMsgGC_Halloween_ItemClaimed::default_instance_,
      CMsgGC_Halloween_ItemClaimed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ItemClaimed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Halloween_ItemClaimed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Halloween_ItemClaimed));
  CMsgGC_PickupItemEligibility_Query_descriptor_ = file->message_type(55);
  static const int CMsgGC_PickupItemEligibility_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, seconds_ago_),
  };
  CMsgGC_PickupItemEligibility_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_PickupItemEligibility_Query_descriptor_,
      CMsgGC_PickupItemEligibility_Query::default_instance_,
      CMsgGC_PickupItemEligibility_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_PickupItemEligibility_Query));
  CMsgGC_PickupItemEligibility_QueryResponse_descriptor_ = file->message_type(56);
  static const int CMsgGC_PickupItemEligibility_QueryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, was_eligible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, level_id_),
  };
  CMsgGC_PickupItemEligibility_QueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_PickupItemEligibility_QueryResponse_descriptor_,
      CMsgGC_PickupItemEligibility_QueryResponse::default_instance_,
      CMsgGC_PickupItemEligibility_QueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_PickupItemEligibility_QueryResponse));
  CSOTFPartyMember_descriptor_ = file->message_type(57);
  static const int CSOTFPartyMember_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, owns_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, completed_missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, badge_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, competitive_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, player_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, casual_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, ranked_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, casual_low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, ranked_low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, lobby_standby_),
  };
  CSOTFPartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPartyMember_descriptor_,
      CSOTFPartyMember::default_instance_,
      CSOTFPartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPartyMember));
  CSOTFPartyMember_Activity_descriptor_ = CSOTFPartyMember_descriptor_->nested_type(0);
  static const int CSOTFPartyMember_Activity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, lobby_match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, multiqueue_blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, client_version_),
  };
  CSOTFPartyMember_Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPartyMember_Activity_descriptor_,
      CSOTFPartyMember_Activity::default_instance_,
      CSOTFPartyMember_Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyMember_Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPartyMember_Activity));
  TFPendingPartyMember_descriptor_ = file->message_type(58);
  static const int TFPendingPartyMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFPendingPartyMember, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFPendingPartyMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFPendingPartyMember, inviter_),
  };
  TFPendingPartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFPendingPartyMember_descriptor_,
      TFPendingPartyMember::default_instance_,
      TFPendingPartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFPendingPartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFPendingPartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFPendingPartyMember));
  TFPendingPartyMember_EType_descriptor_ = TFPendingPartyMember_descriptor_->enum_type(0);
  TFSyncedMMUIState_descriptor_ = file->message_type(59);
  static const int TFSyncedMMUIState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFSyncedMMUIState, menu_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFSyncedMMUIState, match_group_),
  };
  TFSyncedMMUIState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFSyncedMMUIState_descriptor_,
      TFSyncedMMUIState::default_instance_,
      TFSyncedMMUIState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFSyncedMMUIState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFSyncedMMUIState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFSyncedMMUIState));
  CTFGroupMatchCriteriaProto_descriptor_ = file->message_type(60);
  static const int CTFGroupMatchCriteriaProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, late_join_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, custom_ping_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, mvm_mannup_tour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, mvm_mannup_missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, mvm_bootcamp_missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, casual_criteria_),
  };
  CTFGroupMatchCriteriaProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFGroupMatchCriteriaProto_descriptor_,
      CTFGroupMatchCriteriaProto::default_instance_,
      CTFGroupMatchCriteriaProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFGroupMatchCriteriaProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFGroupMatchCriteriaProto));
  CTFCasualMatchCriteria_descriptor_ = file->message_type(61);
  static const int CTFCasualMatchCriteria_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFCasualMatchCriteria, selected_maps_bits_),
  };
  CTFCasualMatchCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFCasualMatchCriteria_descriptor_,
      CTFCasualMatchCriteria::default_instance_,
      CTFCasualMatchCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFCasualMatchCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFCasualMatchCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFCasualMatchCriteria));
  CTFPerPlayerMatchCriteriaProto_descriptor_ = file->message_type(62);
  static const int CTFPerPlayerMatchCriteriaProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPerPlayerMatchCriteriaProto, mvm_squad_surplus_),
  };
  CTFPerPlayerMatchCriteriaProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFPerPlayerMatchCriteriaProto_descriptor_,
      CTFPerPlayerMatchCriteriaProto::default_instance_,
      CTFPerPlayerMatchCriteriaProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPerPlayerMatchCriteriaProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPerPlayerMatchCriteriaProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFPerPlayerMatchCriteriaProto));
  CTFPartyOptions_descriptor_ = file->message_type(63);
  static const int CTFPartyOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, overwrite_existing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, group_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, player_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, player_uistate_),
  };
  CTFPartyOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFPartyOptions_descriptor_,
      CTFPartyOptions::default_instance_,
      CTFPartyOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFPartyOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFPartyOptions));
  CMsgPartySetOptions_descriptor_ = file->message_type(64);
  static const int CMsgPartySetOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptions, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptions, options_),
  };
  CMsgPartySetOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartySetOptions_descriptor_,
      CMsgPartySetOptions::default_instance_,
      CMsgPartySetOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartySetOptions));
  CMsgPartySetOptionsResponse_descriptor_ = file->message_type(65);
  static const int CMsgPartySetOptionsResponse_offsets_[1] = {
  };
  CMsgPartySetOptionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartySetOptionsResponse_descriptor_,
      CMsgPartySetOptionsResponse::default_instance_,
      CMsgPartySetOptionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySetOptionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartySetOptionsResponse));
  CMsgPartyQueueForMatch_descriptor_ = file->message_type(66);
  static const int CMsgPartyQueueForMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatch, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatch, final_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatch, match_group_),
  };
  CMsgPartyQueueForMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyQueueForMatch_descriptor_,
      CMsgPartyQueueForMatch::default_instance_,
      CMsgPartyQueueForMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyQueueForMatch));
  CMsgPartyQueueForMatchResponse_descriptor_ = file->message_type(67);
  static const int CMsgPartyQueueForMatchResponse_offsets_[1] = {
  };
  CMsgPartyQueueForMatchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyQueueForMatchResponse_descriptor_,
      CMsgPartyQueueForMatchResponse::default_instance_,
      CMsgPartyQueueForMatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForMatchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyQueueForMatchResponse));
  CMsgPartyQueueForStandby_descriptor_ = file->message_type(68);
  static const int CMsgPartyQueueForStandby_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandby, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandby, party_lobby_id_),
  };
  CMsgPartyQueueForStandby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyQueueForStandby_descriptor_,
      CMsgPartyQueueForStandby::default_instance_,
      CMsgPartyQueueForStandby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyQueueForStandby));
  CMsgPartyQueueForStandbyResponse_descriptor_ = file->message_type(69);
  static const int CMsgPartyQueueForStandbyResponse_offsets_[1] = {
  };
  CMsgPartyQueueForStandbyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyQueueForStandbyResponse_descriptor_,
      CMsgPartyQueueForStandbyResponse::default_instance_,
      CMsgPartyQueueForStandbyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandbyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyQueueForStandbyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyQueueForStandbyResponse));
  CMsgPartyRemoveFromQueue_descriptor_ = file->message_type(70);
  static const int CMsgPartyRemoveFromQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueue, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueue, match_group_),
  };
  CMsgPartyRemoveFromQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyRemoveFromQueue_descriptor_,
      CMsgPartyRemoveFromQueue::default_instance_,
      CMsgPartyRemoveFromQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyRemoveFromQueue));
  CMsgPartyRemoveFromQueueResponse_descriptor_ = file->message_type(71);
  static const int CMsgPartyRemoveFromQueueResponse_offsets_[1] = {
  };
  CMsgPartyRemoveFromQueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyRemoveFromQueueResponse_descriptor_,
      CMsgPartyRemoveFromQueueResponse::default_instance_,
      CMsgPartyRemoveFromQueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromQueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyRemoveFromQueueResponse));
  CMsgPartyRemoveFromStandbyQueue_descriptor_ = file->message_type(72);
  static const int CMsgPartyRemoveFromStandbyQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromStandbyQueue, party_id_),
  };
  CMsgPartyRemoveFromStandbyQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyRemoveFromStandbyQueue_descriptor_,
      CMsgPartyRemoveFromStandbyQueue::default_instance_,
      CMsgPartyRemoveFromStandbyQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromStandbyQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromStandbyQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyRemoveFromStandbyQueue));
  CMsgPartyRemoveFromStandbyQueueResponse_descriptor_ = file->message_type(73);
  static const int CMsgPartyRemoveFromStandbyQueueResponse_offsets_[1] = {
  };
  CMsgPartyRemoveFromStandbyQueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyRemoveFromStandbyQueueResponse_descriptor_,
      CMsgPartyRemoveFromStandbyQueueResponse::default_instance_,
      CMsgPartyRemoveFromStandbyQueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromStandbyQueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRemoveFromStandbyQueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyRemoveFromStandbyQueueResponse));
  CMsgPartyInvitePlayer_descriptor_ = file->message_type(74);
  static const int CMsgPartyInvitePlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInvitePlayer, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInvitePlayer, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInvitePlayer, expecting_request_to_join_),
  };
  CMsgPartyInvitePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyInvitePlayer_descriptor_,
      CMsgPartyInvitePlayer::default_instance_,
      CMsgPartyInvitePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInvitePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInvitePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyInvitePlayer));
  CMsgPartyRequestJoinPlayer_descriptor_ = file->message_type(75);
  static const int CMsgPartyRequestJoinPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, current_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, join_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, join_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, expecting_invite_),
  };
  CMsgPartyRequestJoinPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyRequestJoinPlayer_descriptor_,
      CMsgPartyRequestJoinPlayer::default_instance_,
      CMsgPartyRequestJoinPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyRequestJoinPlayer));
  CMsgPartyClearPendingPlayer_descriptor_ = file->message_type(76);
  static const int CMsgPartyClearPendingPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayer, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayer, pending_player_id_),
  };
  CMsgPartyClearPendingPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyClearPendingPlayer_descriptor_,
      CMsgPartyClearPendingPlayer::default_instance_,
      CMsgPartyClearPendingPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyClearPendingPlayer));
  CMsgPartyClearPendingPlayerResponse_descriptor_ = file->message_type(77);
  static const int CMsgPartyClearPendingPlayerResponse_offsets_[1] = {
  };
  CMsgPartyClearPendingPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyClearPendingPlayerResponse_descriptor_,
      CMsgPartyClearPendingPlayerResponse::default_instance_,
      CMsgPartyClearPendingPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearPendingPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyClearPendingPlayerResponse));
  CMsgPartyClearOtherPartyRequest_descriptor_ = file->message_type(78);
  static const int CMsgPartyClearOtherPartyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearOtherPartyRequest, other_party_id_),
  };
  CMsgPartyClearOtherPartyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyClearOtherPartyRequest_descriptor_,
      CMsgPartyClearOtherPartyRequest::default_instance_,
      CMsgPartyClearOtherPartyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearOtherPartyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearOtherPartyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyClearOtherPartyRequest));
  CMsgPartyClearOtherPartyRequestResponse_descriptor_ = file->message_type(79);
  static const int CMsgPartyClearOtherPartyRequestResponse_offsets_[1] = {
  };
  CMsgPartyClearOtherPartyRequestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyClearOtherPartyRequestResponse_descriptor_,
      CMsgPartyClearOtherPartyRequestResponse::default_instance_,
      CMsgPartyClearOtherPartyRequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearOtherPartyRequestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyClearOtherPartyRequestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyClearOtherPartyRequestResponse));
  CMsgPartyPromoteToLeader_descriptor_ = file->message_type(80);
  static const int CMsgPartyPromoteToLeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyPromoteToLeader, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyPromoteToLeader, new_leader_id_),
  };
  CMsgPartyPromoteToLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyPromoteToLeader_descriptor_,
      CMsgPartyPromoteToLeader::default_instance_,
      CMsgPartyPromoteToLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyPromoteToLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyPromoteToLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyPromoteToLeader));
  CMsgPartyKickMember_descriptor_ = file->message_type(81);
  static const int CMsgPartyKickMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyKickMember, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyKickMember, target_id_),
  };
  CMsgPartyKickMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyKickMember_descriptor_,
      CMsgPartyKickMember::default_instance_,
      CMsgPartyKickMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyKickMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyKickMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyKickMember));
  CMsgPartySendChat_descriptor_ = file->message_type(82);
  static const int CMsgPartySendChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySendChat, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySendChat, msg_),
  };
  CMsgPartySendChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartySendChat_descriptor_,
      CMsgPartySendChat::default_instance_,
      CMsgPartySendChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySendChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartySendChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartySendChat));
  CMsgPartyChatMsg_descriptor_ = file->message_type(83);
  static const int CMsgPartyChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyChatMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyChatMsg, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyChatMsg, msg_),
  };
  CMsgPartyChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyChatMsg_descriptor_,
      CMsgPartyChatMsg::default_instance_,
      CMsgPartyChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyChatMsg));
  CSOTFParty_descriptor_ = file->message_type(84);
  static const int CSOTFParty_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, member_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, associated_lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, associated_lobby_match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, matchmaking_queues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, group_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, casual_banned_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, casual_low_priority_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, ranked_banned_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, ranked_low_priority_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, leader_ui_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, pending_members_),
  };
  CSOTFParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFParty_descriptor_,
      CSOTFParty::default_instance_,
      CSOTFParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFParty));
  CSOTFParty_QueueEntry_descriptor_ = CSOTFParty_descriptor_->nested_type(0);
  static const int CSOTFParty_QueueEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty_QueueEntry, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty_QueueEntry, queued_time_),
  };
  CSOTFParty_QueueEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFParty_QueueEntry_descriptor_,
      CSOTFParty_QueueEntry::default_instance_,
      CSOTFParty_QueueEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty_QueueEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFParty_QueueEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFParty_QueueEntry));
  CSOTFPartyInvite_descriptor_ = file->message_type(85);
  static const int CSOTFPartyInvite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, type_),
  };
  CSOTFPartyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPartyInvite_descriptor_,
      CSOTFPartyInvite::default_instance_,
      CSOTFPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPartyInvite));
  CSOTFPartyInvite_PartyMember_descriptor_ = CSOTFPartyInvite_descriptor_->nested_type(0);
  static const int CSOTFPartyInvite_PartyMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite_PartyMember, steamid_),
  };
  CSOTFPartyInvite_PartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPartyInvite_PartyMember_descriptor_,
      CSOTFPartyInvite_PartyMember::default_instance_,
      CSOTFPartyInvite_PartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite_PartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPartyInvite_PartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPartyInvite_PartyMember));
  CSOTFPartyInvite_Type_descriptor_ = CSOTFPartyInvite_descriptor_->enum_type(0);
  CTFLobbyPlayerProto_descriptor_ = file->message_type(86);
  static const int CTFLobbyPlayerProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, connect_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, original_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, squad_surplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, badge_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, last_connect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, normalized_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, normalized_uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, rank_),
  };
  CTFLobbyPlayerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFLobbyPlayerProto_descriptor_,
      CTFLobbyPlayerProto::default_instance_,
      CTFLobbyPlayerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyPlayerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFLobbyPlayerProto));
  CTFLobbyPlayerProto_ConnectState_descriptor_ = CTFLobbyPlayerProto_descriptor_->enum_type(0);
  CTFLobbyPlayerProto_Type_descriptor_ = CTFLobbyPlayerProto_descriptor_->enum_type(1);
  CTFLobbyInviteProto_descriptor_ = file->message_type(87);
  static const int CTFLobbyInviteProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyInviteProto, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyInviteProto, match_group_),
  };
  CTFLobbyInviteProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTFLobbyInviteProto_descriptor_,
      CTFLobbyInviteProto::default_instance_,
      CTFLobbyInviteProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyInviteProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTFLobbyInviteProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTFLobbyInviteProto));
  CSOTFGameServerLobby_descriptor_ = file->message_type(88);
  static const int CSOTFGameServerLobby_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, initial_average_mm_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, mannup_tour_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, mission_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, formed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, late_join_eligible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, fixed_match_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, is_war_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, next_maps_for_vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, lobby_mm_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, pending_members_),
  };
  CSOTFGameServerLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFGameServerLobby_descriptor_,
      CSOTFGameServerLobby::default_instance_,
      CSOTFGameServerLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFGameServerLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFGameServerLobby));
  CSOTFGameServerLobby_State_descriptor_ = CSOTFGameServerLobby_descriptor_->enum_type(0);
  CSOTFGameServerLobby_WarMatch_descriptor_ = CSOTFGameServerLobby_descriptor_->enum_type(1);
  CMsgExitMatchmaking_descriptor_ = file->message_type(89);
  static const int CMsgExitMatchmaking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitMatchmaking, explicit_abandon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitMatchmaking, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitMatchmaking, lobby_id_),
  };
  CMsgExitMatchmaking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgExitMatchmaking_descriptor_,
      CMsgExitMatchmaking::default_instance_,
      CMsgExitMatchmaking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitMatchmaking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitMatchmaking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgExitMatchmaking));
  CMsgAcceptLobbyInvite_descriptor_ = file->message_type(90);
  static const int CMsgAcceptLobbyInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInvite, invited_lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInvite, abandoning_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInvite, abandoning_invite_lobby_ids_),
  };
  CMsgAcceptLobbyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAcceptLobbyInvite_descriptor_,
      CMsgAcceptLobbyInvite::default_instance_,
      CMsgAcceptLobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAcceptLobbyInvite));
  CMsgAcceptLobbyInviteReply_descriptor_ = file->message_type(91);
  static const int CMsgAcceptLobbyInviteReply_offsets_[1] = {
  };
  CMsgAcceptLobbyInviteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAcceptLobbyInviteReply_descriptor_,
      CMsgAcceptLobbyInviteReply::default_instance_,
      CMsgAcceptLobbyInviteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInviteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcceptLobbyInviteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAcceptLobbyInviteReply));
  CMsgMatchmakingSearchCountRequest_descriptor_ = file->message_type(92);
  static const int CMsgMatchmakingSearchCountRequest_offsets_[1] = {
  };
  CMsgMatchmakingSearchCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMatchmakingSearchCountRequest_descriptor_,
      CMsgMatchmakingSearchCountRequest::default_instance_,
      CMsgMatchmakingSearchCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingSearchCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingSearchCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMatchmakingSearchCountRequest));
  CMsgMatchmakingSearchCountResponse_descriptor_ = file->message_type(93);
  static const int CMsgMatchmakingSearchCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingSearchCountResponse, searching_players_by_group_),
  };
  CMsgMatchmakingSearchCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMatchmakingSearchCountResponse_descriptor_,
      CMsgMatchmakingSearchCountResponse::default_instance_,
      CMsgMatchmakingSearchCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingSearchCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingSearchCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMatchmakingSearchCountResponse));
  CMsgKickedFromMatchmakingQueue_descriptor_ = file->message_type(94);
  static const int CMsgKickedFromMatchmakingQueue_offsets_[1] = {
  };
  CMsgKickedFromMatchmakingQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKickedFromMatchmakingQueue_descriptor_,
      CMsgKickedFromMatchmakingQueue::default_instance_,
      CMsgKickedFromMatchmakingQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickedFromMatchmakingQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickedFromMatchmakingQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKickedFromMatchmakingQueue));
  CMsgGameServerMatchmakingStatus_descriptor_ = file->message_type(95);
  static const int CMsgGameServerMatchmakingStatus_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, matchmaking_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, bot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, num_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, max_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, slots_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, server_loadavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, server_trusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, server_dedicated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, strict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, mvm_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, mvm_credits_acquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, mvm_credits_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, lobby_mm_version_),
  };
  CMsgGameServerMatchmakingStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerMatchmakingStatus_descriptor_,
      CMsgGameServerMatchmakingStatus::default_instance_,
      CMsgGameServerMatchmakingStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerMatchmakingStatus));
  CMsgGameServerMatchmakingStatus_Player_descriptor_ = CMsgGameServerMatchmakingStatus_descriptor_->nested_type(0);
  static const int CMsgGameServerMatchmakingStatus_Player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, connect_state_),
  };
  CMsgGameServerMatchmakingStatus_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerMatchmakingStatus_Player_descriptor_,
      CMsgGameServerMatchmakingStatus_Player::default_instance_,
      CMsgGameServerMatchmakingStatus_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerMatchmakingStatus_Player));
  CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor_ = CMsgGameServerMatchmakingStatus_descriptor_->enum_type(0);
  CMsgGameServerMatchmakingStatus_Event_descriptor_ = CMsgGameServerMatchmakingStatus_descriptor_->enum_type(1);
  CMsgMatchmakingProgress_descriptor_ = file->message_type(96);
  static const int CMsgMatchmakingProgress_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, avg_wait_time_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, avg_wait_time_join_late_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, your_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_worldwide_searching_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_near_you_searching_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_worldwide_searching_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_near_you_searching_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_worldwide_active_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_near_you_active_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_worldwide_active_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_near_you_active_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_worldwide_empty_gameservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, matching_near_you_empty_gameservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_worldwide_empty_gameservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, total_near_you_empty_gameservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, urgency_pct_),
  };
  CMsgMatchmakingProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMatchmakingProgress_descriptor_,
      CMsgMatchmakingProgress::default_instance_,
      CMsgMatchmakingProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatchmakingProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMatchmakingProgress));
  CMsgMvMVictoryInfo_descriptor_ = file->message_type(97);
  static const int CMsgMvMVictoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo, tour_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo, mission_name_),
  };
  CMsgMvMVictoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMVictoryInfo_descriptor_,
      CMsgMvMVictoryInfo::default_instance_,
      CMsgMvMVictoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMVictoryInfo));
  CMsgMvMVictoryInfo_Item_descriptor_ = CMsgMvMVictoryInfo_descriptor_->nested_type(0);
  static const int CMsgMvMVictoryInfo_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, grant_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, squad_surplus_claimer_steam_id_),
  };
  CMsgMvMVictoryInfo_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMVictoryInfo_Item_descriptor_,
      CMsgMvMVictoryInfo_Item::default_instance_,
      CMsgMvMVictoryInfo_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMVictoryInfo_Item));
  CMsgMvMVictoryInfo_Player_descriptor_ = CMsgMvMVictoryInfo_descriptor_->nested_type(1);
  static const int CMsgMvMVictoryInfo_Player_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_progress_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_leveled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_progress_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, voucher_missing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_points_),
  };
  CMsgMvMVictoryInfo_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMVictoryInfo_Player_descriptor_,
      CMsgMvMVictoryInfo_Player::default_instance_,
      CMsgMvMVictoryInfo_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMVictoryInfo_Player));
  CMsgMvMVictoryInfo_GrantReason_descriptor_ = CMsgMvMVictoryInfo_descriptor_->enum_type(0);
  CGCMsgTFHelloResponse_descriptor_ = file->message_type(98);
  static const int CGCMsgTFHelloResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFHelloResponse, version_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFHelloResponse, version_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFHelloResponse, version_verbose_),
  };
  CGCMsgTFHelloResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgTFHelloResponse_descriptor_,
      CGCMsgTFHelloResponse::default_instance_,
      CGCMsgTFHelloResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFHelloResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFHelloResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgTFHelloResponse));
  CGCMsgTFSync_descriptor_ = file->message_type(99);
  static const int CGCMsgTFSync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, version_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, version_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, version_check_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, version_check_ex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, version_checksum_ex_),
  };
  CGCMsgTFSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgTFSync_descriptor_,
      CGCMsgTFSync::default_instance_,
      CGCMsgTFSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgTFSync));
  CGCMsgTFSyncEx_descriptor_ = file->message_type(100);
  static const int CGCMsgTFSyncEx_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSyncEx, version_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSyncEx, version_checksum_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSyncEx, version_check_),
  };
  CGCMsgTFSyncEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgTFSyncEx_descriptor_,
      CGCMsgTFSyncEx::default_instance_,
      CGCMsgTFSyncEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSyncEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgTFSyncEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgTFSyncEx));
  CMsgMvMVictory_descriptor_ = file->message_type(101);
  static const int CMsgMvMVictory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, legacy_mission_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, tour_name_mannup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, mission_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, event_time_),
  };
  CMsgMvMVictory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMVictory_descriptor_,
      CMsgMvMVictory::default_instance_,
      CMsgMvMVictory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMVictory));
  CMsgMvMVictory_Player_descriptor_ = CMsgMvMVictory_descriptor_->nested_type(0);
  static const int CMsgMvMVictory_Player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory_Player, squad_surplus_),
  };
  CMsgMvMVictory_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMVictory_Player_descriptor_,
      CMsgMvMVictory_Player::default_instance_,
      CMsgMvMVictory_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMVictory_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMVictory_Player));
  CMsgMvMMannUpVictoryReply_descriptor_ = file->message_type(102);
  static const int CMsgMvMMannUpVictoryReply_offsets_[1] = {
  };
  CMsgMvMMannUpVictoryReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMvMMannUpVictoryReply_descriptor_,
      CMsgMvMMannUpVictoryReply::default_instance_,
      CMsgMvMMannUpVictoryReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMMannUpVictoryReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMvMMannUpVictoryReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMvMMannUpVictoryReply));
  CMsgGameServerKickingLobby_descriptor_ = file->message_type(103);
  static const int CMsgGameServerKickingLobby_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobby, match_id_),
  };
  CMsgGameServerKickingLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerKickingLobby_descriptor_,
      CMsgGameServerKickingLobby::default_instance_,
      CMsgGameServerKickingLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerKickingLobby));
  CMsgGameServerKickingLobbyResponse_descriptor_ = file->message_type(104);
  static const int CMsgGameServerKickingLobbyResponse_offsets_[1] = {
  };
  CMsgGameServerKickingLobbyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerKickingLobbyResponse_descriptor_,
      CMsgGameServerKickingLobbyResponse::default_instance_,
      CMsgGameServerKickingLobbyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobbyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerKickingLobbyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerKickingLobbyResponse));
  CMsgLeaveGameAndPrepareToJoinParty_descriptor_ = file->message_type(105);
  static const int CMsgLeaveGameAndPrepareToJoinParty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveGameAndPrepareToJoinParty, party_id_),
  };
  CMsgLeaveGameAndPrepareToJoinParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaveGameAndPrepareToJoinParty_descriptor_,
      CMsgLeaveGameAndPrepareToJoinParty::default_instance_,
      CMsgLeaveGameAndPrepareToJoinParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveGameAndPrepareToJoinParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveGameAndPrepareToJoinParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaveGameAndPrepareToJoinParty));
  CMsgPlayerLeftMatch_descriptor_ = file->message_type(106);
  static const int CMsgPlayerLeftMatch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, leave_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, was_abandon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, xp_breakdown_),
  };
  CMsgPlayerLeftMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerLeftMatch_descriptor_,
      CMsgPlayerLeftMatch::default_instance_,
      CMsgPlayerLeftMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerLeftMatch));
  CMsgPlayerLeftMatchResponse_descriptor_ = file->message_type(107);
  static const int CMsgPlayerLeftMatchResponse_offsets_[1] = {
  };
  CMsgPlayerLeftMatchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerLeftMatchResponse_descriptor_,
      CMsgPlayerLeftMatchResponse::default_instance_,
      CMsgPlayerLeftMatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerLeftMatchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerLeftMatchResponse));
  CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_ = file->message_type(108);
  static const int CMsgPlayerVoteKickedAfterLeavingMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatch, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatch, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatch, match_id_),
  };
  CMsgPlayerVoteKickedAfterLeavingMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_,
      CMsgPlayerVoteKickedAfterLeavingMatch::default_instance_,
      CMsgPlayerVoteKickedAfterLeavingMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerVoteKickedAfterLeavingMatch));
  CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_ = file->message_type(109);
  static const int CMsgPlayerVoteKickedAfterLeavingMatchResponse_offsets_[1] = {
  };
  CMsgPlayerVoteKickedAfterLeavingMatchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_,
      CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance_,
      CMsgPlayerVoteKickedAfterLeavingMatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerVoteKickedAfterLeavingMatchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerVoteKickedAfterLeavingMatchResponse));
  CMsgHalloween_ServerBossEvent_descriptor_ = file->message_type(110);
  static const int CMsgHalloween_ServerBossEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, event_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, boss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, boss_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, players_involved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, elapsed_time_),
  };
  CMsgHalloween_ServerBossEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHalloween_ServerBossEvent_descriptor_,
      CMsgHalloween_ServerBossEvent::default_instance_,
      CMsgHalloween_ServerBossEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHalloween_ServerBossEvent));
  CMsgHalloween_Merasmus2012_descriptor_ = file->message_type(111);
  static const int CMsgHalloween_Merasmus2012_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, event_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, time_submitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, is_valve_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, boss_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, spawned_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, remaining_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, bomb_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, staff_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, pvp_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, prophunt_time1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, prophunt_time2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_scout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_sniper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_soldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_demo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_medic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_heavy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_pyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_spy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, dmg_engineer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, scout_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, sniper_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, solider_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, demo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, medic_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, heavy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, pyro_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, spy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, engineer_count_),
  };
  CMsgHalloween_Merasmus2012_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHalloween_Merasmus2012_descriptor_,
      CMsgHalloween_Merasmus2012::default_instance_,
      CMsgHalloween_Merasmus2012_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHalloween_Merasmus2012, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHalloween_Merasmus2012));
  CMsgUpdateHalloweenMerasmusLootLevel_descriptor_ = file->message_type(112);
  static const int CMsgUpdateHalloweenMerasmusLootLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel, merasmus_level_),
  };
  CMsgUpdateHalloweenMerasmusLootLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateHalloweenMerasmusLootLevel_descriptor_,
      CMsgUpdateHalloweenMerasmusLootLevel::default_instance_,
      CMsgUpdateHalloweenMerasmusLootLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateHalloweenMerasmusLootLevel));
  CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_ = CMsgUpdateHalloweenMerasmusLootLevel_descriptor_->nested_type(0);
  static const int CMsgUpdateHalloweenMerasmusLootLevel_Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel_Player, steam_id_),
  };
  CMsgUpdateHalloweenMerasmusLootLevel_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_,
      CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_,
      CMsgUpdateHalloweenMerasmusLootLevel_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateHalloweenMerasmusLootLevel_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateHalloweenMerasmusLootLevel_Player));
  CAttribute_String_descriptor_ = file->message_type(113);
  static const int CAttribute_String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, value_),
  };
  CAttribute_String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_String_descriptor_,
      CAttribute_String::default_instance_,
      CAttribute_String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_String));
  CAttribute_DynamicRecipeComponent_descriptor_ = file->message_type(114);
  static const int CAttribute_DynamicRecipeComponent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, component_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, attributes_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, num_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, num_fulfilled_),
  };
  CAttribute_DynamicRecipeComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_DynamicRecipeComponent_descriptor_,
      CAttribute_DynamicRecipeComponent::default_instance_,
      CAttribute_DynamicRecipeComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_DynamicRecipeComponent));
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_ = file->message_type(115);
  static const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, component_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, attributes_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_fulfilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, items_fulfilled_),
  };
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_,
      CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_,
      CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT));
  CAttribute_ItemSlotCriteria_descriptor_ = file->message_type(116);
  static const int CAttribute_ItemSlotCriteria_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemSlotCriteria, tags_),
  };
  CAttribute_ItemSlotCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_ItemSlotCriteria_descriptor_,
      CAttribute_ItemSlotCriteria::default_instance_,
      CAttribute_ItemSlotCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemSlotCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemSlotCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_ItemSlotCriteria));
  CMsgSetItemSlotAttribute_descriptor_ = file->message_type(117);
  static const int CMsgSetItemSlotAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemSlotAttribute, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemSlotAttribute, slot_item_original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemSlotAttribute, slot_index_),
  };
  CMsgSetItemSlotAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetItemSlotAttribute_descriptor_,
      CMsgSetItemSlotAttribute::default_instance_,
      CMsgSetItemSlotAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemSlotAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemSlotAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetItemSlotAttribute));
  CSOWarData_descriptor_ = file->message_type(118);
  static const int CSOWarData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, war_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, affiliation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, points_scored_),
  };
  CSOWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOWarData_descriptor_,
      CSOWarData::default_instance_,
      CSOWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOWarData));
  CGCMsgGC_War_IndividualUpdate_descriptor_ = file->message_type(119);
  static const int CGCMsgGC_War_IndividualUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, war_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, score_),
  };
  CGCMsgGC_War_IndividualUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_War_IndividualUpdate_descriptor_,
      CGCMsgGC_War_IndividualUpdate::default_instance_,
      CGCMsgGC_War_IndividualUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_War_IndividualUpdate));
  CGCMsgGC_War_JoinWar_descriptor_ = file->message_type(120);
  static const int CGCMsgGC_War_JoinWar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_JoinWar, affiliation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_JoinWar, war_id_),
  };
  CGCMsgGC_War_JoinWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_War_JoinWar_descriptor_,
      CGCMsgGC_War_JoinWar::default_instance_,
      CGCMsgGC_War_JoinWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_JoinWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_JoinWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_War_JoinWar));
  CGCMsgGC_War_RequestGlobalStats_descriptor_ = file->message_type(121);
  static const int CGCMsgGC_War_RequestGlobalStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_RequestGlobalStats, war_id_),
  };
  CGCMsgGC_War_RequestGlobalStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_War_RequestGlobalStats_descriptor_,
      CGCMsgGC_War_RequestGlobalStats::default_instance_,
      CGCMsgGC_War_RequestGlobalStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_RequestGlobalStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_RequestGlobalStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_War_RequestGlobalStats));
  CGCMsgGC_War_GlobalStatsResponse_descriptor_ = file->message_type(122);
  static const int CGCMsgGC_War_GlobalStatsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse, side_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse, war_id_),
  };
  CGCMsgGC_War_GlobalStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_War_GlobalStatsResponse_descriptor_,
      CGCMsgGC_War_GlobalStatsResponse::default_instance_,
      CGCMsgGC_War_GlobalStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_War_GlobalStatsResponse));
  CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_ = CGCMsgGC_War_GlobalStatsResponse_descriptor_->nested_type(0);
  static const int CGCMsgGC_War_GlobalStatsResponse_SideScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, score_),
  };
  CGCMsgGC_War_GlobalStatsResponse_SideScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_,
      CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_,
      CGCMsgGC_War_GlobalStatsResponse_SideScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_War_GlobalStatsResponse_SideScore));
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_ = file->message_type(123);
  static const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_check_),
  };
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_,
      CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_,
      CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate));
  CAttribute_WorldItemPlacement_descriptor_ = file->message_type(124);
  static const int CAttribute_WorldItemPlacement_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, original_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, ang_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, ang_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, ang_z_),
  };
  CAttribute_WorldItemPlacement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_WorldItemPlacement_descriptor_,
      CAttribute_WorldItemPlacement::default_instance_,
      CAttribute_WorldItemPlacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_WorldItemPlacement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_WorldItemPlacement));
  CGCMsg_WorldItemPlacement_Update_descriptor_ = file->message_type(125);
  static const int CGCMsg_WorldItemPlacement_Update_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, original_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, ang_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, ang_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, ang_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, force_remove_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, attrib_name_),
  };
  CGCMsg_WorldItemPlacement_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsg_WorldItemPlacement_Update_descriptor_,
      CGCMsg_WorldItemPlacement_Update::default_instance_,
      CGCMsg_WorldItemPlacement_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsg_WorldItemPlacement_Update));
  CMsgAcknowledgeXP_descriptor_ = file->message_type(126);
  static const int CMsgAcknowledgeXP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcknowledgeXP, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcknowledgeXP, predicted_experience_),
  };
  CMsgAcknowledgeXP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAcknowledgeXP_descriptor_,
      CMsgAcknowledgeXP::default_instance_,
      CMsgAcknowledgeXP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcknowledgeXP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAcknowledgeXP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAcknowledgeXP));
  CMsgTFXPSource_descriptor_ = file->message_type(127);
  static const int CMsgTFXPSource_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, match_id_),
  };
  CMsgTFXPSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFXPSource_descriptor_,
      CMsgTFXPSource::default_instance_,
      CMsgTFXPSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFXPSource));
  CMsgTFXPSource_XPSourceType_descriptor_ = CMsgTFXPSource_descriptor_->enum_type(0);
  CMsgTFXPSourceBreakdown_descriptor_ = file->message_type(128);
  static const int CMsgTFXPSourceBreakdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSourceBreakdown, sources_),
  };
  CMsgTFXPSourceBreakdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFXPSourceBreakdown_descriptor_,
      CMsgTFXPSourceBreakdown::default_instance_,
      CMsgTFXPSourceBreakdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSourceBreakdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFXPSourceBreakdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFXPSourceBreakdown));
  CMsgTFClientInit_descriptor_ = file->message_type(129);
  static const int CMsgTFClientInit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFClientInit, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFClientInit, language_),
  };
  CMsgTFClientInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFClientInit_descriptor_,
      CMsgTFClientInit::default_instance_,
      CMsgTFClientInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFClientInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFClientInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFClientInit));
  CMsgGCNotification_descriptor_ = file->message_type(130);
  static const int CMsgGCNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, notification_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, expiration_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, notification_string_),
  };
  CMsgGCNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCNotification_descriptor_,
      CMsgGCNotification::default_instance_,
      CMsgGCNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCNotification));
  CMsgGCNotification_NotificationType_descriptor_ = CMsgGCNotification_descriptor_->enum_type(0);
  CMsgGCNotificationQueue_descriptor_ = file->message_type(131);
  static const int CMsgGCNotificationQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotificationQueue, notifications_),
  };
  CMsgGCNotificationQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCNotificationQueue_descriptor_,
      CMsgGCNotificationQueue::default_instance_,
      CMsgGCNotificationQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotificationQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNotificationQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCNotificationQueue));
  CMsgNotificationAcknowledge_descriptor_ = file->message_type(132);
  static const int CMsgNotificationAcknowledge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledge, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledge, notification_id_),
  };
  CMsgNotificationAcknowledge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNotificationAcknowledge_descriptor_,
      CMsgNotificationAcknowledge::default_instance_,
      CMsgNotificationAcknowledge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNotificationAcknowledge));
  CMsgNotificationAcknowledgeReply_descriptor_ = file->message_type(133);
  static const int CMsgNotificationAcknowledgeReply_offsets_[1] = {
  };
  CMsgNotificationAcknowledgeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNotificationAcknowledgeReply_descriptor_,
      CMsgNotificationAcknowledgeReply::default_instance_,
      CMsgNotificationAcknowledgeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledgeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationAcknowledgeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNotificationAcknowledgeReply));
  CMsgGC_Match_Result_descriptor_ = file->message_type(134);
  static const int CMsgGC_Match_Result_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, red_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, blue_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, winning_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, map_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, win_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, bots_),
  };
  CMsgGC_Match_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Match_Result_descriptor_,
      CMsgGC_Match_Result::default_instance_,
      CMsgGC_Match_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Match_Result));
  CMsgGC_Match_Result_Player_descriptor_ = CMsgGC_Match_Result_descriptor_->nested_type(0);
  static const int CMsgGC_Match_Result_Player_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, original_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, classes_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, score_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, kills_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, damage_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, healing_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, support_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, xp_breakdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, leave_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, connect_time_),
  };
  CMsgGC_Match_Result_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Match_Result_Player_descriptor_,
      CMsgGC_Match_Result_Player::default_instance_,
      CMsgGC_Match_Result_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_Result_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Match_Result_Player));
  CMsgGC_Match_Result_Status_descriptor_ = CMsgGC_Match_Result_descriptor_->enum_type(0);
  CMsgGC_Match_ResultResponse_descriptor_ = file->message_type(135);
  static const int CMsgGC_Match_ResultResponse_offsets_[1] = {
  };
  CMsgGC_Match_ResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Match_ResultResponse_descriptor_,
      CMsgGC_Match_ResultResponse::default_instance_,
      CMsgGC_Match_ResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_ResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Match_ResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Match_ResultResponse));
  CEconItemPreviewDataBlock_descriptor_ = file->message_type(136);
  static const int CEconItemPreviewDataBlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, econitem_),
  };
  CEconItemPreviewDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEconItemPreviewDataBlock_descriptor_,
      CEconItemPreviewDataBlock::default_instance_,
      CEconItemPreviewDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEconItemPreviewDataBlock));
  CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_ = file->message_type(137);
  static const int CMsgGC_Client2GCEconPreviewDataBlockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_m_),
  };
  CMsgGC_Client2GCEconPreviewDataBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_,
      CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_,
      CMsgGC_Client2GCEconPreviewDataBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Client2GCEconPreviewDataBlockRequest));
  CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_ = file->message_type(138);
  static const int CMsgGC_Client2GCEconPreviewDataBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  };
  CMsgGC_Client2GCEconPreviewDataBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_,
      CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_,
      CMsgGC_Client2GCEconPreviewDataBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_Client2GCEconPreviewDataBlockResponse));
  CSOTFLadderPlayerStats_descriptor_ = file->message_type(139);
  static const int CSOTFLadderPlayerStats_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, season_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, score_bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, score_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, score_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, kills_bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, kills_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, kills_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, damage_bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, damage_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, damage_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, healing_bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, healing_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, healing_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, support_bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, support_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, support_gold_),
  };
  CSOTFLadderPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFLadderPlayerStats_descriptor_,
      CSOTFLadderPlayerStats::default_instance_,
      CSOTFLadderPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFLadderPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFLadderPlayerStats));
  CSOTFRatingData_descriptor_ = file->message_type(140);
  static const int CSOTFRatingData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, rating_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, rating_primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, rating_secondary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, rating_tertiary_),
  };
  CSOTFRatingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFRatingData_descriptor_,
      CSOTFRatingData::default_instance_,
      CSOTFRatingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFRatingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFRatingData));
  CMsgGC_TFVoteKickPlayerRequest_descriptor_ = file->message_type(141);
  static const int CMsgGC_TFVoteKickPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, target_id_),
  };
  CMsgGC_TFVoteKickPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_TFVoteKickPlayerRequest_descriptor_,
      CMsgGC_TFVoteKickPlayerRequest::default_instance_,
      CMsgGC_TFVoteKickPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_TFVoteKickPlayerRequest));
  CMsgGC_VoteKickPlayerRequestResponse_descriptor_ = file->message_type(142);
  static const int CMsgGC_VoteKickPlayerRequestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, cooldown_),
  };
  CMsgGC_VoteKickPlayerRequestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_VoteKickPlayerRequestResponse_descriptor_,
      CMsgGC_VoteKickPlayerRequestResponse::default_instance_,
      CMsgGC_VoteKickPlayerRequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_VoteKickPlayerRequestResponse));
  CMsgGC_DailyCompetitiveStatsRollup_descriptor_ = file->message_type(143);
  static const int CMsgGC_DailyCompetitiveStatsRollup_offsets_[1] = {
  };
  CMsgGC_DailyCompetitiveStatsRollup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_DailyCompetitiveStatsRollup_descriptor_,
      CMsgGC_DailyCompetitiveStatsRollup::default_instance_,
      CMsgGC_DailyCompetitiveStatsRollup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_DailyCompetitiveStatsRollup));
  CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_ = file->message_type(144);
  static const int CMsgGC_DailyCompetitiveStatsRollup_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response, rankdata_),
  };
  CMsgGC_DailyCompetitiveStatsRollup_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_,
      CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_,
      CMsgGC_DailyCompetitiveStatsRollup_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_DailyCompetitiveStatsRollup_Response));
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_ = CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_->nested_type(0);
  static const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_support_),
  };
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_,
      CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_,
      CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry));
  CMsgGC_ReportPlayer_descriptor_ = file->message_type(145);
  static const int CMsgGC_ReportPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ReportPlayer, account_id_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ReportPlayer, reason_),
  };
  CMsgGC_ReportPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_ReportPlayer_descriptor_,
      CMsgGC_ReportPlayer::default_instance_,
      CMsgGC_ReportPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ReportPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ReportPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_ReportPlayer));
  CMsgGC_ReportPlayer_EReason_descriptor_ = CMsgGC_ReportPlayer_descriptor_->enum_type(0);
  CSOTFMatchResultPlayerStats_descriptor_ = file->message_type(146);
  static const int CSOTFMatchResultPlayerStats_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, match_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, season_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, original_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, display_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, display_rating_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, classes_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, score_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, kills_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, damage_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, healing_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, support_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, map_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, winning_team_),
  };
  CSOTFMatchResultPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFMatchResultPlayerStats_descriptor_,
      CSOTFMatchResultPlayerStats::default_instance_,
      CSOTFMatchResultPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMatchResultPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFMatchResultPlayerStats));
  CMsgGCRequestMatchMakerStats_descriptor_ = file->message_type(147);
  static const int CMsgGCRequestMatchMakerStats_offsets_[1] = {
  };
  CMsgGCRequestMatchMakerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestMatchMakerStats_descriptor_,
      CMsgGCRequestMatchMakerStats::default_instance_,
      CMsgGCRequestMatchMakerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestMatchMakerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestMatchMakerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestMatchMakerStats));
  CMsgGCDataCenterPopulation_descriptor_ = file->message_type(148);
  static const int CMsgGCDataCenterPopulation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPopulation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPopulation, health_ratio_),
  };
  CMsgGCDataCenterPopulation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCDataCenterPopulation_descriptor_,
      CMsgGCDataCenterPopulation::default_instance_,
      CMsgGCDataCenterPopulation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPopulation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPopulation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCDataCenterPopulation));
  CMsgGCMatchGroupDataCenterPopulation_descriptor_ = file->message_type(149);
  static const int CMsgGCMatchGroupDataCenterPopulation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchGroupDataCenterPopulation, data_center_population_),
  };
  CMsgGCMatchGroupDataCenterPopulation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCMatchGroupDataCenterPopulation_descriptor_,
      CMsgGCMatchGroupDataCenterPopulation::default_instance_,
      CMsgGCMatchGroupDataCenterPopulation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchGroupDataCenterPopulation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchGroupDataCenterPopulation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCMatchGroupDataCenterPopulation));
  CMsgGCMatchMakerStatsResponse_descriptor_ = file->message_type(150);
  static const int CMsgGCMatchMakerStatsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchMakerStatsResponse, map_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchMakerStatsResponse, matchgroup_data_center_population_),
  };
  CMsgGCMatchMakerStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCMatchMakerStatsResponse_descriptor_,
      CMsgGCMatchMakerStatsResponse::default_instance_,
      CMsgGCMatchMakerStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchMakerStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchMakerStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCMatchMakerStatsResponse));
  CMsgGCMatchHistoryLoad_descriptor_ = file->message_type(151);
  static const int CMsgGCMatchHistoryLoad_offsets_[1] = {
  };
  CMsgGCMatchHistoryLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCMatchHistoryLoad_descriptor_,
      CMsgGCMatchHistoryLoad::default_instance_,
      CMsgGCMatchHistoryLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchHistoryLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMatchHistoryLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCMatchHistoryLoad));
  CMsgGCDataCenterPing_Update_descriptor_ = file->message_type(152);
  static const int CMsgGCDataCenterPing_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update, pingdata_),
  };
  CMsgGCDataCenterPing_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCDataCenterPing_Update_descriptor_,
      CMsgGCDataCenterPing_Update::default_instance_,
      CMsgGCDataCenterPing_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCDataCenterPing_Update));
  CMsgGCDataCenterPing_Update_PingEntry_descriptor_ = CMsgGCDataCenterPing_Update_descriptor_->nested_type(0);
  static const int CMsgGCDataCenterPing_Update_PingEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update_PingEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update_PingEntry, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update_PingEntry, ping_status_),
  };
  CMsgGCDataCenterPing_Update_PingEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCDataCenterPing_Update_PingEntry_descriptor_,
      CMsgGCDataCenterPing_Update_PingEntry::default_instance_,
      CMsgGCDataCenterPing_Update_PingEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update_PingEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCDataCenterPing_Update_PingEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCDataCenterPing_Update_PingEntry));
  CMsgGCDataCenterPing_Update_Status_descriptor_ = CMsgGCDataCenterPing_Update_descriptor_->enum_type(0);
  CMsgGC_KickPlayerFromLobby_descriptor_ = file->message_type(153);
  static const int CMsgGC_KickPlayerFromLobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_KickPlayerFromLobby, targetid_),
  };
  CMsgGC_KickPlayerFromLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_KickPlayerFromLobby_descriptor_,
      CMsgGC_KickPlayerFromLobby::default_instance_,
      CMsgGC_KickPlayerFromLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_KickPlayerFromLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_KickPlayerFromLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_KickPlayerFromLobby));
  CMsgGCSurveyRequest_descriptor_ = file->message_type(154);
  static const int CMsgGCSurveyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyRequest, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyRequest, match_id_),
  };
  CMsgGCSurveyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCSurveyRequest_descriptor_,
      CMsgGCSurveyRequest::default_instance_,
      CMsgGCSurveyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCSurveyRequest));
  CMsgGCSurveyResponse_descriptor_ = file->message_type(155);
  static const int CMsgGCSurveyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyResponse, question_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyResponse, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyResponse, response_),
  };
  CMsgGCSurveyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCSurveyResponse_descriptor_,
      CMsgGCSurveyResponse::default_instance_,
      CMsgGCSurveyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSurveyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCSurveyResponse));
  CSOQuestMapNode_descriptor_ = file->message_type(156);
  static const int CSOQuestMapNode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, star_0_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, star_1_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, star_2_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, loot_claimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, selected_quest_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, map_cycle_),
  };
  CSOQuestMapNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOQuestMapNode_descriptor_,
      CSOQuestMapNode::default_instance_,
      CSOQuestMapNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOQuestMapNode));
  CSOQuest_descriptor_ = file->message_type(157);
  static const int CSOQuest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, points_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, points_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, points_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, quest_map_node_source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, map_cycle_),
  };
  CSOQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOQuest_descriptor_,
      CSOQuest::default_instance_,
      CSOQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOQuest));
  CSOQuestMapRewardPurchase_descriptor_ = file->message_type(158);
  static const int CSOQuestMapRewardPurchase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, map_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, purchase_id_),
  };
  CSOQuestMapRewardPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOQuestMapRewardPurchase_descriptor_,
      CSOQuestMapRewardPurchase::default_instance_,
      CSOQuestMapRewardPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestMapRewardPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOQuestMapRewardPurchase));
  CMsgGCQuestIdentify_descriptor_ = file->message_type(159);
  static const int CMsgGCQuestIdentify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestIdentify, quest_id_),
  };
  CMsgGCQuestIdentify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestIdentify_descriptor_,
      CMsgGCQuestIdentify::default_instance_,
      CMsgGCQuestIdentify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestIdentify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestIdentify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestIdentify));
  CMsgGCQuestDevGive_descriptor_ = file->message_type(160);
  static const int CMsgGCQuestDevGive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDevGive, quest_def_index_),
  };
  CMsgGCQuestDevGive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestDevGive_descriptor_,
      CMsgGCQuestDevGive::default_instance_,
      CMsgGCQuestDevGive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDevGive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDevGive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestDevGive));
  CMsgGCQuestNodeTurnIn_descriptor_ = file->message_type(161);
  static const int CMsgGCQuestNodeTurnIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestNodeTurnIn, node_defindex_),
  };
  CMsgGCQuestNodeTurnIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestNodeTurnIn_descriptor_,
      CMsgGCQuestNodeTurnIn::default_instance_,
      CMsgGCQuestNodeTurnIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestNodeTurnIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestNodeTurnIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestNodeTurnIn));
  CMsgGCQuestMapUnlockNode_descriptor_ = file->message_type(162);
  static const int CMsgGCQuestMapUnlockNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, node_defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, quest_defindex_),
  };
  CMsgGCQuestMapUnlockNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestMapUnlockNode_descriptor_,
      CMsgGCQuestMapUnlockNode::default_instance_,
      CMsgGCQuestMapUnlockNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestMapUnlockNode));
  CMsgGCNewMatchForLobbyRequest_descriptor_ = file->message_type(163);
  static const int CMsgGCNewMatchForLobbyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, current_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, next_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, lobby_id_),
  };
  CMsgGCNewMatchForLobbyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCNewMatchForLobbyRequest_descriptor_,
      CMsgGCNewMatchForLobbyRequest::default_instance_,
      CMsgGCNewMatchForLobbyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCNewMatchForLobbyRequest));
  CMsgGCNewMatchForLobbyResponse_descriptor_ = file->message_type(164);
  static const int CMsgGCNewMatchForLobbyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyResponse, success_),
  };
  CMsgGCNewMatchForLobbyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCNewMatchForLobbyResponse_descriptor_,
      CMsgGCNewMatchForLobbyResponse::default_instance_,
      CMsgGCNewMatchForLobbyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNewMatchForLobbyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCNewMatchForLobbyResponse));
  CMsgGCChangeMatchPlayerTeamsRequest_descriptor_ = file->message_type(165);
  static const int CMsgGCChangeMatchPlayerTeamsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, member_),
  };
  CMsgGCChangeMatchPlayerTeamsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCChangeMatchPlayerTeamsRequest_descriptor_,
      CMsgGCChangeMatchPlayerTeamsRequest::default_instance_,
      CMsgGCChangeMatchPlayerTeamsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCChangeMatchPlayerTeamsRequest));
  CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_ = CMsgGCChangeMatchPlayerTeamsRequest_descriptor_->nested_type(0);
  static const int CMsgGCChangeMatchPlayerTeamsRequest_Member_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest_Member, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest_Member, new_team_),
  };
  CMsgGCChangeMatchPlayerTeamsRequest_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_,
      CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance_,
      CMsgGCChangeMatchPlayerTeamsRequest_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCChangeMatchPlayerTeamsRequest_Member));
  CMsgGCChangeMatchPlayerTeamsResponse_descriptor_ = file->message_type(166);
  static const int CMsgGCChangeMatchPlayerTeamsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsResponse, success_),
  };
  CMsgGCChangeMatchPlayerTeamsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCChangeMatchPlayerTeamsResponse_descriptor_,
      CMsgGCChangeMatchPlayerTeamsResponse::default_instance_,
      CMsgGCChangeMatchPlayerTeamsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCChangeMatchPlayerTeamsResponse));
  CMsgGCQuestComplete_Debug_descriptor_ = file->message_type(167);
  static const int CMsgGCQuestComplete_Debug_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Debug, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Debug, points_type_),
  };
  CMsgGCQuestComplete_Debug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestComplete_Debug_descriptor_,
      CMsgGCQuestComplete_Debug::default_instance_,
      CMsgGCQuestComplete_Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Debug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Debug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestComplete_Debug));
  CMsgGCQuestMap_Debug_descriptor_ = file->message_type(168);
  static const int CMsgGCQuestMap_Debug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMap_Debug, reset_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMap_Debug, give_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMap_Debug, unlock_node_),
  };
  CMsgGCQuestMap_Debug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestMap_Debug_descriptor_,
      CMsgGCQuestMap_Debug::default_instance_,
      CMsgGCQuestMap_Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMap_Debug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMap_Debug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestMap_Debug));
  CMsgGCQuestMapPurchaseReward_descriptor_ = file->message_type(169);
  static const int CMsgGCQuestMapPurchaseReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapPurchaseReward, store_item_defindex_),
  };
  CMsgGCQuestMapPurchaseReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestMapPurchaseReward_descriptor_,
      CMsgGCQuestMapPurchaseReward::default_instance_,
      CMsgGCQuestMapPurchaseReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapPurchaseReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestMapPurchaseReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestMapPurchaseReward));
  CMsgGCQuestResponse_descriptor_ = file->message_type(170);
  static const int CMsgGCQuestResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestResponse, success_),
  };
  CMsgGCQuestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestResponse_descriptor_,
      CMsgGCQuestResponse::default_instance_,
      CMsgGCQuestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestResponse));
  CMsgGCSetDisablePartyQuestProgress_descriptor_ = file->message_type(171);
  static const int CMsgGCSetDisablePartyQuestProgress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSetDisablePartyQuestProgress, state_),
  };
  CMsgGCSetDisablePartyQuestProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCSetDisablePartyQuestProgress_descriptor_,
      CMsgGCSetDisablePartyQuestProgress::default_instance_,
      CMsgGCSetDisablePartyQuestProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSetDisablePartyQuestProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCSetDisablePartyQuestProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCSetDisablePartyQuestProgress));
  CMsgQuestProgressReport_descriptor_ = file->message_type(172);
  static const int CMsgQuestProgressReport_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, star_0_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, star_1_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, star_2_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, items_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, reward_credits_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, contract_completed_),
  };
  CMsgQuestProgressReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestProgressReport_descriptor_,
      CMsgQuestProgressReport::default_instance_,
      CMsgQuestProgressReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestProgressReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestProgressReport));
  CMsgConsumePaintkit_descriptor_ = file->message_type(173);
  static const int CMsgConsumePaintkit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumePaintkit, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumePaintkit, target_defindex_),
  };
  CMsgConsumePaintkit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConsumePaintkit_descriptor_,
      CMsgConsumePaintkit::default_instance_,
      CMsgConsumePaintkit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumePaintkit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumePaintkit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConsumePaintkit));
  CMsgPainkitDevGrant_descriptor_ = file->message_type(174);
  static const int CMsgPainkitDevGrant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPainkitDevGrant, paintkit_defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPainkitDevGrant, wear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPainkitDevGrant, item_defindex_),
  };
  CMsgPainkitDevGrant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPainkitDevGrant_descriptor_,
      CMsgPainkitDevGrant::default_instance_,
      CMsgPainkitDevGrant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPainkitDevGrant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPainkitDevGrant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPainkitDevGrant));
  GCQuestStrangeEvent_descriptor_ = file->message_type(175);
  static const int GCQuestStrangeEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, scorer_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, strange_event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, score_),
  };
  GCQuestStrangeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCQuestStrangeEvent_descriptor_,
      GCQuestStrangeEvent::default_instance_,
      GCQuestStrangeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuestStrangeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCQuestStrangeEvent));
  ETFGCMsg_descriptor_ = file->enum_type(0);
  EServerModificationItemType_descriptor_ = file->enum_type(1);
  ETFSyncedMMMenuStep_descriptor_ = file->enum_type(2);
  ETFMatchGroup_descriptor_ = file->enum_type(3);
  ETFPartyChatType_descriptor_ = file->enum_type(4);
  TF_GC_GameState_descriptor_ = file->enum_type(5);
  TF_GC_TEAM_descriptor_ = file->enum_type(6);
  TFMatchLeaveReason_descriptor_ = file->enum_type(7);
  ServerMatchmakingState_descriptor_ = file->enum_type(8);
  SurveyQuestionType_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tf_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFGoldenWrenchBroadcast_descriptor_, &CMsgTFGoldenWrenchBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFSaxxyBroadcast_descriptor_, &CMsgTFSaxxyBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCTFSpecificItemBroadcast_descriptor_, &CMsgGCTFSpecificItemBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFWorldStatus_descriptor_, &CMsgTFWorldStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFDuelSummary_descriptor_, &CSOTFDuelSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFMapContribution_descriptor_, &CSOTFMapContribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFVoteKickBanPlayer_descriptor_, &CMsgTFVoteKickBanPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFVoteKickBanPlayerResult_descriptor_, &CMsgTFVoteKickBanPlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_, &CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFRequestTF2Friends_descriptor_, &CMsgTFRequestTF2Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFRequestTF2FriendsResponse_descriptor_, &CMsgTFRequestTF2FriendsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPlayerInfo_descriptor_, &CSOTFPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFThankedBySomeone_descriptor_, &CMsgTFThankedBySomeone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFThankedSomeone_descriptor_, &CMsgTFThankedSomeone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFFreeTrialConvertedToPremium_descriptor_, &CMsgTFFreeTrialConvertedToPremium::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSaxxyAwarded_descriptor_, &CMsgSaxxyAwarded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplaySubmitContestEntry_descriptor_, &CMsgReplaySubmitContestEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplaySubmitContestEntryResponse_descriptor_, &CMsgReplaySubmitContestEntryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CReplayCachedContestData_descriptor_, &CReplayCachedContestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AddToCoaches_descriptor_, &CMsgTFCoaching_AddToCoaches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_RemoveFromCoaches_descriptor_, &CMsgTFCoaching_RemoveFromCoaches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_FindCoach_descriptor_, &CMsgTFCoaching_FindCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_FindCoachResponse_descriptor_, &CMsgTFCoaching_FindCoachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AskCoach_descriptor_, &CMsgTFCoaching_AskCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AskCoachResponse_descriptor_, &CMsgTFCoaching_AskCoachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoinGame_descriptor_, &CMsgTFCoaching_CoachJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoining_descriptor_, &CMsgTFCoaching_CoachJoining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoined_descriptor_, &CMsgTFCoaching_CoachJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_LikeCurrentCoach_descriptor_, &CMsgTFCoaching_LikeCurrentCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_RemoveCurrentCoach_descriptor_, &CMsgTFCoaching_RemoveCurrentCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServers_descriptor_, &CMsgTFQuickplay_ScoreServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_, &CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServersResponse_descriptor_, &CMsgTFQuickplay_ScoreServersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_, &CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_PlayerJoining_descriptor_, &CMsgTFQuickplay_PlayerJoining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_LevelInfo_descriptor_, &CMsgGC_GameServer_LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthChallenge_descriptor_, &CMsgGC_GameServer_AuthChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthResult_descriptor_, &CMsgGC_GameServer_AuthResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthChallengeResponse_descriptor_, &CMsgGC_GameServer_AuthChallengeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_CreateIdentity_descriptor_, &CMsgGC_GameServer_CreateIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_CreateIdentityResponse_descriptor_, &CMsgGC_GameServer_CreateIdentityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_List_descriptor_, &CMsgGC_GameServer_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ListResponse_descriptor_, &CMsgGC_GameServer_ListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_, &CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ResetIdentity_descriptor_, &CMsgGC_GameServer_ResetIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ResetIdentityResponse_descriptor_, &CMsgGC_GameServer_ResetIdentityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AckPolicy_descriptor_, &CMsgGC_GameServer_AckPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AckPolicyResponse_descriptor_, &CMsgGC_GameServer_AckPolicyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Client_UseServerModificationItem_descriptor_, &CMsgGC_Client_UseServerModificationItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Client_UseServerModificationItem_Response_descriptor_, &CMsgGC_Client_UseServerModificationItem_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_UseServerModificationItem_descriptor_, &CMsgGC_GameServer_UseServerModificationItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_, &CMsgGC_GameServer_UseServerModificationItem_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ServerModificationItemExpired_descriptor_, &CMsgGC_GameServer_ServerModificationItemExpired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ServerModificationItem_descriptor_, &CMsgGC_GameServer_ServerModificationItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Halloween_ReservedItem_descriptor_, &CMsgGC_Halloween_ReservedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Halloween_GrantItem_descriptor_, &CMsgGC_Halloween_GrantItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Halloween_GrantItemResponse_descriptor_, &CMsgGC_Halloween_GrantItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Halloween_ItemClaimed_descriptor_, &CMsgGC_Halloween_ItemClaimed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_PickupItemEligibility_Query_descriptor_, &CMsgGC_PickupItemEligibility_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_PickupItemEligibility_QueryResponse_descriptor_, &CMsgGC_PickupItemEligibility_QueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPartyMember_descriptor_, &CSOTFPartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPartyMember_Activity_descriptor_, &CSOTFPartyMember_Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFPendingPartyMember_descriptor_, &TFPendingPartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFSyncedMMUIState_descriptor_, &TFSyncedMMUIState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFGroupMatchCriteriaProto_descriptor_, &CTFGroupMatchCriteriaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFCasualMatchCriteria_descriptor_, &CTFCasualMatchCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFPerPlayerMatchCriteriaProto_descriptor_, &CTFPerPlayerMatchCriteriaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFPartyOptions_descriptor_, &CTFPartyOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartySetOptions_descriptor_, &CMsgPartySetOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartySetOptionsResponse_descriptor_, &CMsgPartySetOptionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyQueueForMatch_descriptor_, &CMsgPartyQueueForMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyQueueForMatchResponse_descriptor_, &CMsgPartyQueueForMatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyQueueForStandby_descriptor_, &CMsgPartyQueueForStandby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyQueueForStandbyResponse_descriptor_, &CMsgPartyQueueForStandbyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyRemoveFromQueue_descriptor_, &CMsgPartyRemoveFromQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyRemoveFromQueueResponse_descriptor_, &CMsgPartyRemoveFromQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyRemoveFromStandbyQueue_descriptor_, &CMsgPartyRemoveFromStandbyQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyRemoveFromStandbyQueueResponse_descriptor_, &CMsgPartyRemoveFromStandbyQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyInvitePlayer_descriptor_, &CMsgPartyInvitePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyRequestJoinPlayer_descriptor_, &CMsgPartyRequestJoinPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyClearPendingPlayer_descriptor_, &CMsgPartyClearPendingPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyClearPendingPlayerResponse_descriptor_, &CMsgPartyClearPendingPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyClearOtherPartyRequest_descriptor_, &CMsgPartyClearOtherPartyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyClearOtherPartyRequestResponse_descriptor_, &CMsgPartyClearOtherPartyRequestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyPromoteToLeader_descriptor_, &CMsgPartyPromoteToLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyKickMember_descriptor_, &CMsgPartyKickMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartySendChat_descriptor_, &CMsgPartySendChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyChatMsg_descriptor_, &CMsgPartyChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFParty_descriptor_, &CSOTFParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFParty_QueueEntry_descriptor_, &CSOTFParty_QueueEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPartyInvite_descriptor_, &CSOTFPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPartyInvite_PartyMember_descriptor_, &CSOTFPartyInvite_PartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFLobbyPlayerProto_descriptor_, &CTFLobbyPlayerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTFLobbyInviteProto_descriptor_, &CTFLobbyInviteProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFGameServerLobby_descriptor_, &CSOTFGameServerLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgExitMatchmaking_descriptor_, &CMsgExitMatchmaking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAcceptLobbyInvite_descriptor_, &CMsgAcceptLobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAcceptLobbyInviteReply_descriptor_, &CMsgAcceptLobbyInviteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMatchmakingSearchCountRequest_descriptor_, &CMsgMatchmakingSearchCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMatchmakingSearchCountResponse_descriptor_, &CMsgMatchmakingSearchCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKickedFromMatchmakingQueue_descriptor_, &CMsgKickedFromMatchmakingQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerMatchmakingStatus_descriptor_, &CMsgGameServerMatchmakingStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerMatchmakingStatus_Player_descriptor_, &CMsgGameServerMatchmakingStatus_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMatchmakingProgress_descriptor_, &CMsgMatchmakingProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMVictoryInfo_descriptor_, &CMsgMvMVictoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMVictoryInfo_Item_descriptor_, &CMsgMvMVictoryInfo_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMVictoryInfo_Player_descriptor_, &CMsgMvMVictoryInfo_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgTFHelloResponse_descriptor_, &CGCMsgTFHelloResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgTFSync_descriptor_, &CGCMsgTFSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgTFSyncEx_descriptor_, &CGCMsgTFSyncEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMVictory_descriptor_, &CMsgMvMVictory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMVictory_Player_descriptor_, &CMsgMvMVictory_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMvMMannUpVictoryReply_descriptor_, &CMsgMvMMannUpVictoryReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerKickingLobby_descriptor_, &CMsgGameServerKickingLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerKickingLobbyResponse_descriptor_, &CMsgGameServerKickingLobbyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaveGameAndPrepareToJoinParty_descriptor_, &CMsgLeaveGameAndPrepareToJoinParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerLeftMatch_descriptor_, &CMsgPlayerLeftMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerLeftMatchResponse_descriptor_, &CMsgPlayerLeftMatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_, &CMsgPlayerVoteKickedAfterLeavingMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_, &CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHalloween_ServerBossEvent_descriptor_, &CMsgHalloween_ServerBossEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHalloween_Merasmus2012_descriptor_, &CMsgHalloween_Merasmus2012::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateHalloweenMerasmusLootLevel_descriptor_, &CMsgUpdateHalloweenMerasmusLootLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_, &CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_String_descriptor_, &CAttribute_String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_DynamicRecipeComponent_descriptor_, &CAttribute_DynamicRecipeComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_, &CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_ItemSlotCriteria_descriptor_, &CAttribute_ItemSlotCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetItemSlotAttribute_descriptor_, &CMsgSetItemSlotAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOWarData_descriptor_, &CSOWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_War_IndividualUpdate_descriptor_, &CGCMsgGC_War_IndividualUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_War_JoinWar_descriptor_, &CGCMsgGC_War_JoinWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_War_RequestGlobalStats_descriptor_, &CGCMsgGC_War_RequestGlobalStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_War_GlobalStatsResponse_descriptor_, &CGCMsgGC_War_GlobalStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_, &CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_, &CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_WorldItemPlacement_descriptor_, &CAttribute_WorldItemPlacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsg_WorldItemPlacement_Update_descriptor_, &CGCMsg_WorldItemPlacement_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAcknowledgeXP_descriptor_, &CMsgAcknowledgeXP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFXPSource_descriptor_, &CMsgTFXPSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFXPSourceBreakdown_descriptor_, &CMsgTFXPSourceBreakdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFClientInit_descriptor_, &CMsgTFClientInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCNotification_descriptor_, &CMsgGCNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCNotificationQueue_descriptor_, &CMsgGCNotificationQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNotificationAcknowledge_descriptor_, &CMsgNotificationAcknowledge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNotificationAcknowledgeReply_descriptor_, &CMsgNotificationAcknowledgeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Match_Result_descriptor_, &CMsgGC_Match_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Match_Result_Player_descriptor_, &CMsgGC_Match_Result_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Match_ResultResponse_descriptor_, &CMsgGC_Match_ResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEconItemPreviewDataBlock_descriptor_, &CEconItemPreviewDataBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_, &CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_, &CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFLadderPlayerStats_descriptor_, &CSOTFLadderPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFRatingData_descriptor_, &CSOTFRatingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_TFVoteKickPlayerRequest_descriptor_, &CMsgGC_TFVoteKickPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_VoteKickPlayerRequestResponse_descriptor_, &CMsgGC_VoteKickPlayerRequestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_DailyCompetitiveStatsRollup_descriptor_, &CMsgGC_DailyCompetitiveStatsRollup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_, &CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_, &CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_ReportPlayer_descriptor_, &CMsgGC_ReportPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFMatchResultPlayerStats_descriptor_, &CSOTFMatchResultPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestMatchMakerStats_descriptor_, &CMsgGCRequestMatchMakerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCDataCenterPopulation_descriptor_, &CMsgGCDataCenterPopulation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCMatchGroupDataCenterPopulation_descriptor_, &CMsgGCMatchGroupDataCenterPopulation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCMatchMakerStatsResponse_descriptor_, &CMsgGCMatchMakerStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCMatchHistoryLoad_descriptor_, &CMsgGCMatchHistoryLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCDataCenterPing_Update_descriptor_, &CMsgGCDataCenterPing_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCDataCenterPing_Update_PingEntry_descriptor_, &CMsgGCDataCenterPing_Update_PingEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_KickPlayerFromLobby_descriptor_, &CMsgGC_KickPlayerFromLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCSurveyRequest_descriptor_, &CMsgGCSurveyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCSurveyResponse_descriptor_, &CMsgGCSurveyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOQuestMapNode_descriptor_, &CSOQuestMapNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOQuest_descriptor_, &CSOQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOQuestMapRewardPurchase_descriptor_, &CSOQuestMapRewardPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestIdentify_descriptor_, &CMsgGCQuestIdentify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestDevGive_descriptor_, &CMsgGCQuestDevGive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestNodeTurnIn_descriptor_, &CMsgGCQuestNodeTurnIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestMapUnlockNode_descriptor_, &CMsgGCQuestMapUnlockNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCNewMatchForLobbyRequest_descriptor_, &CMsgGCNewMatchForLobbyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCNewMatchForLobbyResponse_descriptor_, &CMsgGCNewMatchForLobbyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCChangeMatchPlayerTeamsRequest_descriptor_, &CMsgGCChangeMatchPlayerTeamsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_, &CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCChangeMatchPlayerTeamsResponse_descriptor_, &CMsgGCChangeMatchPlayerTeamsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestComplete_Debug_descriptor_, &CMsgGCQuestComplete_Debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestMap_Debug_descriptor_, &CMsgGCQuestMap_Debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestMapPurchaseReward_descriptor_, &CMsgGCQuestMapPurchaseReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestResponse_descriptor_, &CMsgGCQuestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCSetDisablePartyQuestProgress_descriptor_, &CMsgGCSetDisablePartyQuestProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestProgressReport_descriptor_, &CMsgQuestProgressReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConsumePaintkit_descriptor_, &CMsgConsumePaintkit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPainkitDevGrant_descriptor_, &CMsgPainkitDevGrant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCQuestStrangeEvent_descriptor_, &GCQuestStrangeEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tf_5fgcmessages_2eproto() {
  delete CMsgTFGoldenWrenchBroadcast::default_instance_;
  delete CMsgTFGoldenWrenchBroadcast_reflection_;
  delete CMsgTFSaxxyBroadcast::default_instance_;
  delete CMsgTFSaxxyBroadcast_reflection_;
  delete CMsgGCTFSpecificItemBroadcast::default_instance_;
  delete CMsgGCTFSpecificItemBroadcast_reflection_;
  delete CMsgTFWorldStatus::default_instance_;
  delete CMsgTFWorldStatus_reflection_;
  delete CSOTFDuelSummary::default_instance_;
  delete CSOTFDuelSummary_reflection_;
  delete CSOTFMapContribution::default_instance_;
  delete CSOTFMapContribution_reflection_;
  delete CMsgTFVoteKickBanPlayer::default_instance_;
  delete CMsgTFVoteKickBanPlayer_reflection_;
  delete CMsgTFVoteKickBanPlayerResult::default_instance_;
  delete CMsgTFVoteKickBanPlayerResult_reflection_;
  delete CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_;
  delete CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_;
  delete CMsgTFRequestTF2Friends::default_instance_;
  delete CMsgTFRequestTF2Friends_reflection_;
  delete CMsgTFRequestTF2FriendsResponse::default_instance_;
  delete CMsgTFRequestTF2FriendsResponse_reflection_;
  delete CSOTFPlayerInfo::default_instance_;
  delete CSOTFPlayerInfo_reflection_;
  delete CMsgTFThankedBySomeone::default_instance_;
  delete CMsgTFThankedBySomeone_reflection_;
  delete CMsgTFThankedSomeone::default_instance_;
  delete CMsgTFThankedSomeone_reflection_;
  delete CMsgTFFreeTrialConvertedToPremium::default_instance_;
  delete CMsgTFFreeTrialConvertedToPremium_reflection_;
  delete CMsgSaxxyAwarded::default_instance_;
  delete CMsgSaxxyAwarded_reflection_;
  delete CMsgReplaySubmitContestEntry::default_instance_;
  delete CMsgReplaySubmitContestEntry_reflection_;
  delete CMsgReplaySubmitContestEntryResponse::default_instance_;
  delete CMsgReplaySubmitContestEntryResponse_reflection_;
  delete CReplayCachedContestData::default_instance_;
  delete CReplayCachedContestData_reflection_;
  delete CMsgTFCoaching_AddToCoaches::default_instance_;
  delete CMsgTFCoaching_AddToCoaches_reflection_;
  delete CMsgTFCoaching_RemoveFromCoaches::default_instance_;
  delete CMsgTFCoaching_RemoveFromCoaches_reflection_;
  delete CMsgTFCoaching_FindCoach::default_instance_;
  delete CMsgTFCoaching_FindCoach_reflection_;
  delete CMsgTFCoaching_FindCoachResponse::default_instance_;
  delete CMsgTFCoaching_FindCoachResponse_reflection_;
  delete CMsgTFCoaching_AskCoach::default_instance_;
  delete CMsgTFCoaching_AskCoach_reflection_;
  delete CMsgTFCoaching_AskCoachResponse::default_instance_;
  delete CMsgTFCoaching_AskCoachResponse_reflection_;
  delete CMsgTFCoaching_CoachJoinGame::default_instance_;
  delete CMsgTFCoaching_CoachJoinGame_reflection_;
  delete CMsgTFCoaching_CoachJoining::default_instance_;
  delete CMsgTFCoaching_CoachJoining_reflection_;
  delete CMsgTFCoaching_CoachJoined::default_instance_;
  delete CMsgTFCoaching_CoachJoined_reflection_;
  delete CMsgTFCoaching_LikeCurrentCoach::default_instance_;
  delete CMsgTFCoaching_LikeCurrentCoach_reflection_;
  delete CMsgTFCoaching_RemoveCurrentCoach::default_instance_;
  delete CMsgTFCoaching_RemoveCurrentCoach_reflection_;
  delete CMsgTFQuickplay_ScoreServers::default_instance_;
  delete CMsgTFQuickplay_ScoreServers_reflection_;
  delete CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_;
  delete CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_;
  delete CMsgTFQuickplay_ScoreServersResponse::default_instance_;
  delete CMsgTFQuickplay_ScoreServersResponse_reflection_;
  delete CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_;
  delete CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_;
  delete CMsgTFQuickplay_PlayerJoining::default_instance_;
  delete CMsgTFQuickplay_PlayerJoining_reflection_;
  delete CMsgGC_GameServer_LevelInfo::default_instance_;
  delete CMsgGC_GameServer_LevelInfo_reflection_;
  delete CMsgGC_GameServer_AuthChallenge::default_instance_;
  delete CMsgGC_GameServer_AuthChallenge_reflection_;
  delete CMsgGC_GameServer_AuthResult::default_instance_;
  delete CMsgGC_GameServer_AuthResult_reflection_;
  delete CMsgGC_GameServer_AuthChallengeResponse::default_instance_;
  delete CMsgGC_GameServer_AuthChallengeResponse_reflection_;
  delete CMsgGC_GameServer_CreateIdentity::default_instance_;
  delete CMsgGC_GameServer_CreateIdentity_reflection_;
  delete CMsgGC_GameServer_CreateIdentityResponse::default_instance_;
  delete CMsgGC_GameServer_CreateIdentityResponse_reflection_;
  delete CMsgGC_GameServer_List::default_instance_;
  delete CMsgGC_GameServer_List_reflection_;
  delete CMsgGC_GameServer_ListResponse::default_instance_;
  delete CMsgGC_GameServer_ListResponse_reflection_;
  delete CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_;
  delete CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_;
  delete CMsgGC_GameServer_ResetIdentity::default_instance_;
  delete CMsgGC_GameServer_ResetIdentity_reflection_;
  delete CMsgGC_GameServer_ResetIdentityResponse::default_instance_;
  delete CMsgGC_GameServer_ResetIdentityResponse_reflection_;
  delete CMsgGC_GameServer_AckPolicy::default_instance_;
  delete CMsgGC_GameServer_AckPolicy_reflection_;
  delete CMsgGC_GameServer_AckPolicyResponse::default_instance_;
  delete CMsgGC_GameServer_AckPolicyResponse_reflection_;
  delete CMsgGC_Client_UseServerModificationItem::default_instance_;
  delete CMsgGC_Client_UseServerModificationItem_reflection_;
  delete CMsgGC_Client_UseServerModificationItem_Response::default_instance_;
  delete CMsgGC_Client_UseServerModificationItem_Response_reflection_;
  delete CMsgGC_GameServer_UseServerModificationItem::default_instance_;
  delete CMsgGC_GameServer_UseServerModificationItem_reflection_;
  delete CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_;
  delete CMsgGC_GameServer_UseServerModificationItem_Response_reflection_;
  delete CMsgGC_GameServer_ServerModificationItemExpired::default_instance_;
  delete CMsgGC_GameServer_ServerModificationItemExpired_reflection_;
  delete CMsgGC_GameServer_ServerModificationItem::default_instance_;
  delete CMsgGC_GameServer_ServerModificationItem_reflection_;
  delete CMsgGC_Halloween_ReservedItem::default_instance_;
  delete CMsgGC_Halloween_ReservedItem_reflection_;
  delete CMsgGC_Halloween_GrantItem::default_instance_;
  delete CMsgGC_Halloween_GrantItem_reflection_;
  delete CMsgGC_Halloween_GrantItemResponse::default_instance_;
  delete CMsgGC_Halloween_GrantItemResponse_reflection_;
  delete CMsgGC_Halloween_ItemClaimed::default_instance_;
  delete CMsgGC_Halloween_ItemClaimed_reflection_;
  delete CMsgGC_PickupItemEligibility_Query::default_instance_;
  delete CMsgGC_PickupItemEligibility_Query_reflection_;
  delete CMsgGC_PickupItemEligibility_QueryResponse::default_instance_;
  delete CMsgGC_PickupItemEligibility_QueryResponse_reflection_;
  delete CSOTFPartyMember::default_instance_;
  delete CSOTFPartyMember_reflection_;
  delete CSOTFPartyMember_Activity::default_instance_;
  delete CSOTFPartyMember_Activity_reflection_;
  delete TFPendingPartyMember::default_instance_;
  delete TFPendingPartyMember_reflection_;
  delete TFSyncedMMUIState::default_instance_;
  delete TFSyncedMMUIState_reflection_;
  delete CTFGroupMatchCriteriaProto::default_instance_;
  delete CTFGroupMatchCriteriaProto_reflection_;
  delete CTFCasualMatchCriteria::default_instance_;
  delete CTFCasualMatchCriteria_reflection_;
  delete CTFPerPlayerMatchCriteriaProto::default_instance_;
  delete CTFPerPlayerMatchCriteriaProto_reflection_;
  delete CTFPartyOptions::default_instance_;
  delete CTFPartyOptions_reflection_;
  delete CMsgPartySetOptions::default_instance_;
  delete CMsgPartySetOptions_reflection_;
  delete CMsgPartySetOptionsResponse::default_instance_;
  delete CMsgPartySetOptionsResponse_reflection_;
  delete CMsgPartyQueueForMatch::default_instance_;
  delete CMsgPartyQueueForMatch_reflection_;
  delete CMsgPartyQueueForMatchResponse::default_instance_;
  delete CMsgPartyQueueForMatchResponse_reflection_;
  delete CMsgPartyQueueForStandby::default_instance_;
  delete CMsgPartyQueueForStandby_reflection_;
  delete CMsgPartyQueueForStandbyResponse::default_instance_;
  delete CMsgPartyQueueForStandbyResponse_reflection_;
  delete CMsgPartyRemoveFromQueue::default_instance_;
  delete CMsgPartyRemoveFromQueue_reflection_;
  delete CMsgPartyRemoveFromQueueResponse::default_instance_;
  delete CMsgPartyRemoveFromQueueResponse_reflection_;
  delete CMsgPartyRemoveFromStandbyQueue::default_instance_;
  delete CMsgPartyRemoveFromStandbyQueue_reflection_;
  delete CMsgPartyRemoveFromStandbyQueueResponse::default_instance_;
  delete CMsgPartyRemoveFromStandbyQueueResponse_reflection_;
  delete CMsgPartyInvitePlayer::default_instance_;
  delete CMsgPartyInvitePlayer_reflection_;
  delete CMsgPartyRequestJoinPlayer::default_instance_;
  delete CMsgPartyRequestJoinPlayer_reflection_;
  delete CMsgPartyClearPendingPlayer::default_instance_;
  delete CMsgPartyClearPendingPlayer_reflection_;
  delete CMsgPartyClearPendingPlayerResponse::default_instance_;
  delete CMsgPartyClearPendingPlayerResponse_reflection_;
  delete CMsgPartyClearOtherPartyRequest::default_instance_;
  delete CMsgPartyClearOtherPartyRequest_reflection_;
  delete CMsgPartyClearOtherPartyRequestResponse::default_instance_;
  delete CMsgPartyClearOtherPartyRequestResponse_reflection_;
  delete CMsgPartyPromoteToLeader::default_instance_;
  delete CMsgPartyPromoteToLeader_reflection_;
  delete CMsgPartyKickMember::default_instance_;
  delete CMsgPartyKickMember_reflection_;
  delete CMsgPartySendChat::default_instance_;
  delete CMsgPartySendChat_reflection_;
  delete CMsgPartyChatMsg::default_instance_;
  delete CMsgPartyChatMsg_reflection_;
  delete CSOTFParty::default_instance_;
  delete CSOTFParty_reflection_;
  delete CSOTFParty_QueueEntry::default_instance_;
  delete CSOTFParty_QueueEntry_reflection_;
  delete CSOTFPartyInvite::default_instance_;
  delete CSOTFPartyInvite_reflection_;
  delete CSOTFPartyInvite_PartyMember::default_instance_;
  delete CSOTFPartyInvite_PartyMember_reflection_;
  delete CTFLobbyPlayerProto::default_instance_;
  delete CTFLobbyPlayerProto_reflection_;
  delete CTFLobbyInviteProto::default_instance_;
  delete CTFLobbyInviteProto_reflection_;
  delete CSOTFGameServerLobby::default_instance_;
  delete CSOTFGameServerLobby_reflection_;
  delete CMsgExitMatchmaking::default_instance_;
  delete CMsgExitMatchmaking_reflection_;
  delete CMsgAcceptLobbyInvite::default_instance_;
  delete CMsgAcceptLobbyInvite_reflection_;
  delete CMsgAcceptLobbyInviteReply::default_instance_;
  delete CMsgAcceptLobbyInviteReply_reflection_;
  delete CMsgMatchmakingSearchCountRequest::default_instance_;
  delete CMsgMatchmakingSearchCountRequest_reflection_;
  delete CMsgMatchmakingSearchCountResponse::default_instance_;
  delete CMsgMatchmakingSearchCountResponse_reflection_;
  delete CMsgKickedFromMatchmakingQueue::default_instance_;
  delete CMsgKickedFromMatchmakingQueue_reflection_;
  delete CMsgGameServerMatchmakingStatus::default_instance_;
  delete CMsgGameServerMatchmakingStatus_reflection_;
  delete CMsgGameServerMatchmakingStatus_Player::default_instance_;
  delete CMsgGameServerMatchmakingStatus_Player_reflection_;
  delete CMsgMatchmakingProgress::default_instance_;
  delete CMsgMatchmakingProgress_reflection_;
  delete CMsgMvMVictoryInfo::default_instance_;
  delete CMsgMvMVictoryInfo_reflection_;
  delete CMsgMvMVictoryInfo_Item::default_instance_;
  delete CMsgMvMVictoryInfo_Item_reflection_;
  delete CMsgMvMVictoryInfo_Player::default_instance_;
  delete CMsgMvMVictoryInfo_Player_reflection_;
  delete CGCMsgTFHelloResponse::default_instance_;
  delete CGCMsgTFHelloResponse_reflection_;
  delete CGCMsgTFSync::default_instance_;
  delete CGCMsgTFSync_reflection_;
  delete CGCMsgTFSyncEx::default_instance_;
  delete CGCMsgTFSyncEx_reflection_;
  delete CMsgMvMVictory::default_instance_;
  delete CMsgMvMVictory_reflection_;
  delete CMsgMvMVictory_Player::default_instance_;
  delete CMsgMvMVictory_Player_reflection_;
  delete CMsgMvMMannUpVictoryReply::default_instance_;
  delete CMsgMvMMannUpVictoryReply_reflection_;
  delete CMsgGameServerKickingLobby::default_instance_;
  delete CMsgGameServerKickingLobby_reflection_;
  delete CMsgGameServerKickingLobbyResponse::default_instance_;
  delete CMsgGameServerKickingLobbyResponse_reflection_;
  delete CMsgLeaveGameAndPrepareToJoinParty::default_instance_;
  delete CMsgLeaveGameAndPrepareToJoinParty_reflection_;
  delete CMsgPlayerLeftMatch::default_instance_;
  delete CMsgPlayerLeftMatch_reflection_;
  delete CMsgPlayerLeftMatchResponse::default_instance_;
  delete CMsgPlayerLeftMatchResponse_reflection_;
  delete CMsgPlayerVoteKickedAfterLeavingMatch::default_instance_;
  delete CMsgPlayerVoteKickedAfterLeavingMatch_reflection_;
  delete CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance_;
  delete CMsgPlayerVoteKickedAfterLeavingMatchResponse_reflection_;
  delete CMsgHalloween_ServerBossEvent::default_instance_;
  delete CMsgHalloween_ServerBossEvent_reflection_;
  delete CMsgHalloween_Merasmus2012::default_instance_;
  delete CMsgHalloween_Merasmus2012_reflection_;
  delete CMsgUpdateHalloweenMerasmusLootLevel::default_instance_;
  delete CMsgUpdateHalloweenMerasmusLootLevel_reflection_;
  delete CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_;
  delete CMsgUpdateHalloweenMerasmusLootLevel_Player_reflection_;
  delete CAttribute_String::default_instance_;
  delete CAttribute_String_reflection_;
  delete CAttribute_DynamicRecipeComponent::default_instance_;
  delete CAttribute_DynamicRecipeComponent_reflection_;
  delete CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_;
  delete CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_reflection_;
  delete CAttribute_ItemSlotCriteria::default_instance_;
  delete CAttribute_ItemSlotCriteria_reflection_;
  delete CMsgSetItemSlotAttribute::default_instance_;
  delete CMsgSetItemSlotAttribute_reflection_;
  delete CSOWarData::default_instance_;
  delete CSOWarData_reflection_;
  delete CGCMsgGC_War_IndividualUpdate::default_instance_;
  delete CGCMsgGC_War_IndividualUpdate_reflection_;
  delete CGCMsgGC_War_JoinWar::default_instance_;
  delete CGCMsgGC_War_JoinWar_reflection_;
  delete CGCMsgGC_War_RequestGlobalStats::default_instance_;
  delete CGCMsgGC_War_RequestGlobalStats_reflection_;
  delete CGCMsgGC_War_GlobalStatsResponse::default_instance_;
  delete CGCMsgGC_War_GlobalStatsResponse_reflection_;
  delete CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_;
  delete CGCMsgGC_War_GlobalStatsResponse_SideScore_reflection_;
  delete CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_;
  delete CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_reflection_;
  delete CAttribute_WorldItemPlacement::default_instance_;
  delete CAttribute_WorldItemPlacement_reflection_;
  delete CGCMsg_WorldItemPlacement_Update::default_instance_;
  delete CGCMsg_WorldItemPlacement_Update_reflection_;
  delete CMsgAcknowledgeXP::default_instance_;
  delete CMsgAcknowledgeXP_reflection_;
  delete CMsgTFXPSource::default_instance_;
  delete CMsgTFXPSource_reflection_;
  delete CMsgTFXPSourceBreakdown::default_instance_;
  delete CMsgTFXPSourceBreakdown_reflection_;
  delete CMsgTFClientInit::default_instance_;
  delete CMsgTFClientInit_reflection_;
  delete CMsgGCNotification::default_instance_;
  delete CMsgGCNotification_reflection_;
  delete CMsgGCNotificationQueue::default_instance_;
  delete CMsgGCNotificationQueue_reflection_;
  delete CMsgNotificationAcknowledge::default_instance_;
  delete CMsgNotificationAcknowledge_reflection_;
  delete CMsgNotificationAcknowledgeReply::default_instance_;
  delete CMsgNotificationAcknowledgeReply_reflection_;
  delete CMsgGC_Match_Result::default_instance_;
  delete CMsgGC_Match_Result_reflection_;
  delete CMsgGC_Match_Result_Player::default_instance_;
  delete CMsgGC_Match_Result_Player_reflection_;
  delete CMsgGC_Match_ResultResponse::default_instance_;
  delete CMsgGC_Match_ResultResponse_reflection_;
  delete CEconItemPreviewDataBlock::default_instance_;
  delete CEconItemPreviewDataBlock_reflection_;
  delete CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_;
  delete CMsgGC_Client2GCEconPreviewDataBlockRequest_reflection_;
  delete CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_;
  delete CMsgGC_Client2GCEconPreviewDataBlockResponse_reflection_;
  delete CSOTFLadderPlayerStats::default_instance_;
  delete CSOTFLadderPlayerStats_reflection_;
  delete CSOTFRatingData::default_instance_;
  delete CSOTFRatingData_reflection_;
  delete CMsgGC_TFVoteKickPlayerRequest::default_instance_;
  delete CMsgGC_TFVoteKickPlayerRequest_reflection_;
  delete CMsgGC_VoteKickPlayerRequestResponse::default_instance_;
  delete CMsgGC_VoteKickPlayerRequestResponse_reflection_;
  delete CMsgGC_DailyCompetitiveStatsRollup::default_instance_;
  delete CMsgGC_DailyCompetitiveStatsRollup_reflection_;
  delete CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_;
  delete CMsgGC_DailyCompetitiveStatsRollup_Response_reflection_;
  delete CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_;
  delete CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_reflection_;
  delete CMsgGC_ReportPlayer::default_instance_;
  delete CMsgGC_ReportPlayer_reflection_;
  delete CSOTFMatchResultPlayerStats::default_instance_;
  delete CSOTFMatchResultPlayerStats_reflection_;
  delete CMsgGCRequestMatchMakerStats::default_instance_;
  delete CMsgGCRequestMatchMakerStats_reflection_;
  delete CMsgGCDataCenterPopulation::default_instance_;
  delete CMsgGCDataCenterPopulation_reflection_;
  delete CMsgGCMatchGroupDataCenterPopulation::default_instance_;
  delete CMsgGCMatchGroupDataCenterPopulation_reflection_;
  delete CMsgGCMatchMakerStatsResponse::default_instance_;
  delete CMsgGCMatchMakerStatsResponse_reflection_;
  delete CMsgGCMatchHistoryLoad::default_instance_;
  delete CMsgGCMatchHistoryLoad_reflection_;
  delete CMsgGCDataCenterPing_Update::default_instance_;
  delete CMsgGCDataCenterPing_Update_reflection_;
  delete CMsgGCDataCenterPing_Update_PingEntry::default_instance_;
  delete CMsgGCDataCenterPing_Update_PingEntry_reflection_;
  delete CMsgGC_KickPlayerFromLobby::default_instance_;
  delete CMsgGC_KickPlayerFromLobby_reflection_;
  delete CMsgGCSurveyRequest::default_instance_;
  delete CMsgGCSurveyRequest_reflection_;
  delete CMsgGCSurveyResponse::default_instance_;
  delete CMsgGCSurveyResponse_reflection_;
  delete CSOQuestMapNode::default_instance_;
  delete CSOQuestMapNode_reflection_;
  delete CSOQuest::default_instance_;
  delete CSOQuest_reflection_;
  delete CSOQuestMapRewardPurchase::default_instance_;
  delete CSOQuestMapRewardPurchase_reflection_;
  delete CMsgGCQuestIdentify::default_instance_;
  delete CMsgGCQuestIdentify_reflection_;
  delete CMsgGCQuestDevGive::default_instance_;
  delete CMsgGCQuestDevGive_reflection_;
  delete CMsgGCQuestNodeTurnIn::default_instance_;
  delete CMsgGCQuestNodeTurnIn_reflection_;
  delete CMsgGCQuestMapUnlockNode::default_instance_;
  delete CMsgGCQuestMapUnlockNode_reflection_;
  delete CMsgGCNewMatchForLobbyRequest::default_instance_;
  delete CMsgGCNewMatchForLobbyRequest_reflection_;
  delete CMsgGCNewMatchForLobbyResponse::default_instance_;
  delete CMsgGCNewMatchForLobbyResponse_reflection_;
  delete CMsgGCChangeMatchPlayerTeamsRequest::default_instance_;
  delete CMsgGCChangeMatchPlayerTeamsRequest_reflection_;
  delete CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance_;
  delete CMsgGCChangeMatchPlayerTeamsRequest_Member_reflection_;
  delete CMsgGCChangeMatchPlayerTeamsResponse::default_instance_;
  delete CMsgGCChangeMatchPlayerTeamsResponse_reflection_;
  delete CMsgGCQuestComplete_Debug::default_instance_;
  delete CMsgGCQuestComplete_Debug_reflection_;
  delete CMsgGCQuestMap_Debug::default_instance_;
  delete CMsgGCQuestMap_Debug_reflection_;
  delete CMsgGCQuestMapPurchaseReward::default_instance_;
  delete CMsgGCQuestMapPurchaseReward_reflection_;
  delete CMsgGCQuestResponse::default_instance_;
  delete CMsgGCQuestResponse_reflection_;
  delete CMsgGCSetDisablePartyQuestProgress::default_instance_;
  delete CMsgGCSetDisablePartyQuestProgress_reflection_;
  delete CMsgQuestProgressReport::default_instance_;
  delete CMsgQuestProgressReport_reflection_;
  delete CMsgConsumePaintkit::default_instance_;
  delete CMsgConsumePaintkit_reflection_;
  delete CMsgPainkitDevGrant::default_instance_;
  delete CMsgPainkitDevGrant_reflection_;
  delete GCQuestStrangeEvent::default_instance_;
  delete GCQuestStrangeEvent_reflection_;
}

void protobuf_AddDesc_tf_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_base_5fgcmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023tf_gcmessages.proto\032\023steammessages.pro"
    "to\032\025base_gcmessages.proto\"X\n\033CMsgTFGolde"
    "nWrenchBroadcast\022\025\n\rwrench_number\030\001 \001(\005\022"
    "\017\n\007deleted\030\002 \001(\010\022\021\n\tuser_name\030\003 \001(\t\"B\n\024C"
    "MsgTFSaxxyBroadcast\022\027\n\017category_number\030\001"
    " \001(\005\022\021\n\tuser_name\030\002 \001(\t\"c\n\035CMsgGCTFSpeci"
    "ficItemBroadcast\022\026\n\016item_def_index\030\001 \001(\r"
    "\022\027\n\017was_destruction\030\002 \001(\010\022\021\n\tuser_name\030\003"
    " \001(\t\"\361\001\n\021CMsgTFWorldStatus\022,\n\035beta_stres"
    "s_test_event_active\030\001 \001(\010:\005false\022B\n\021even"
    "t_match_group\030\002 \001(\0162\016.ETFMatchGroup:\027k_e"
    "TFMatchGroup_Invalid\022\034\n\021event_expire_tim"
    "e\030\003 \001(\007:\0010\022\035\n\025active_client_version\030\004 \001("
    "\r\022-\n\025disabled_match_groups\030\005 \003(\0162\016.ETFMa"
    "tchGroup\"\243\001\n\020CSOTFDuelSummary\022\022\n\naccount"
    "_id\030\001 \001(\r\022\021\n\tduel_wins\030\002 \001(\r\022\023\n\013duel_los"
    "ses\030\003 \001(\r\022\034\n\024last_duel_account_id\030\004 \001(\r\022"
    "\033\n\023last_duel_timestamp\030\005 \001(\r\022\030\n\020last_due"
    "l_status\030\006 \001(\r\"Y\n\024CSOTFMapContribution\022\022"
    "\n\naccount_id\030\001 \001(\r\022\021\n\tdef_index\030\002 \001(\r\022\032\n"
    "\022contribution_level\030\003 \001(\r\"J\n\027CMsgTFVoteK"
    "ickBanPlayer\022\032\n\022account_id_subject\030\001 \001(\r"
    "\022\023\n\013kick_reason\030\002 \001(\r\"\320\001\n\035CMsgTFVoteKick"
    "BanPlayerResult\022\034\n\024account_id_initiator\030"
    "\001 \001(\r\022\032\n\022account_id_subject\030\002 \001(\r\022\023\n\013kic"
    "k_reason\030\003 \001(\r\022\027\n\017kick_successful\030\004 \001(\010\022"
    "\025\n\rnum_yes_votes\030\005 \001(\r\022\024\n\014num_no_votes\030\006"
    " \001(\r\022\032\n\022num_possible_votes\030\007 \001(\r\"C\n&CMsg"
    "TFFreeTrialChooseMostHelpfulFriend\022\031\n\021ac"
    "count_id_friend\030\001 \001(\r\".\n\027CMsgTFRequestTF"
    "2Friends\022\023\n\013account_ids\030\001 \003(\r\"6\n\037CMsgTFR"
    "equestTF2FriendsResponse\022\023\n\013account_ids\030"
    "\001 \003(\r\"/\n\017CSOTFPlayerInfo\022\034\n\024num_new_user"
    "s_helped\030\001 \001(\r\"2\n\026CMsgTFThankedBySomeone"
    "\022\030\n\020thanker_steam_id\030\001 \001(\004\"\026\n\024CMsgTFThan"
    "kedSomeone\"#\n!CMsgTFFreeTrialConvertedTo"
    "Premium\":\n\020CMsgSaxxyAwarded\022\020\n\010category\030"
    "\001 \001(\r\022\024\n\014winner_names\030\002 \003(\t\"E\n\034CMsgRepla"
    "ySubmitContestEntry\022\023\n\013youtube_url\030\001 \001(\t"
    "\022\020\n\010category\030\002 \001(\r\"7\n$CMsgReplaySubmitCo"
    "ntestEntryResponse\022\017\n\007success\030\001 \001(\010\"~\n\030C"
    "ReplayCachedContestData\022\021\n\ttimestamp\030\001 \001"
    "(\007\022\032\n\022num_votes_last_day\030\002 \001(\r\022\027\n\017video_"
    "entry_ids\030\003 \003(\r\022\032\n\022num_flags_last_day\030\004 "
    "\001(\r\"\035\n\033CMsgTFCoaching_AddToCoaches\"\"\n CM"
    "sgTFCoaching_RemoveFromCoaches\">\n\030CMsgTF"
    "Coaching_FindCoach\022\"\n\032account_id_friend_"
    "as_coach\030\001 \001(\r\"^\n CMsgTFCoaching_FindCoa"
    "chResponse\022\023\n\013found_coach\030\001 \001(\010\022\021\n\tnum_l"
    "ikes\030\002 \001(\r\022\022\n\ncoach_name\030\003 \001(\t\"P\n\027CMsgTF"
    "Coaching_AskCoach\022\032\n\022account_id_student\030"
    "\001 \001(\r\022\031\n\021student_is_friend\030\002 \001(\010\"E\n\037CMsg"
    "TFCoaching_AskCoachResponse\022\"\n\032accept_co"
    "aching_assignment\030\001 \001(\010\"z\n\034CMsgTFCoachin"
    "g_CoachJoinGame\022\021\n\tjoin_game\030\001 \001(\010\022\026\n\016se"
    "rver_address\030\002 \001(\r\022\023\n\013server_port\030\003 \001(\r\022"
    "\032\n\022account_id_student\030\004 \001(\r\"S\n\033CMsgTFCoa"
    "ching_CoachJoining\022\030\n\020account_id_coach\030\001"
    " \001(\r\022\032\n\022account_id_student\030\002 \001(\r\"6\n\032CMsg"
    "TFCoaching_CoachJoined\022\030\n\020account_id_coa"
    "ch\030\001 \001(\r\"5\n\037CMsgTFCoaching_LikeCurrentCo"
    "ach\022\022\n\nlike_coach\030\001 \001(\010\"=\n!CMsgTFCoachin"
    "g_RemoveCurrentCoach\022\030\n\020account_id_coach"
    "\030\001 \001(\r\"\341\001\n\034CMsgTFQuickplay_ScoreServers\022"
    "9\n\007servers\030\001 \003(\0132(.CMsgTFQuickplay_Score"
    "Servers.ServerInfo\032\205\001\n\nServerInfo\022\026\n\016ser"
    "ver_address\030\001 \001(\r\022\023\n\013server_port\030\002 \001(\r\022\021"
    "\n\tnum_users\030\003 \001(\r\022\020\n\010steam_id\030\004 \001(\004\022\021\n\tm"
    "ax_users\030\005 \001(\r\022\022\n\nuser_score\030\006 \001(\002\"\342\001\n$C"
    "MsgTFQuickplay_ScoreServersResponse\022A\n\007s"
    "ervers\030\001 \003(\01320.CMsgTFQuickplay_ScoreServ"
    "ersResponse.ServerInfo\032w\n\nServerInfo\022\026\n\016"
    "server_address\030\001 \001(\r\022\023\n\013server_port\030\002 \001("
    "\r\022\023\n\013total_score\030\003 \001(\002\022\020\n\010steam_id\030\004 \001(\004"
    "\022\025\n\roptions_score\030\005 \001(\r\"3\n\035CMsgTFQuickpl"
    "ay_PlayerJoining\022\022\n\naccount_id\030\001 \001(\r\"G\n\033"
    "CMsgGC_GameServer_LevelInfo\022\024\n\014level_loa"
    "ded\030\001 \001(\010\022\022\n\nlevel_name\030\002 \001(\t\";\n\037CMsgGC_"
    "GameServer_AuthChallenge\022\030\n\020challenge_st"
    "ring\030\001 \001(\t\"\241\001\n\034CMsgGC_GameServer_AuthRes"
    "ult\022\025\n\rauthenticated\030\001 \001(\010\022\034\n\024game_serve"
    "r_standing\030\002 \001(\005\022\"\n\032game_server_standing"
    "_trend\030\003 \001(\005\022\027\n\017is_valve_server\030\004 \001(\010\022\017\n"
    "\007message\030\005 \001(\t\"j\n\'CMsgGC_GameServer_Auth"
    "ChallengeResponse\022\036\n\026game_server_account"
    "_id\030\001 \001(\r\022\037\n\027hashed_challenge_string\030\002 \001"
    "(\014\"6\n CMsgGC_GameServer_CreateIdentity\022\022"
    "\n\naccount_id\030\001 \001(\r\"\332\002\n(CMsgGC_GameServer"
    "_CreateIdentityResponse\022\027\n\017account_creat"
    "ed\030\001 \001(\010\022\036\n\026game_server_account_id\030\002 \001(\r"
    "\022\"\n\032game_server_identity_token\030\003 \001(\t\022Y\n\006"
    "status\030\004 \001(\01621.CMsgGC_GameServer_CreateI"
    "dentityResponse.EStatus:\026kStatus_Generic"
    "Failure\"v\n\007EStatus\022\032\n\026kStatus_GenericFai"
    "lure\020\000\022\034\n\017kStatus_TooMany\020\377\377\377\377\377\377\377\377\377\001\022\034\n\017"
    "kStatus_NoPrivs\020\376\377\377\377\377\377\377\377\377\001\022\023\n\017kStatus_Cr"
    "eated\020\001\",\n\026CMsgGC_GameServer_List\022\022\n\nacc"
    "ount_id\030\001 \001(\r\"\215\002\n\036CMsgGC_GameServer_List"
    "Response\022N\n\022owned_game_servers\030\001 \003(\01322.C"
    "MsgGC_GameServer_ListResponse.GameServer"
    "Identity\032\232\001\n\022GameServerIdentity\022\036\n\026game_"
    "server_account_id\030\001 \001(\r\022\"\n\032game_server_i"
    "dentity_token\030\002 \001(\t\022\034\n\024game_server_stand"
    "ing\030\003 \001(\005\022\"\n\032game_server_standing_trend\030"
    "\004 \001(\005\"A\n\037CMsgGC_GameServer_ResetIdentity"
    "\022\036\n\026game_server_account_id\030\001 \001(\r\"\227\001\n\'CMs"
    "gGC_GameServer_ResetIdentityResponse\022(\n "
    "game_server_identity_token_reset\030\001 \001(\010\022\036"
    "\n\026game_server_account_id\030\002 \001(\r\022\"\n\032game_s"
    "erver_identity_token\030\003 \001(\t\"\035\n\033CMsgGC_Gam"
    "eServer_AckPolicy\"F\n#CMsgGC_GameServer_A"
    "ckPolicyResponse\022\016\n\006result\030\001 \001(\r\022\017\n\007mess"
    "age\030\002 \001(\t\":\n\'CMsgGC_Client_UseServerModi"
    "ficationItem\022\017\n\007item_id\030\001 \001(\004\"\374\003\n0CMsgGC"
    "_Client_UseServerModificationItem_Respon"
    "se\022\226\001\n\rresponse_code\030\001 \001(\0162Q.CMsgGC_Clie"
    "nt_UseServerModificationItem_Response.ES"
    "erverModificationItemResponse:,kServerMo"
    "dificationItemResponse_AlreadyInUse\"\256\002\n\037"
    "EServerModificationItemResponse\0220\n,kServ"
    "erModificationItemResponse_AlreadyInUse\020"
    "\001\022<\n8kServerModificationItemResponse_Not"
    "OnAuthenticatedServer\020\002\0220\n,kServerModifi"
    "cationItemResponse_ServerReject\020\003\0221\n-kSe"
    "rverModificationItemResponse_InternalErr"
    "or\020\004\0226\n2kServerModificationItemResponse_"
    "EventAlreadyActive\020\005\"\215\001\n+CMsgGC_GameServ"
    "er_UseServerModificationItem\022^\n\021modifica"
    "tion_type\030\001 \001(\0162\034.EServerModificationIte"
    "mType:%kGameServerModificationItem_Hallo"
    "ween\"\216\004\n4CMsgGC_GameServer_UseServerModi"
    "ficationItem_Response\022^\n\021modification_ty"
    "pe\030\001 \001(\0162\034.EServerModificationItemType:%"
    "kGameServerModificationItem_Halloween\022\251\001"
    "\n\024server_response_code\030\002 \001(\0162[.CMsgGC_Ga"
    "meServer_UseServerModificationItem_Respo"
    "nse.EServerModificationItemServerRespons"
    "e:.kServerModificationItemServerResponse"
    "_Accepted\"\311\001\n%EServerModificationItemSer"
    "verResponse\0222\n.kServerModificationItemSe"
    "rverResponse_Accepted\020\001\0226\n2kServerModifi"
    "cationItemServerResponse_NoVoteCalled\020\002\022"
    "4\n0kServerModificationItemServerResponse"
    "_VoteFailed\020\003\"\221\001\n/CMsgGC_GameServer_Serv"
    "erModificationItemExpired\022^\n\021modificatio"
    "n_type\030\001 \001(\0162\034.EServerModificationItemTy"
    "pe:%kGameServerModificationItem_Hallowee"
    "n\"\232\001\n(CMsgGC_GameServer_ServerModificati"
    "onItem\022^\n\021modification_type\030\001 \001(\0162\034.ESer"
    "verModificationItemType:%kGameServerModi"
    "ficationItem_Halloween\022\016\n\006active\030\002 \001(\010\"Y"
    "\n\035CMsgGC_Halloween_ReservedItem\022\t\n\001x\030\001 \003"
    "(\002\022\t\n\001y\030\002 \003(\002\022\t\n\001z\030\003 \003(\002\022\027\n\017spawn_meta_i"
    "nfo\030\007 \001(\r\"]\n\032CMsgGC_Halloween_GrantItem\022"
    "\034\n\024recipient_account_id\030\001 \001(\r\022\020\n\010level_i"
    "d\030\002 \001(\r\022\017\n\007flagged\030\003 \001(\010\"B\n\"CMsgGC_Hallo"
    "ween_GrantItemResponse\022\034\n\024recipient_acco"
    "unt_id\030\001 \001(\r\"\036\n\034CMsgGC_Halloween_ItemCla"
    "imed\"M\n\"CMsgGC_PickupItemEligibility_Que"
    "ry\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013seconds_ago\030\002 "
    "\001(\r\"h\n*CMsgGC_PickupItemEligibility_Quer"
    "yResponse\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014was_eli"
    "gible\030\002 \001(\010\022\020\n\010level_id\030\003 \001(\r\"\226\004\n\020CSOTFP"
    "artyMember\022\023\n\013owns_ticket\030\002 \001(\010\022\032\n\022compl"
    "eted_missions\030\003 \001(\r\022\023\n\013badge_level\030\004 \001(\r"
    "\022\032\n\022competitive_access\030\t \001(\010\022\022\n\nexperien"
    "ce\030\016 \001(\r\0228\n\017player_criteria\030\020 \001(\0132\037.CTFP"
    "erPlayerMatchCriteriaProto\022,\n\010activity\030\021"
    " \001(\0132\032.CSOTFPartyMember.Activity\022\025\n\rcasu"
    "al_banned\030\022 \001(\010\022\025\n\rranked_banned\030\023 \001(\010\022\033"
    "\n\023casual_low_priority\030\024 \001(\010\022\033\n\023ranked_lo"
    "w_priority\030\025 \001(\010\022\025\n\rlobby_standby\030\026 \001(\010\032"
    "\244\001\n\010Activity\022\020\n\010lobby_id\030\001 \001(\006\022B\n\021lobby_"
    "match_group\030\002 \001(\0162\016.ETFMatchGroup:\027k_eTF"
    "MatchGroup_Invalid\022\032\n\022multiqueue_blocked"
    "\030\003 \001(\010\022\016\n\006online\030\004 \001(\010\022\026\n\016client_version"
    "\030\005 \001(\r\"\227\001\n\024TFPendingPartyMember\022\017\n\007steam"
    "id\030\001 \001(\006\0222\n\004type\030\002 \001(\0162\033.TFPendingPartyM"
    "ember.EType:\007Invited\022\017\n\007inviter\030\003 \001(\006\")\n"
    "\005EType\022\013\n\007Invited\020\000\022\023\n\017RequestedToJoin\020\001"
    "\"\226\001\n\021TFSyncedMMUIState\022C\n\tmenu_step\030\001 \001("
    "\0162\024.ETFSyncedMMMenuStep:\032k_eTFSyncedMMMe"
    "nuStep_None\022<\n\013match_group\030\002 \001(\0162\016.ETFMa"
    "tchGroup:\027k_eTFMatchGroup_Invalid\"\333\001\n\032CT"
    "FGroupMatchCriteriaProto\022\024\n\014late_join_ok"
    "\030\005 \001(\010\022 \n\025custom_ping_tolerance\030\r \001(\r:\0010"
    "\022\027\n\017mvm_mannup_tour\030\n \001(\t\022\033\n\023mvm_mannup_"
    "missions\030\017 \003(\t\022\035\n\025mvm_bootcamp_missions\030"
    "\020 \003(\t\0220\n\017casual_criteria\030\014 \001(\0132\027.CTFCasu"
    "alMatchCriteria\"4\n\026CTFCasualMatchCriteri"
    "a\022\032\n\022selected_maps_bits\030\003 \003(\007\";\n\036CTFPerP"
    "layerMatchCriteriaProto\022\031\n\021mvm_squad_sur"
    "plus\030\001 \001(\010\"\310\001\n\017CTFPartyOptions\022\032\n\022overwr"
    "ite_existing\030\001 \001(\010\0223\n\016group_criteria\030\002 \001"
    "(\0132\033.CTFGroupMatchCriteriaProto\0228\n\017playe"
    "r_criteria\030\003 \001(\0132\037.CTFPerPlayerMatchCrit"
    "eriaProto\022*\n\016player_uistate\030\005 \001(\0132\022.TFSy"
    "ncedMMUIState\"J\n\023CMsgPartySetOptions\022\020\n\010"
    "party_id\030\001 \001(\006\022!\n\007options\030\002 \001(\0132\020.CTFPar"
    "tyOptions\"\035\n\033CMsgPartySetOptionsResponse"
    "\"\221\001\n\026CMsgPartyQueueForMatch\022\020\n\010party_id\030"
    "\001 \001(\006\022\'\n\rfinal_options\030\002 \001(\0132\020.CTFPartyO"
    "ptions\022<\n\013match_group\030\003 \001(\0162\016.ETFMatchGr"
    "oup:\027k_eTFMatchGroup_Invalid\" \n\036CMsgPart"
    "yQueueForMatchResponse\"D\n\030CMsgPartyQueue"
    "ForStandby\022\020\n\010party_id\030\001 \001(\006\022\026\n\016party_lo"
    "bby_id\030\002 \001(\006\"\"\n CMsgPartyQueueForStandby"
    "Response\"j\n\030CMsgPartyRemoveFromQueue\022\020\n\010"
    "party_id\030\001 \001(\006\022<\n\013match_group\030\002 \001(\0162\016.ET"
    "FMatchGroup:\027k_eTFMatchGroup_Invalid\"\"\n "
    "CMsgPartyRemoveFromQueueResponse\"3\n\037CMsg"
    "PartyRemoveFromStandbyQueue\022\020\n\010party_id\030"
    "\001 \001(\006\")\n\'CMsgPartyRemoveFromStandbyQueue"
    "Response\"_\n\025CMsgPartyInvitePlayer\022\020\n\010par"
    "ty_id\030\001 \001(\006\022\021\n\tplayer_id\030\002 \001(\006\022!\n\031expect"
    "ing_request_to_join\030\003 \001(\010\"\177\n\032CMsgPartyRe"
    "questJoinPlayer\022\030\n\020current_party_id\030\001 \001("
    "\006\022\026\n\016join_player_id\030\002 \001(\006\022\025\n\rjoin_party_"
    "id\030\003 \001(\006\022\030\n\020expecting_invite\030\004 \001(\010\"J\n\033CM"
    "sgPartyClearPendingPlayer\022\020\n\010party_id\030\001 "
    "\001(\006\022\031\n\021pending_player_id\030\002 \001(\006\"%\n#CMsgPa"
    "rtyClearPendingPlayerResponse\"9\n\037CMsgPar"
    "tyClearOtherPartyRequest\022\026\n\016other_party_"
    "id\030\001 \001(\006\")\n\'CMsgPartyClearOtherPartyRequ"
    "estResponse\"C\n\030CMsgPartyPromoteToLeader\022"
    "\020\n\010party_id\030\001 \001(\006\022\025\n\rnew_leader_id\030\002 \001(\006"
    "\":\n\023CMsgPartyKickMember\022\020\n\010party_id\030\001 \001("
    "\006\022\021\n\ttarget_id\030\002 \001(\006\"2\n\021CMsgPartySendCha"
    "t\022\020\n\010party_id\030\001 \001(\006\022\013\n\003msg\030\002 \001(\t\"n\n\020CMsg"
    "PartyChatMsg\022;\n\004type\030\001 \001(\0162\021.ETFPartyCha"
    "tType:\032k_eTFPartyChatType_Invalid\022\020\n\010act"
    "or_id\030\002 \001(\006\022\013\n\003msg\030\003 \001(\t\"\370\004\n\nCSOTFParty\022"
    "\020\n\010party_id\030\001 \001(\004\022\021\n\tleader_id\030\002 \001(\006\022\022\n\n"
    "member_ids\030\003 \003(\006\022\"\n\007members\030\r \003(\0132\021.CSOT"
    "FPartyMember\022\033\n\023associated_lobby_id\030# \001("
    "\004\022M\n\034associated_lobby_match_group\030( \001(\0162"
    "\016.ETFMatchGroup:\027k_eTFMatchGroup_Invalid"
    "\0222\n\022matchmaking_queues\030+ \003(\0132\026.CSOTFPart"
    "y.QueueEntry\0223\n\016group_criteria\030% \001(\0132\033.C"
    "TFGroupMatchCriteriaProto\022\032\n\022casual_bann"
    "ed_time\030\022 \001(\r\022 \n\030casual_low_priority_tim"
    "e\030\024 \001(\r\022\032\n\022ranked_banned_time\030) \001(\r\022 \n\030r"
    "anked_low_priority_time\030* \001(\r\022+\n\017leader_"
    "ui_state\030, \001(\0132\022.TFSyncedMMUIState\022.\n\017pe"
    "nding_members\030\' \003(\0132\025.TFPendingPartyMemb"
    "er\032_\n\nQueueEntry\022<\n\013match_group\030\001 \001(\0162\016."
    "ETFMatchGroup:\027k_eTFMatchGroup_Invalid\022\023"
    "\n\013queued_time\030\002 \001(\007\"\361\001\n\020CSOTFPartyInvite"
    "\022\020\n\010group_id\030\001 \001(\004\022\017\n\007inviter\030\002 \001(\006\022.\n\007m"
    "embers\030\004 \003(\0132\035.CSOTFPartyInvite.PartyMem"
    "ber\0224\n\004type\030\005 \001(\0162\026.CSOTFPartyInvite.Typ"
    "e:\016PENDING_INVITE\032\036\n\013PartyMember\022\017\n\007stea"
    "mid\030\002 \001(\006\"4\n\004Type\022\022\n\016PENDING_INVITE\020\001\022\030\n"
    "\024PENDING_JOIN_REQUEST\020\002\"\304\004\n\023CTFLobbyPlay"
    "erProto\022\n\n\002id\030\001 \001(\006\022/\n\004team\030\003 \001(\0162\013.TF_G"
    "C_TEAM:\024TF_GC_TEAM_DEFENDERS\022A\n\rconnect_"
    "state\030\r \001(\0162!.CTFLobbyPlayerProto.Connec"
    "tState:\007INVALID\022\014\n\004name\030\006 \001(\t\022\031\n\021origina"
    "l_party_id\030\014 \001(\004\022\025\n\rsquad_surplus\030\016 \001(\010\022"
    "\023\n\013badge_level\030\017 \001(\r\022\031\n\021last_connect_tim"
    "e\030\021 \001(\r\0227\n\004type\030\023 \001(\0162\031.CTFLobbyPlayerPr"
    "oto.Type:\016INVALID_PLAYER\022\031\n\021normalized_r"
    "ating\030\024 \001(\001\022\036\n\026normalized_uncertainty\030\026 "
    "\001(\001\022\014\n\004rank\030\025 \001(\r\"c\n\014ConnectState\022\013\n\007INV"
    "ALID\020\000\022\027\n\023RESERVATION_PENDING\020\001\022\014\n\010RESER"
    "VED\020\002\022\r\n\tCONNECTED\020\003\022\020\n\014DISCONNECTED\020\005\"V"
    "\n\004Type\022\022\n\016INVALID_PLAYER\020\000\022\020\n\014MATCH_PLAY"
    "ER\020\001\022\022\n\016STANDBY_PLAYER\020\002\022\024\n\020OBSERVING_PL"
    "AYER\020\003\"e\n\023CTFLobbyInviteProto\022\020\n\010lobby_i"
    "d\030\001 \001(\006\022<\n\013match_group\030\002 \001(\0162\016.ETFMatchG"
    "roup:\027k_eTFMatchGroup_Invalid\"\354\005\n\024CSOTFG"
    "ameServerLobby\022\020\n\010lobby_id\030\001 \001(\004\022%\n\007memb"
    "ers\030\002 \003(\0132\024.CTFLobbyPlayerProto\022\024\n\tserve"
    "r_id\030\006 \001(\006:\0010\0223\n\005state\030\004 \001(\0162\033.CSOTFGame"
    "ServerLobby.State:\007UNKNOWN\022\017\n\007connect\030\005 "
    "\001(\t\022@\n\ngame_state\030\026 \001(\0162\020.TF_GC_GameStat"
    "e:\032TF_GC_GAMESTATE_STATE_INIT\022!\n\031initial"
    "_average_mm_rating\030  \001(\001\022\030\n\020mannup_tour_"
    "name\030* \001(\t\022\020\n\010map_name\030& \001(\t\022\024\n\014mission_"
    "name\030\' \001(\t\022\023\n\013match_group\030) \001(\r\022\023\n\010match"
    "_id\030\036 \001(\004:\0010\022\023\n\013formed_time\030$ \001(\r\022\r\n\005fla"
    "gs\030+ \001(\r\022\032\n\022late_join_eligible\030, \001(\010\022\030\n\020"
    "fixed_match_size\030- \001(\r\022:\n\014is_war_match\030."
    " \001(\0162\036.CSOTFGameServerLobby.WarMatch:\004NO"
    "PE\022\032\n\022next_maps_for_vote\030/ \003(\r\022\030\n\020lobby_"
    "mm_version\0300 \001(\r\022-\n\017pending_members\0301 \003("
    "\0132\024.CTFLobbyPlayerProto\".\n\005State\022\013\n\007UNKN"
    "OWN\020\000\022\017\n\013SERVERSETUP\020\001\022\007\n\003RUN\020\002\"C\n\010WarMa"
    "tch\022\010\n\004NOPE\020\000\022\025\n\021INVADERS_ARE_PYRO\020\001\022\026\n\022"
    "INVADERS_ARE_HEAVY\020\002\"S\n\023CMsgExitMatchmak"
    "ing\022\030\n\020explicit_abandon\030\001 \001(\010\022\020\n\010party_i"
    "d\030\002 \001(\004\022\020\n\010lobby_id\030\003 \001(\004\"s\n\025CMsgAcceptL"
    "obbyInvite\022\030\n\020invited_lobby_id\030\001 \001(\004\022\033\n\023"
    "abandoning_match_id\030\002 \001(\004\022#\n\033abandoning_"
    "invite_lobby_ids\030\003 \003(\004\"\034\n\032CMsgAcceptLobb"
    "yInviteReply\"#\n!CMsgMatchmakingSearchCou"
    "ntRequest\"H\n\"CMsgMatchmakingSearchCountR"
    "esponse\022\"\n\032searching_players_by_group\030\001 "
    "\003(\r\" \n\036CMsgKickedFromMatchmakingQueue\"\247\007"
    "\n\037CMsgGameServerMatchmakingStatus\022\034\n\016ser"
    "ver_version\030\020 \001(\r:\0041225\022R\n\021matchmaking_s"
    "tate\030\001 \001(\0162\027.ServerMatchmakingState:\036Ser"
    "verMatchmakingState_INVALID\022\013\n\003map\030\003 \001(\t"
    "\022\014\n\004tags\030\004 \001(\t\022\021\n\tbot_count\030\005 \001(\r\022\026\n\016num"
    "_spectators\030\006 \001(\r\022\023\n\013max_players\030\007 \001(\r\022\022"
    "\n\nslots_free\030\010 \001(\r\022\025\n\rserver_region\030\t \001("
    "\r\022\026\n\016server_loadavg\030\n \001(\002\022\026\n\016server_trus"
    "ted\030\013 \001(\010\022\030\n\020server_dedicated\030\014 \001(\010\022\016\n\006s"
    "trict\030\021 \001(\r\0228\n\007players\030\r \003(\0132\'.CMsgGameS"
    "erverMatchmakingStatus.Player\022@\n\ngame_st"
    "ate\030\016 \001(\0162\020.TF_GC_GameState:\032TF_GC_GAMES"
    "TATE_STATE_INIT\022;\n\005event\030\017 \001(\0162&.CMsgGam"
    "eServerMatchmakingStatus.Event:\004None\022\020\n\010"
    "mvm_wave\030\022 \001(\r\022\034\n\024mvm_credits_acquired\030\023"
    " \001(\r\022\033\n\023mvm_credits_dropped\030\024 \001(\r\022\027\n\013mat"
    "ch_group\030\027 \001(\021:\002-1\022\030\n\020lobby_mm_version\030\030"
    " \001(\r\032o\n\006Player\022\020\n\010steam_id\030\001 \001(\006\022S\n\rconn"
    "ect_state\030\002 \001(\01623.CMsgGameServerMatchmak"
    "ingStatus.PlayerConnectState:\007INVALID\">\n"
    "\022PlayerConnectState\022\013\n\007INVALID\020\000\022\r\n\tCONN"
    "ECTED\020\001\022\014\n\010RESERVED\020\002\"H\n\005Event\022\010\n\004None\020\000"
    "\022\016\n\nMvMVictory\020\001\022\r\n\tMvMDefeat\020\002\022\026\n\022Ackno"
    "wledgePlayers\020\003\"\206\005\n\027CMsgMatchmakingProgr"
    "ess\022\031\n\021avg_wait_time_new\030\004 \001(\r\022\037\n\027avg_wa"
    "it_time_join_late\030\005 \001(\r\022\026\n\016your_wait_tim"
    "e\030\006 \001(\r\022,\n$matching_worldwide_searching_"
    "players\030\010 \001(\r\022+\n#matching_near_you_searc"
    "hing_players\030\t \001(\r\022)\n!total_worldwide_se"
    "arching_players\030\r \001(\r\022(\n total_near_you_"
    "searching_players\030\016 \001(\r\022)\n!matching_worl"
    "dwide_active_players\030\017 \001(\r\022(\n matching_n"
    "ear_you_active_players\030\020 \001(\r\022&\n\036total_wo"
    "rldwide_active_players\030\021 \001(\r\022%\n\035total_ne"
    "ar_you_active_players\030\022 \001(\r\022,\n$matching_"
    "worldwide_empty_gameservers\030\023 \001(\r\022+\n#mat"
    "ching_near_you_empty_gameservers\030\024 \001(\r\022)"
    "\n!total_worldwide_empty_gameservers\030\025 \001("
    "\r\022(\n total_near_you_empty_gameservers\030\026 "
    "\001(\r\022\023\n\013urgency_pct\030\001 \001(\r\"\303\004\n\022CMsgMvMVict"
    "oryInfo\022+\n\007players\030\001 \003(\0132\032.CMsgMvMVictor"
    "yInfo.Player\022\021\n\ttour_name\030\002 \001(\t\022\024\n\014missi"
    "on_name\030\003 \001(\t\032\201\001\n\004Item\022>\n\014grant_reason\030\001"
    " \001(\0162\037.CMsgMvMVictoryInfo.GrantReason:\007I"
    "NVALID\022\021\n\titem_data\030\002 \001(\014\022&\n\036squad_surpl"
    "us_claimer_steam_id\030\003 \001(\006\032\362\001\n\006Player\022\020\n\010"
    "steam_id\030\001 \001(\006\022\025\n\rbadge_granted\030\003 \001(\010\022\036\n"
    "\026badge_progress_updated\030\004 \001(\010\022\025\n\rbadge_l"
    "eveled\030\005 \001(\010\022\023\n\013badge_level\030\006 \001(\r\022\033\n\023bad"
    "ge_progress_bits\030\007 \001(\r\022\'\n\005items\030\010 \003(\0132\030."
    "CMsgMvMVictoryInfo.Item\022\027\n\017voucher_missi"
    "ng\030\t \001(\010\022\024\n\014badge_points\030\n \001(\r\"^\n\013GrantR"
    "eason\022\013\n\007INVALID\020\000\022\021\n\rBADGE_LEVELED\020\001\022\021\n"
    "\rSQUAD_SURPLUS\020\002\022\013\n\007MANN_UP\020\003\022\017\n\013HELP_A_"
    "NOOB\020\004\"a\n\025CGCMsgTFHelloResponse\022\025\n\rversi"
    "on_check\030\001 \001(\r\022\030\n\020version_checksum\030\002 \003(\004"
    "\022\027\n\017version_verbose\030\003 \001(\r\"\221\001\n\014CGCMsgTFSy"
    "nc\022\030\n\020version_checksum\030\001 \001(\014\022\025\n\rversion_"
    "check\030\002 \001(\r\022\030\n\020version_check_ex\030\003 \001(\r\022\031\n"
    "\021version_check_ex2\030\004 \001(\r\022\033\n\023version_chec"
    "ksum_ex\030\005 \001(\014\"^\n\016CGCMsgTFSyncEx\022\030\n\020versi"
    "on_checksum\030\001 \001(\t\022\033\n\023version_checksum_ex"
    "\030\002 \001(\014\022\025\n\rversion_check\030\003 \001(\r\"\340\001\n\016CMsgMv"
    "MVictory\022\034\n\024legacy_mission_index\030\001 \001(\r\022\030"
    "\n\020tour_name_mannup\030\005 \001(\t\022\024\n\014mission_name"
    "\030\006 \001(\t\022\'\n\007players\030\002 \003(\0132\026.CMsgMvMVictory"
    ".Player\022\020\n\010lobby_id\030\003 \001(\004\022\022\n\nevent_time\030"
    "\004 \001(\007\0321\n\006Player\022\020\n\010steam_id\030\001 \001(\006\022\025\n\rsqu"
    "ad_surplus\030\002 \001(\010\"\033\n\031CMsgMvMMannUpVictory"
    "Reply\"@\n\032CMsgGameServerKickingLobby\022\020\n\010l"
    "obby_id\030\003 \001(\004\022\020\n\010match_id\030\004 \001(\004\"$\n\"CMsgG"
    "ameServerKickingLobbyResponse\"6\n\"CMsgLea"
    "veGameAndPrepareToJoinParty\022\020\n\010party_id\030"
    "\001 \001(\006\"\322\001\n\023CMsgPlayerLeftMatch\022\020\n\010steam_i"
    "d\030\001 \001(\006\022I\n\014leave_reason\030\002 \001(\0162\023.TFMatchL"
    "eaveReason:\036TFMatchLeaveReason_UNSPECIFI"
    "ED\022\023\n\013was_abandon\030\003 \001(\010\022\020\n\010lobby_id\030\004 \001("
    "\004\022\020\n\010match_id\030\005 \001(\004\022%\n\014xp_breakdown\030\006 \003("
    "\0132\017.CMsgTFXPSource\"\035\n\033CMsgPlayerLeftMatc"
    "hResponse\"]\n%CMsgPlayerVoteKickedAfterLe"
    "avingMatch\022\020\n\010steam_id\030\001 \001(\006\022\020\n\010lobby_id"
    "\030\002 \001(\006\022\020\n\010match_id\030\003 \001(\006\"/\n-CMsgPlayerVo"
    "teKickedAfterLeavingMatchResponse\"\264\001\n\035CM"
    "sgHalloween_ServerBossEvent\022\025\n\revent_cou"
    "nter\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\021\n\tboss_ty"
    "pe\030\003 \001(\r\022\022\n\nboss_level\030\004 \001(\r\022\022\n\nevent_ty"
    "pe\030\005 \001(\r\022\030\n\020players_involved\030\006 \001(\r\022\024\n\014el"
    "apsed_time\030\007 \001(\002\"\225\005\n\032CMsgHalloween_Meras"
    "mus2012\022\025\n\revent_counter\030\001 \001(\r\022\026\n\016time_s"
    "ubmitted\030\002 \001(\007\022\027\n\017is_valve_server\030\003 \001(\010\022"
    "\022\n\nboss_level\030\004 \001(\r\022\026\n\016spawned_health\030\005 "
    "\001(\r\022\030\n\020remaining_health\030\006 \001(\r\022\021\n\tlife_ti"
    "me\030\007 \001(\r\022\022\n\nbomb_kills\030\010 \001(\r\022\023\n\013staff_ki"
    "lls\030\t \001(\r\022\021\n\tpvp_kills\030\n \001(\r\022\026\n\016prophunt"
    "_time1\030\013 \001(\r\022\026\n\016prophunt_time2\030\014 \001(\r\022\021\n\t"
    "dmg_scout\030\r \001(\r\022\022\n\ndmg_sniper\030\016 \001(\r\022\023\n\013d"
    "mg_soldier\030\017 \001(\r\022\020\n\010dmg_demo\030\020 \001(\r\022\021\n\tdm"
    "g_medic\030\021 \001(\r\022\021\n\tdmg_heavy\030\022 \001(\r\022\020\n\010dmg_"
    "pyro\030\023 \001(\r\022\017\n\007dmg_spy\030\024 \001(\r\022\024\n\014dmg_engin"
    "eer\030\025 \001(\r\022\023\n\013scout_count\030\026 \001(\r\022\024\n\014sniper"
    "_count\030\027 \001(\r\022\025\n\rsolider_count\030\030 \001(\r\022\022\n\nd"
    "emo_count\030\031 \001(\r\022\023\n\013medic_count\030\032 \001(\r\022\023\n\013"
    "heavy_count\030\033 \001(\r\022\022\n\npyro_count\030\034 \001(\r\022\021\n"
    "\tspy_count\030\035 \001(\r\022\026\n\016engineer_count\030\036 \001(\r"
    "\"\231\001\n$CMsgUpdateHalloweenMerasmusLootLeve"
    "l\022=\n\007players\030\001 \003(\0132,.CMsgUpdateHalloween"
    "MerasmusLootLevel.Player\022\026\n\016merasmus_lev"
    "el\030\002 \001(\r\032\032\n\006Player\022\020\n\010steam_id\030\001 \001(\006\"\"\n\021"
    "CAttribute_String\022\r\n\005value\030\001 \001(\t\"\255\001\n!CAt"
    "tribute_DynamicRecipeComponent\022\021\n\tdef_in"
    "dex\030\001 \001(\r\022\024\n\014item_quality\030\002 \001(\r\022\027\n\017compo"
    "nent_flags\030\003 \001(\r\022\031\n\021attributes_string\030\004 "
    "\001(\t\022\024\n\014num_required\030\005 \001(\r\022\025\n\rnum_fulfill"
    "ed\030\006 \001(\r\"\240\002\nACAttribute_DynamicRecipeCom"
    "ponent_COMPAT_NEVER_SERIALIZE_THIS_OUT\022\021"
    "\n\tdef_index\030\001 \001(\r\022\020\n\010item_def\030\002 \001(\r\022\024\n\014i"
    "tem_quality\030\003 \001(\r\022\027\n\017component_flags\030\004 \001"
    "(\r\022\022\n\nitem_flags\030\005 \001(\r\022\031\n\021attributes_str"
    "ing\030\006 \001(\t\022\024\n\014num_required\030\007 \001(\r\022\022\n\nitem_"
    "count\030\010 \001(\r\022\025\n\rnum_fulfilled\030\t \001(\r\022\027\n\017it"
    "ems_fulfilled\030\n \001(\r\"+\n\033CAttribute_ItemSl"
    "otCriteria\022\014\n\004tags\030\001 \001(\t\"^\n\030CMsgSetItemS"
    "lotAttribute\022\017\n\007item_id\030\001 \001(\004\022\035\n\025slot_it"
    "em_original_id\030\002 \001(\004\022\022\n\nslot_index\030\003 \001(\r"
    "\"\\\n\nCSOWarData\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006wa"
    "r_id\030\002 \001(\r\022\023\n\013affiliation\030\003 \001(\r\022\025\n\rpoint"
    "s_scored\030\004 \001(\r\"P\n\035CGCMsgGC_War_Individua"
    "lUpdate\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006war_id\030\002 \001("
    "\r\022\r\n\005score\030\003 \001(\r\";\n\024CGCMsgGC_War_JoinWar"
    "\022\023\n\013affiliation\030\001 \001(\r\022\016\n\006war_id\030\002 \001(\r\"1\n"
    "\037CGCMsgGC_War_RequestGlobalStats\022\016\n\006war_"
    "id\030\001 \001(\r\"\236\001\n CGCMsgGC_War_GlobalStatsRes"
    "ponse\022@\n\013side_scores\030\001 \003(\0132+.CGCMsgGC_Wa"
    "r_GlobalStatsResponse.SideScore\022\016\n\006war_i"
    "d\030\002 \001(\r\032(\n\tSideScore\022\014\n\004side\030\001 \001(\r\022\r\n\005sc"
    "ore\030\002 \001(\004\"u\n/CGCMsgGC_PlayerDuckLeaderbo"
    "ard_IndividualUpdate\022\r\n\005score\030\002 \001(\r\022\014\n\004t"
    "ype\030\003 \001(\r\022\020\n\010score_id\030\004 \001(\014\022\023\n\013score_che"
    "ck\030\005 \001(\r\"\223\001\n\035CAttribute_WorldItemPlaceme"
    "nt\022\030\n\020original_item_id\030\001 \001(\004\022\r\n\005pos_x\030\002 "
    "\001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022\r\n\005ang"
    "_x\030\005 \001(\002\022\r\n\005ang_y\030\006 \001(\002\022\r\n\005ang_z\030\007 \001(\002\"\305"
    "\001\n CGCMsg_WorldItemPlacement_Update\022\030\n\020o"
    "riginal_item_id\030\001 \001(\004\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005"
    "pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022\r\n\005ang_x\030\005 \001("
    "\002\022\r\n\005ang_y\030\006 \001(\002\022\r\n\005ang_z\030\007 \001(\002\022\030\n\020force"
    "_remove_all\030\010 \001(\010\022\023\n\013attrib_name\030\t \001(\t\"F"
    "\n\021CMsgAcknowledgeXP\022\023\n\013match_group\030\001 \001(\005"
    "\022\034\n\024predicted_experience\030\002 \001(\r\"\202\003\n\016CMsgT"
    "FXPSource\0228\n\004type\030\001 \001(\0162\034.CMsgTFXPSource"
    ".XPSourceType:\014SOURCE_SCORE\022\016\n\006amount\030\002 "
    "\001(\005\022\023\n\013match_group\030\003 \001(\005\022\022\n\naccount_id\030\004"
    " \001(\r\022\020\n\010match_id\030\005 \001(\004\"\352\001\n\014XPSourceType\022"
    "\020\n\014SOURCE_SCORE\020\000\022\032\n\026SOURCE_OBJECTIVE_BO"
    "NUS\020\001\022\032\n\026SOURCE_COMPLETED_MATCH\020\002\022\036\n\032SOU"
    "RCE_COMPETITIVE_ABANDON\020\003\022\032\n\026SOURCE_COMP"
    "ETITIVE_WIN\020\004\022\033\n\027SOURCE_COMPETITIVE_LOSS"
    "\020\005\022\034\n\030SOURCE_AUTOBALANCE_BONUS\020\006\022\031\n\025SOUR"
    "CE_PRESTIGE_BONUS\020\007\";\n\027CMsgTFXPSourceBre"
    "akdown\022 \n\007sources\030\001 \003(\0132\017.CMsgTFXPSource"
    "\"<\n\020CMsgTFClientInit\022\026\n\016client_version\030\001"
    " \001(\r\022\020\n\010language\030\002 \001(\005\"\302\003\n\022CMsgGCNotific"
    "ation\022\027\n\017notification_id\030\001 \001(\004\022\022\n\naccoun"
    "t_id\030\002 \001(\r\022\027\n\017expiration_time\030\003 \001(\007\022N\n\004t"
    "ype\030\004 \001(\0162$.CMsgGCNotification.Notificat"
    "ionType:\032NOTIFICATION_CUSTOM_STRING\022\033\n\023n"
    "otification_string\030\005 \001(\t\"\370\001\n\020Notificatio"
    "nType\022\'\n#NOTIFICATION_REPORTED_PLAYER_BA"
    "NNED\020\000\022\036\n\032NOTIFICATION_CUSTOM_STRING\020\001\0220"
    "\n,NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_R"
    "EPORTS\020\002\022+\n\'NOTIFICATION_REPORTED_PLAYER"
    "_WAS_BANNED\020\003\022 \n\034NOTIFICATION_SUPPORT_ME"
    "SSAGE\020\004\022\032\n\026NOTIFICATION_NUM_TYPES\020\005\"E\n\027C"
    "MsgGCNotificationQueue\022*\n\rnotifications\030"
    "\001 \003(\0132\023.CMsgGCNotification\"J\n\033CMsgNotifi"
    "cationAcknowledge\022\022\n\naccount_id\030\001 \001(\r\022\027\n"
    "\017notification_id\030\002 \001(\004\"\"\n CMsgNotificati"
    "onAcknowledgeReply\"\375\007\n\023CMsgGC_Match_Resu"
    "lt\022\020\n\010match_id\030\001 \001(\004\022\023\n\013match_group\030\002 \001("
    "\005\022<\n\006status\030\003 \001(\0162\033.CMsgGC_Match_Result."
    "Status:\017MATCH_SUCCEEDED\022\020\n\010duration\030\004 \001("
    "\r\022\021\n\tred_score\030\005 \001(\r\022\022\n\nblue_score\030\006 \001(\r"
    "\022\024\n\014winning_team\030\007 \001(\r\022\021\n\tmap_index\030\010 \001("
    "\r\022\024\n\tgame_type\030\t \001(\r:\0010\022,\n\007players\030\n \003(\013"
    "2\033.CMsgGC_Match_Result.Player\022\022\n\nwin_rea"
    "son\030\r \001(\r\022\r\n\005flags\030\016 \001(\r\022\014\n\004bots\030\020 \001(\r\032\360"
    "\003\n\006Player\022\020\n\010steam_id\030\001 \001(\006\022\031\n\021original_"
    "party_id\030\002 \001(\004\022\014\n\004team\030\003 \001(\r\022\r\n\005score\030\004 "
    "\001(\r\022\014\n\004ping\030\005 \001(\r\022\r\n\005flags\030\006 \001(\r\022\014\n\004rank"
    "\030\t \001(\r\022\026\n\016classes_played\030\n \001(\r\022\r\n\005kills\030"
    "\013 \001(\r\022\016\n\006deaths\030\014 \001(\r\022\016\n\006damage\030\r \001(\r\022\017\n"
    "\007healing\030\016 \001(\r\022\017\n\007support\030\017 \001(\r\022\023\n\013score"
    "_medal\030\020 \001(\r\022\023\n\013kills_medal\030\021 \001(\r\022\024\n\014dam"
    "age_medal\030\022 \001(\r\022\025\n\rhealing_medal\030\023 \001(\r\022\025"
    "\n\rsupport_medal\030\024 \001(\r\022%\n\014xp_breakdown\030\025 "
    "\003(\0132\017.CMsgTFXPSource\022\022\n\nleave_time\030\026 \001(\r"
    "\022I\n\014leave_reason\030\027 \001(\0162\023.TFMatchLeaveRea"
    "son:\036TFMatchLeaveReason_UNSPECIFIED\022\024\n\014c"
    "onnect_time\030\030 \001(\r\"\266\001\n\006Status\022\023\n\017MATCH_SU"
    "CCEEDED\020\000\022\023\n\017MATCH_FAILED_GC\020\001\022\030\n\024MATCH_"
    "FAILED_TRUSTED\020\002\022\030\n\024MATCH_FAILED_ABANDON"
    "\020\003\022\030\n\024MATCH_FAILED_UNKNOWN\020\005\022\030\n\024MATCH_FA"
    "ILED_TIMEOUT\020\006\022\032\n\026MATCH_FINISHED_ABANDON"
    "\020\007\"\035\n\033CMsgGC_Match_ResultResponse\";\n\031CEc"
    "onItemPreviewDataBlock\022\036\n\010econitem\030\001 \001(\013"
    "2\014.CSOEconItem\"q\n+CMsgGC_Client2GCEconPr"
    "eviewDataBlockRequest\022\017\n\007param_s\030\001 \001(\004\022\017"
    "\n\007param_a\030\002 \001(\004\022\017\n\007param_d\030\003 \001(\004\022\017\n\007para"
    "m_m\030\004 \001(\004\"\\\n,CMsgGC_Client2GCEconPreview"
    "DataBlockResponse\022,\n\010iteminfo\030\001 \001(\0132\032.CE"
    "conItemPreviewDataBlock\"\222\004\n\026CSOTFLadderP"
    "layerStats\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013match_"
    "group\030\002 \001(\005\022\021\n\tseason_id\030\003 \001(\r\022\r\n\005games\030"
    "\t \001(\r\022\r\n\005score\030\n \001(\r\022\r\n\005kills\030\013 \001(\r\022\016\n\006d"
    "eaths\030\014 \001(\r\022\016\n\006damage\030\r \001(\r\022\017\n\007healing\030\016"
    " \001(\r\022\017\n\007support\030\017 \001(\r\022\024\n\014score_bronze\030\020 "
    "\001(\r\022\024\n\014score_silver\030\021 \001(\r\022\022\n\nscore_gold\030"
    "\022 \001(\r\022\024\n\014kills_bronze\030\023 \001(\r\022\024\n\014kills_sil"
    "ver\030\024 \001(\r\022\022\n\nkills_gold\030\025 \001(\r\022\025\n\rdamage_"
    "bronze\030\026 \001(\r\022\025\n\rdamage_silver\030\027 \001(\r\022\023\n\013d"
    "amage_gold\030\030 \001(\r\022\026\n\016healing_bronze\030\031 \001(\r"
    "\022\026\n\016healing_silver\030\032 \001(\r\022\024\n\014healing_gold"
    "\030\033 \001(\r\022\026\n\016support_bronze\030\034 \001(\r\022\026\n\016suppor"
    "t_silver\030\035 \001(\r\022\024\n\014support_gold\030\036 \001(\r\"\205\001\n"
    "\017CSOTFRatingData\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013"
    "rating_type\030\002 \001(\005\022\026\n\016rating_primary\030\003 \001("
    "\r\022\030\n\020rating_secondary\030\004 \001(\r\022\027\n\017rating_te"
    "rtiary\030\005 \001(\r\"G\n\036CMsgGC_TFVoteKickPlayerR"
    "equest\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttarget_id\030"
    "\002 \001(\004\"I\n$CMsgGC_VoteKickPlayerRequestRes"
    "ponse\022\017\n\007allowed\030\001 \001(\010\022\020\n\010cooldown\030\002 \001(\r"
    "\"$\n\"CMsgGC_DailyCompetitiveStatsRollup\"\202"
    "\003\n+CMsgGC_DailyCompetitiveStatsRollup_Re"
    "sponse\022N\n\010rankdata\030\001 \003(\0132<.CMsgGC_DailyC"
    "ompetitiveStatsRollup_Response.RankBucke"
    "tEntry\032\202\002\n\017RankBucketEntry\022\014\n\004rank\030\001 \001(\r"
    "\022\017\n\007records\030\002 \001(\r\022\021\n\tavg_score\030\003 \001(\r\022\023\n\013"
    "stdev_score\030\004 \001(\r\022\021\n\tavg_kills\030\005 \001(\r\022\023\n\013"
    "stdev_kills\030\006 \001(\r\022\022\n\navg_damage\030\007 \001(\r\022\024\n"
    "\014stdev_damage\030\010 \001(\r\022\023\n\013avg_healing\030\t \001(\r"
    "\022\025\n\rstdev_healing\030\n \001(\r\022\023\n\013avg_support\030\013"
    " \001(\r\022\025\n\rstdev_support\030\014 \001(\r\"\371\001\n\023CMsgGC_R"
    "eportPlayer\022\031\n\021account_id_target\030\001 \001(\r\022="
    "\n\006reason\030\002 \001(\0162\034.CMsgGC_ReportPlayer.ERe"
    "ason:\017kReason_INVALID\"\207\001\n\007EReason\022\023\n\017kRe"
    "ason_INVALID\020\000\022\024\n\020kReason_CHEATING\020\001\022\020\n\014"
    "kReason_IDLE\020\002\022\026\n\022kReason_HARASSMENT\020\003\022\024"
    "\n\020kReason_GRIEFING\020\004\022\021\n\rkReason_COUNT\020\005\""
    "\246\004\n\033CSOTFMatchResultPlayerStats\022\020\n\010match"
    "_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\023\n\013match_g"
    "roup\030\003 \001(\005\022\017\n\007endtime\030\004 \001(\r\022\021\n\tseason_id"
    "\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\022\031\n\021original_party"
    "_id\030\007 \001(\r\022\014\n\004team\030\010 \001(\r\022\r\n\005score\030\t \001(\r\022\014"
    "\n\004ping\030\n \001(\r\022\r\n\005flags\030\013 \001(\r\022\026\n\016display_r"
    "ating\030\014 \001(\r\022\035\n\025display_rating_change\030\r \001"
    "(\005\022\014\n\004rank\030\016 \001(\r\022\026\n\016classes_played\030\017 \001(\r"
    "\022\r\n\005kills\030\020 \001(\r\022\016\n\006deaths\030\021 \001(\r\022\016\n\006damag"
    "e\030\022 \001(\r\022\017\n\007healing\030\023 \001(\r\022\017\n\007support\030\024 \001("
    "\r\022\023\n\013score_medal\030\025 \001(\r\022\023\n\013kills_medal\030\026 "
    "\001(\r\022\024\n\014damage_medal\030\027 \001(\r\022\025\n\rhealing_med"
    "al\030\030 \001(\r\022\025\n\rsupport_medal\030\031 \001(\r\022\021\n\tmap_i"
    "ndex\030\032 \001(\r\022\024\n\014winning_team\030\033 \001(\r\"\036\n\034CMsg"
    "GCRequestMatchMakerStats\"@\n\032CMsgGCDataCe"
    "nterPopulation\022\014\n\004name\030\001 \001(\t\022\024\n\014health_r"
    "atio\030\002 \001(\002\"c\n$CMsgGCMatchGroupDataCenter"
    "Population\022;\n\026data_center_population\030\001 \003"
    "(\0132\033.CMsgGCDataCenterPopulation\"\204\001\n\035CMsg"
    "GCMatchMakerStatsResponse\022\021\n\tmap_count\030\001"
    " \003(\r\022P\n!matchgroup_data_center_populatio"
    "n\030\002 \003(\0132%.CMsgGCMatchGroupDataCenterPopu"
    "lation\"\030\n\026CMsgGCMatchHistoryLoad\"\214\002\n\033CMs"
    "gGCDataCenterPing_Update\0228\n\010pingdata\030\001 \003"
    "(\0132&.CMsgGCDataCenterPing_Update.PingEnt"
    "ry\032i\n\tPingEntry\022\014\n\004name\030\001 \001(\t\022\014\n\004ping\030\002 "
    "\001(\r\022@\n\013ping_status\030\003 \001(\0162#.CMsgGCDataCen"
    "terPing_Update.Status:\006Normal\"H\n\006Status\022"
    "\013\n\007Invalid\020\000\022\n\n\006Normal\020\001\022\017\n\013Unreachable\020"
    "\002\022\024\n\020FallbackToDCPing\020\003\".\n\032CMsgGC_KickPl"
    "ayerFromLobby\022\020\n\010targetID\030\001 \001(\004\"k\n\023CMsgG"
    "CSurveyRequest\022B\n\rquestion_type\030\001 \001(\0162\023."
    "SurveyQuestionType:\026QUESTION_MATCH_QUALI"
    "TY\022\020\n\010match_id\030\002 \001(\004\"~\n\024CMsgGCSurveyResp"
    "onse\022B\n\rquestion_type\030\001 \001(\0162\023.SurveyQues"
    "tionType:\026QUESTION_MATCH_QUALITY\022\020\n\010matc"
    "h_id\030\002 \001(\004\022\020\n\010response\030\003 \001(\005\"\361\001\n\017CSOQues"
    "tMapNode\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010defindex"
    "\030\003 \001(\r\022\017\n\007node_id\030\004 \001(\r\022\034\n\rstar_0_earned"
    "\030\006 \001(\010:\005false\022\034\n\rstar_1_earned\030\007 \001(\010:\005fa"
    "lse\022\034\n\rstar_2_earned\030\010 \001(\010:\005false\022\033\n\014loo"
    "t_claimed\030\t \001(\010:\005false\022\035\n\022selected_quest"
    "_def\030\n \001(\r:\0010\022\021\n\tmap_cycle\030\013 \001(\r\"\304\001\n\010CSO"
    "Quest\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010quest_id\030\002 "
    "\001(\004\022\020\n\010defindex\030\003 \001(\r\022\025\n\006active\030\004 \001(\010:\005f"
    "alse\022\020\n\010points_0\030\005 \001(\r\022\020\n\010points_1\030\006 \001(\r"
    "\022\020\n\010points_2\030\007 \001(\r\022 \n\030quest_map_node_sou"
    "rce_id\030\010 \001(\r\022\021\n\tmap_cycle\030\t \001(\r\"x\n\031CSOQu"
    "estMapRewardPurchase\022\022\n\naccount_id\030\001 \001(\r"
    "\022\020\n\010defindex\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\021\n\tmap"
    "_cycle\030\004 \001(\r\022\023\n\013purchase_id\030\005 \001(\r\"\'\n\023CMs"
    "gGCQuestIdentify\022\020\n\010quest_id\030\001 \001(\004\"-\n\022CM"
    "sgGCQuestDevGive\022\027\n\017quest_def_index\030\001 \001("
    "\r\".\n\025CMsgGCQuestNodeTurnIn\022\025\n\rnode_defin"
    "dex\030\001 \001(\r\"I\n\030CMsgGCQuestMapUnlockNode\022\025\n"
    "\rnode_defindex\030\001 \001(\r\022\026\n\016quest_defindex\030\002"
    " \001(\r\"`\n\035CMsgGCNewMatchForLobbyRequest\022\030\n"
    "\020current_match_id\030\001 \001(\004\022\023\n\013next_map_id\030\002"
    " \001(\r\022\020\n\010lobby_id\030\003 \001(\004\"1\n\036CMsgGCNewMatch"
    "ForLobbyResponse\022\017\n\007success\030\001 \001(\010\"\325\001\n#CM"
    "sgGCChangeMatchPlayerTeamsRequest\022\020\n\010mat"
    "ch_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001(\004\022;\n\006member\030"
    "\003 \003(\0132+.CMsgGCChangeMatchPlayerTeamsRequ"
    "est.Member\032M\n\006Member\022\021\n\tmember_id\030\001 \001(\004\022"
    "0\n\010new_team\030\002 \001(\0162\013.TF_GC_TEAM:\021TF_GC_TE"
    "AM_NOTEAM\"7\n$CMsgGCChangeMatchPlayerTeam"
    "sResponse\022\017\n\007success\030\001 \001(\010\"B\n\031CMsgGCQues"
    "tComplete_Debug\022\020\n\010quest_id\030\001 \001(\004\022\023\n\013poi"
    "nts_type\030\002 \001(\r\"t\n\024CMsgGCQuestMap_Debug\022\027"
    "\n\017reset_operation\030\001 \001(\r\022\023\n\013give_credit\030\002"
    " \001(\r\022.\n\013unlock_node\030\003 \001(\0132\031.CMsgGCQuestM"
    "apUnlockNode\";\n\034CMsgGCQuestMapPurchaseRe"
    "ward\022\033\n\023store_item_defindex\030\001 \001(\r\"-\n\023CMs"
    "gGCQuestResponse\022\026\n\007success\030\001 \001(\010:\005false"
    "\"3\n\"CMsgGCSetDisablePartyQuestProgress\022\r"
    "\n\005state\030\001 \001(\010\"\301\001\n\027CMsgQuestProgressRepor"
    "t\022\020\n\010quest_id\030\001 \001(\004\022\025\n\rstar_0_earned\030\002 \001"
    "(\010\022\025\n\rstar_1_earned\030\003 \001(\010\022\025\n\rstar_2_earn"
    "ed\030\004 \001(\010\022\024\n\014items_earned\030\005 \003(\004\022\035\n\025reward"
    "_credits_earned\030\006 \001(\r\022\032\n\022contract_comple"
    "ted\030\007 \001(\010\"A\n\023CMsgConsumePaintkit\022\021\n\tsour"
    "ce_id\030\001 \001(\006\022\027\n\017target_defindex\030\002 \001(\r\"U\n\023"
    "CMsgPainkitDevGrant\022\031\n\021paintkit_defindex"
    "\030\001 \001(\r\022\014\n\004wear\030\002 \001(\002\022\025\n\ritem_defindex\030\003 "
    "\001(\r\"\205\001\n\023GCQuestStrangeEvent\022\030\n\020owner_acc"
    "ount_id\030\001 \001(\r\022\031\n\021scorer_account_id\030\002 \001(\r"
    "\022\020\n\010quest_id\030\003 \001(\004\022\030\n\020strange_event_id\030\004"
    " \001(\r\022\r\n\005score\030\005 \001(\r*\3073\n\010ETFGCMsg\022\032\n\025k_EM"
    "sgGCReportWarKill\020\211\'\022\036\n\031k_EMsgGCVoteKick"
    "BanPlayer\020\232\'\022$\n\037k_EMsgGCVoteKickBanPlaye"
    "rResult\020\233\'\022\"\n\035k_EMsgGCKickPlayer_DEPRECA"
    "TED\020\234\'\022\'\n\"k_EMsgGCStartedTraining_DEPREC"
    "ATED\020\235\'\022.\n)k_EMsgGCFreeTrial_ChooseMostH"
    "elpfulFriend\020\236\'\022\036\n\031k_EMsgGCRequestTF2Fri"
    "ends\020\237\'\022&\n!k_EMsgGCRequestTF2FriendsResp"
    "onse\020\240\'\022&\n!k_EMsgGCReplay_SubmitContestE"
    "ntry\020\242\'\022.\n)k_EMsgGCReplay_SubmitContestE"
    "ntryResponse\020\243\'\022\032\n\025k_EMsgGCSaxxy_Awarded"
    "\020\245\'\022\'\n\"k_EMsgGCFreeTrial_ThankedBySomeon"
    "e\020\244\'\022%\n k_EMsgGCFreeTrial_ThankedSomeone"
    "\020\246\'\022)\n$k_EMsgGCFreeTrial_ConvertedToPrem"
    "ium\020\247\'\0228\n3k_EMsgGCMeetThePyroSilliness_B"
    "ananaCraft_DEPRECATED\020\250\'\0226\n1k_EMsgGCMVMA"
    "RG_HighFiveSuccessResponse_DEPRECATED\020\251\'"
    "\022/\n*k_EMsgGCMVMARG_HighFiveOnClient_DEPR"
    "ECATED\020\252\'\022\"\n\035k_EMsgGCCoaching_AddToCoach"
    "es\020\320(\022*\n%k_EMsgGCCoaching_AddToCoachesRe"
    "sponse\020\321(\022\'\n\"k_EMsgGCCoaching_RemoveFrom"
    "Coaches\020\322(\022/\n*k_EMsgGCCoaching_RemoveFro"
    "mCoachesResponse\020\323(\022\037\n\032k_EMsgGCCoaching_"
    "FindCoach\020\324(\022\'\n\"k_EMsgGCCoaching_FindCoa"
    "chResponse\020\325(\022\036\n\031k_EMsgGCCoaching_AskCoa"
    "ch\020\326(\022&\n!k_EMsgGCCoaching_AskCoachRespon"
    "se\020\327(\022#\n\036k_EMsgGCCoaching_CoachJoinGame\020"
    "\330(\022\"\n\035k_EMsgGCCoaching_CoachJoining\020\331(\022!"
    "\n\034k_EMsgGCCoaching_CoachJoined\020\332(\022&\n!k_E"
    "MsgGCCoaching_LikeCurrentCoach\020\333(\022(\n#k_E"
    "MsgGCCoaching_RemoveCurrentCoach\020\334(\022\'\n\"k"
    "_EMsgGCCoaching_AlreadyRatedCoach\020\335(\022\032\n\025"
    "k_EMsgGC_Duel_Request\020\374*\022\033\n\026k_EMsgGC_Due"
    "l_Response\020\375*\022\032\n\025k_EMsgGC_Duel_Results\020\376"
    "*\022\031\n\024k_EMsgGC_Duel_Status\020\377*\022/\n*k_EMsgGC"
    "_Halloween_ReservedItem_DEPRECATED\020\340+\022,\n"
    "\'k_EMsgGC_Halloween_GrantItem_DEPRECATED"
    "\020\341+\0224\n/k_EMsgGC_Halloween_GrantItemRespo"
    "nse_DEPRECATED\020\344+\0226\n1k_EMsgGC_Halloween_"
    "Cheat_QueryResponse_DEPRECATED\020\345+\022.\n)k_E"
    "MsgGC_Halloween_ItemClaimed_DEPRECATED\020\346"
    "+\022$\n\037k_EMsgGC_Halloween_ReservedItem\020\347+\022"
    "!\n\034k_EMsgGC_Halloween_GrantItem\020\350+\022)\n$k_"
    "EMsgGC_Halloween_GrantItemResponse\020\351+\0228\n"
    "3k_EMsgGC_Halloween_Cheat_QueryResponse_"
    "DEPRECATED_2\020\352+\0220\n+k_EMsgGC_Halloween_It"
    "emClaimed_DEPRECATED_2\020\353+\022\'\n\"k_EMsgGC_Ha"
    "lloween_ServerBossEvent\020\354+\022$\n\037k_EMsgGC_H"
    "alloween_Merasmus2012\020\355+\022/\n*k_EMsgGC_Hal"
    "loween_UpdateMerasmusLootLevel\020\356+\022\"\n\035k_E"
    "MsgGC_GameServer_LevelInfo\020\304,\022&\n!k_EMsgG"
    "C_GameServer_AuthChallenge\020\305,\022.\n)k_EMsgG"
    "C_GameServer_AuthChallengeResponse\020\306,\022\'\n"
    "\"k_EMsgGC_GameServer_CreateIdentity\020\307,\022/"
    "\n*k_EMsgGC_GameServer_CreateIdentityResp"
    "onse\020\310,\022\035\n\030k_EMsgGC_GameServer_List\020\311,\022%"
    "\n k_EMsgGC_GameServer_ListResponse\020\312,\022#\n"
    "\036k_EMsgGC_GameServer_AuthResult\020\313,\022&\n!k_"
    "EMsgGC_GameServer_ResetIdentity\020\314,\022.\n)k_"
    "EMsgGC_GameServer_ResetIdentityResponse\020"
    "\315,\022.\n)k_EMsgGC_Client_UseServerModificat"
    "ionItem\020\316,\0227\n2k_EMsgGC_Client_UseServerM"
    "odificationItem_Response\020\317,\0222\n-k_EMsgGC_"
    "GameServer_UseServerModificationItem\020\320,\022"
    ";\n6k_EMsgGC_GameServer_UseServerModifica"
    "tionItem_Response\020\321,\0226\n1k_EMsgGC_GameSer"
    "ver_ServerModificationItemExpired\020\322,\022.\n)"
    "k_EMsgGC_GameServer_ModificationItemStat"
    "e\020\323,\022\"\n\035k_EMsgGC_GameServer_AckPolicy\020\324,"
    "\022*\n%k_EMsgGC_GameServer_AckPolicyRespons"
    "e\020\325,\022\035\n\030k_EMsgGC_QP_ScoreServers\020\250-\022%\n k"
    "_EMsgGC_QP_ScoreServersResponse\020\251-\022\036\n\031k_"
    "EMsgGC_QP_PlayerJoining\020\252-\0224\n/k_EMsgGC_P"
    "ickupItemEligibility_Query_DEPRECATED\020\360."
    "\0226\n1k_EMsgGC_PickupItemEligibility_Query"
    "_DEPRECATED_2\020\361.\0224\n/k_EMsgGC_IncrementKi"
    "llCountAttribute_DEPRECATED\020\324/\0223\n.k_EMsg"
    "GC_IncrementKillCountResponse_DEPRECATED"
    "\020\325/\022\037\n\032k_EMsgGCAbandonCurrentGame\020\3330\022\035\n\030"
    "k_EMsgForceSOCacheResend\020\3350\022#\n\036k_EMsgGCR"
    "equestChatChannelList\020\3640\022+\n&k_EMsgGCRequ"
    "estChatChannelListResponse\020\3650\022\024\n\017k_EMsgG"
    "CReadyUp\020\3760\022\'\n\"k_EMsgGCKickedFromMatchma"
    "kingQueue\020\3770\022\033\n\026k_EMsgGCLeaverDetected\020\200"
    "1\022#\n\036k_EMsgGCLeaverDetectedResponse\020\2171\022\034"
    "\n\027k_EMsgGCExitMatchmaking\020\2211\022 \n\033k_EMsgGC"
    "MatchmakingProgress\020\2251\022\033\n\026k_EMsgGCMvMVic"
    "toryInfo\020\2261\022(\n#k_EMsgGCGameServerMatchma"
    "kingStatus\020\2271\022\027\n\022k_EMsgGCMvMVictory\020\2311\022\034"
    "\n\027k_EMsgGCMvMVictoryReply\020\2321\022#\n\036k_EMsgGC"
    "GameServerKickingLobby\020\2331\022+\n&k_EMsgGCLea"
    "veGameAndPrepareToJoinParty\020\2341\022!\n\034k_EMsg"
    "GC_UpdatePeriodicEvent\020\2002\022.\n)k_EMsgGC_Du"
    "ckLeaderboard_IndividualUpdate\020\2012\0222\n-k_E"
    "MsgGC_Client2GCEconPreviewDataBlockReque"
    "st\020\2022\0223\n.k_EMsgGC_Client2GCEconPreviewDa"
    "taBlockResponse\020\2032\022)\n$k_EMsgGC_ClientVer"
    "ificationChallenge\020\3442\0221\n,k_EMsgGC_Client"
    "VerificationChallengeResponse\020\3452\022/\n*k_EM"
    "sgGC_ClientVerificationVerboseResponse\020\346"
    "2\022(\n#k_EMsgGC_ClientSetItemSlotAttribute"
    "\020\3472\022\"\n\035k_EMsgGC_War_IndividualUpdate\020\3512\022"
    "\031\n\024k_EMsgGC_War_JoinWar\020\3522\022$\n\037k_EMsgGC_W"
    "ar_RequestGlobalStats\020\3532\022%\n k_EMsgGC_War"
    "_GlobalStatsResponse\020\3542\022*\n%k_EMsgGC_Worl"
    "dItemPlacement_Attribute\020\3562\022\'\n\"k_EMsgGC_"
    "WorldItemPlacement_Update\020\3572\022\032\n\025k_EMsgGC"
    "_Match_Result\020\3602\022\"\n\035k_EMsgGCVoteKickPlay"
    "erRequest\020\3612\022*\n%k_EMsgGCVoteKickPlayerRe"
    "questResponse\020\3622\022)\n$k_EMsgGC_DailyCompet"
    "itiveStatsRollup\020\3642\0222\n-k_EMsgGC_DailyCom"
    "petitiveStatsRollup_Response\020\3652\022\"\n\035k_EMs"
    "gGC_WorldStatusBroadcast\020\3662\022\032\n\025k_EMsgGC_"
    "ReportPlayer\020\3672\022\"\n\035k_EMsgGC_Match_Result"
    "Response\020\3702\022+\n&k_EMsgGCGameServerKicking"
    "LobbyResponse\020\3712\022\034\n\027k_EMsgGCPlayerLeftMa"
    "tch\020\3722\022$\n\037k_EMsgGCPlayerLeftMatchRespons"
    "e\020\3732\022#\n\036k_EMsgGCRequestMatchMakerStats\020\374"
    "2\022$\n\037k_EMsgGCMatchMakerStatsResponse\020\3752\022"
    "\035\n\030k_EMsgGCMatchHistoryLoad\020\3762\022\033\n\026k_EMsg"
    "GC_AcknowledgeXP\020\3772\022\"\n\035k_EMsgGCDataCente"
    "rPing_Update\020\2003\022%\n k_EMsgGC_Notification"
    "Acknowledge\020\2013\022*\n%k_EMsgGC_NotificationA"
    "cknowledgeReply\020\2023\022!\n\034k_EMsgGC_KickPlaye"
    "rFromLobby\020\2033\022#\n\036k_EMsgGC_SurveyQuestion"
    "Request\020\2063\022$\n\037k_EMsgGC_SurveyQuestionRes"
    "ponse\020\2073\022\032\n\025k_EMsgGC_TFClientInit\020\2103\022%\n "
    "k_EMsgGC_NewMatchForLobbyRequest\020\2113\022&\n!k"
    "_EMsgGC_NewMatchForLobbyResponse\020\2123\022+\n&k"
    "_EMsgGC_ChangeMatchPlayerTeamsRequest\020\2133"
    "\022,\n\'k_EMsgGC_ChangeMatchPlayerTeamsRespo"
    "nse\020\2143\022\033\n\026k_EMsgGC_QuestIdentify\020\2153\022\032\n\025k"
    "_EMsgGC_QuestDevGive\020\2163\022 \n\033k_EMsgGCQuest"
    "Complete_Debug\020\2203\022\033\n\026k_EMsgGC_QuestMapDe"
    "bug\020\2213\022 \n\033k_EMsgGC_QuestMapUnlockNode\020\2233"
    "\022$\n\037k_EMsgGC_QuestMapPurchaseReward\020\2253\022*"
    "\n%k_EMsgGC_SetDisablePartyQuestProgress\020"
    "\2263\022.\n)k_EMsgGCPlayerVoteKickedAfterLeavi"
    "ngMatch\020\2273\0226\n1k_EMsgGCPlayerVoteKickedAf"
    "terLeavingMatchResponse\020\2303\022 \n\033k_EMsgGCQu"
    "estProgressReport\020\2313\022\035\n\030k_EMsgGCParty_Se"
    "tOptions\020\2323\022%\n k_EMsgGCParty_SetOptionsR"
    "esponse\020\2333\022 \n\033k_EMsgGCParty_QueueForMatc"
    "h\020\2343\022(\n#k_EMsgGCParty_QueueForMatchRespo"
    "nse\020\2353\022\"\n\035k_EMsgGCParty_RemoveFromQueue\020"
    "\2363\022*\n%k_EMsgGCParty_RemoveFromQueueRespo"
    "nse\020\2373\022\037\n\032k_EMsgGCParty_InvitePlayer\020\2403\022"
    "$\n\037k_EMsgGCParty_RequestJoinPlayer\020\2413\022\033\n"
    "\026k_EMsgGCParty_SendChat\020\2423\022\032\n\025k_EMsgGCPa"
    "rty_ChatMsg\020\2433\022\034\n\027k_EMsgGCQuestNodeTurnI"
    "n\020\2443\022\034\n\027k_EMsgGCConsumePaintKit\020\2453\022\036\n\031k_"
    "EMsgGC_Painkit_DevGrant\020\2463\022\"\n\035k_EMsgGCPa"
    "rty_QueueForStandby\020\2473\022*\n%k_EMsgGCParty_"
    "QueueForStandbyResponse\020\2503\022)\n$k_EMsgGCPa"
    "rty_RemoveFromStandbyQueue\020\2513\0221\n,k_EMsgG"
    "CParty_RemoveFromStandbyQueueResponse\020\2523"
    "\022%\n k_EMsgGCParty_ClearPendingPlayer\020\2533\022"
    "-\n(k_EMsgGCParty_ClearPendingPlayerRespo"
    "nse\020\2543\022)\n$k_EMsgGCParty_ClearOtherPartyR"
    "equest\020\2553\0221\n,k_EMsgGCParty_ClearOtherPar"
    "tyRequestResponse\020\2563\022\"\n\035k_EMsgGCParty_Pr"
    "omoteToLeader\020\2573\022\035\n\030k_EMsgGCParty_KickMe"
    "mber\020\2603\022\036\n\031k_EMsgGCQuestStrangeEvent\020\2613\022"
    "\037\n\032k_EMsgGC_AcceptLobbyInvite\020\2623\022$\n\037k_EM"
    "sgGC_AcceptLobbyInviteReply\020\2633\022\035\n\030k_EMsg"
    "GCDev_GrantWarKill\020\221N*H\n\033EServerModifica"
    "tionItemType\022)\n%kGameServerModificationI"
    "tem_Halloween\020\001*\233\002\n\023ETFSyncedMMMenuStep\022"
    "*\n\035k_eTFSyncedMMMenuStep_Invalid\020\377\377\377\377\377\377\377"
    "\377\377\001\022\036\n\032k_eTFSyncedMMMenuStep_None\020\000\022*\n&k"
    "_eTFSyncedMMMenuStep_Configuring_Mode\020\001\022"
    ",\n(k_eTFSyncedMMMenuStep_MvM_Selecting_M"
    "ode\020\002\022,\n(k_eTFSyncedMMMenuStep_MvM_Selec"
    "ting_Tour\020\003\0220\n,k_eTFSyncedMMMenuStep_MvM"
    "_Selecting_Missions\020\004*\215\006\n\rETFMatchGroup\022"
    "$\n\027k_eTFMatchGroup_Invalid\020\377\377\377\377\377\377\377\377\377\001\022 \n"
    "\034k_eTFMatchGroup_MvM_Practice\020\000\022\036\n\032k_eTF"
    "MatchGroup_MvM_MannUp\020\001\022\031\n\025k_eTFMatchGro"
    "up_First\020\000\022\037\n\033k_eTFMatchGroup_MvM_Defaul"
    "t\020\000\022\035\n\031k_eTFMatchGroup_MvM_First\020\000\022\034\n\030k_"
    "eTFMatchGroup_MvM_Last\020\001\022\036\n\032k_eTFMatchGr"
    "oup_Ladder_6v6\020\002\022\036\n\032k_eTFMatchGroup_Ladd"
    "er_9v9\020\003\022 \n\034k_eTFMatchGroup_Ladder_12v12"
    "\020\004\022\"\n\036k_eTFMatchGroup_Ladder_Default\020\002\022 "
    "\n\034k_eTFMatchGroup_Ladder_First\020\002\022\037\n\033k_eT"
    "FMatchGroup_Ladder_Last\020\004\022\036\n\032k_eTFMatchG"
    "roup_Casual_6v6\020\005\022\036\n\032k_eTFMatchGroup_Cas"
    "ual_9v9\020\006\022 \n\034k_eTFMatchGroup_Casual_12v1"
    "2\020\007\022\"\n\036k_eTFMatchGroup_Casual_Default\020\007\022"
    " \n\034k_eTFMatchGroup_Casual_First\020\005\022\037\n\033k_e"
    "TFMatchGroup_Casual_Last\020\007\022%\n!k_eTFMatch"
    "Group_Event_Placeholder\020\010\022!\n\035k_eTFMatchG"
    "roup_Event_Default\020\010\022\037\n\033k_eTFMatchGroup_"
    "Event_First\020\010\022\036\n\032k_eTFMatchGroup_Event_L"
    "ast\020\010*\301\002\n\020ETFPartyChatType\022\036\n\032k_eTFParty"
    "ChatType_Invalid\020\000\022!\n\035k_eTFPartyChatType"
    "_MemberChat\020\001\022,\n\'k_eTFPartyChatType_Synt"
    "hetic_MemberJoin\020\350\007\022-\n(k_eTFPartyChatTyp"
    "e_Synthetic_MemberLeave\020\351\007\022,\n\'k_eTFParty"
    "ChatType_Synthetic_SendFailed\020\352\007\022.\n)k_eT"
    "FPartyChatType_Synthetic_MemberOnline\020\353\007"
    "\022/\n*k_eTFPartyChatType_Synthetic_MemberO"
    "ffline\020\354\007*\201\002\n\017TF_GC_GameState\022\036\n\032TF_GC_G"
    "AMESTATE_STATE_INIT\020\000\022,\n(TF_GC_GAMESTATE"
    "_WAIT_FOR_PLAYERS_TO_LOAD\020\001\022!\n\035TF_GC_GAM"
    "ESTATE_STRATEGY_TIME\020\003\022$\n TF_GC_GAMESTAT"
    "E_GAME_IN_PROGRESS\020\005\022\035\n\031TF_GC_GAMESTATE_"
    "POST_GAME\020\006\022\036\n\032TF_GC_GAMESTATE_DISCONNEC"
    "T\020\007\022\030\n\024TF_GC_GAMESTATE_LAST\020\010*\250\001\n\nTF_GC_"
    "TEAM\022\030\n\024TF_GC_TEAM_DEFENDERS\020\000\022\027\n\023TF_GC_"
    "TEAM_INVADERS\020\001\022\032\n\026TF_GC_TEAM_BROADCASTE"
    "R\020\002\022\030\n\024TF_GC_TEAM_SPECTATOR\020\003\022\032\n\026TF_GC_T"
    "EAM_PLAYER_POOL\020\004\022\025\n\021TF_GC_TEAM_NOTEAM\020\005"
    "*\372\001\n\022TFMatchLeaveReason\022\"\n\036TFMatchLeaveR"
    "eason_UNSPECIFIED\020\000\022 \n\034TFMatchLeaveReaso"
    "n_VOTE_KICK\020\001\022\033\n\027TFMatchLeaveReason_IDLE"
    "\020\002\022!\n\035TFMatchLeaveReason_ADMIN_KICK\020\003\022\033\n"
    "\027TFMatchLeaveReason_AWOL\020\004\022\036\n\032TFMatchLea"
    "veReason_NO_SHOW\020\005\022!\n\035TFMatchLeaveReason"
    "_GC_REMOVED\020\006*\363\001\n\026ServerMatchmakingState"
    "\022\"\n\036ServerMatchmakingState_INVALID\020\000\022,\n("
    "ServerMatchmakingState_NOT_PARTICIPATING"
    "\020\001\022 \n\034ServerMatchmakingState_EMPTY\020\002\022<\n8"
    "ServerMatchmakingState_ACTIVE_MATCH_REQU"
    "ESTING_LATE_JOIN\020\003\022\'\n#ServerMatchmakingS"
    "tate_ACTIVE_MATCH\020\004*\234\001\n\022SurveyQuestionTy"
    "pe\022\032\n\026QUESTION_MATCH_QUALITY\020\000\022\030\n\024QUESTI"
    "ON_MAP_QUALITY\020\001\022\031\n\025QUESTION_COMP_INQUIR"
    "Y\020\002\022\033\n\027QUESTION_CASUAL_INQUIRY\020\003\022\030\n\024QUES"
    "TION_RANDOM_CRIT\020\004B\005H\001\200\001\000", 34545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tf_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgTFGoldenWrenchBroadcast::default_instance_ = new CMsgTFGoldenWrenchBroadcast();
  CMsgTFSaxxyBroadcast::default_instance_ = new CMsgTFSaxxyBroadcast();
  CMsgGCTFSpecificItemBroadcast::default_instance_ = new CMsgGCTFSpecificItemBroadcast();
  CMsgTFWorldStatus::default_instance_ = new CMsgTFWorldStatus();
  CSOTFDuelSummary::default_instance_ = new CSOTFDuelSummary();
  CSOTFMapContribution::default_instance_ = new CSOTFMapContribution();
  CMsgTFVoteKickBanPlayer::default_instance_ = new CMsgTFVoteKickBanPlayer();
  CMsgTFVoteKickBanPlayerResult::default_instance_ = new CMsgTFVoteKickBanPlayerResult();
  CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_ = new CMsgTFFreeTrialChooseMostHelpfulFriend();
  CMsgTFRequestTF2Friends::default_instance_ = new CMsgTFRequestTF2Friends();
  CMsgTFRequestTF2FriendsResponse::default_instance_ = new CMsgTFRequestTF2FriendsResponse();
  CSOTFPlayerInfo::default_instance_ = new CSOTFPlayerInfo();
  CMsgTFThankedBySomeone::default_instance_ = new CMsgTFThankedBySomeone();
  CMsgTFThankedSomeone::default_instance_ = new CMsgTFThankedSomeone();
  CMsgTFFreeTrialConvertedToPremium::default_instance_ = new CMsgTFFreeTrialConvertedToPremium();
  CMsgSaxxyAwarded::default_instance_ = new CMsgSaxxyAwarded();
  CMsgReplaySubmitContestEntry::default_instance_ = new CMsgReplaySubmitContestEntry();
  CMsgReplaySubmitContestEntryResponse::default_instance_ = new CMsgReplaySubmitContestEntryResponse();
  CReplayCachedContestData::default_instance_ = new CReplayCachedContestData();
  CMsgTFCoaching_AddToCoaches::default_instance_ = new CMsgTFCoaching_AddToCoaches();
  CMsgTFCoaching_RemoveFromCoaches::default_instance_ = new CMsgTFCoaching_RemoveFromCoaches();
  CMsgTFCoaching_FindCoach::default_instance_ = new CMsgTFCoaching_FindCoach();
  CMsgTFCoaching_FindCoachResponse::default_instance_ = new CMsgTFCoaching_FindCoachResponse();
  CMsgTFCoaching_AskCoach::default_instance_ = new CMsgTFCoaching_AskCoach();
  CMsgTFCoaching_AskCoachResponse::default_instance_ = new CMsgTFCoaching_AskCoachResponse();
  CMsgTFCoaching_CoachJoinGame::default_instance_ = new CMsgTFCoaching_CoachJoinGame();
  CMsgTFCoaching_CoachJoining::default_instance_ = new CMsgTFCoaching_CoachJoining();
  CMsgTFCoaching_CoachJoined::default_instance_ = new CMsgTFCoaching_CoachJoined();
  CMsgTFCoaching_LikeCurrentCoach::default_instance_ = new CMsgTFCoaching_LikeCurrentCoach();
  CMsgTFCoaching_RemoveCurrentCoach::default_instance_ = new CMsgTFCoaching_RemoveCurrentCoach();
  CMsgTFQuickplay_ScoreServers::default_instance_ = new CMsgTFQuickplay_ScoreServers();
  CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_ = new CMsgTFQuickplay_ScoreServers_ServerInfo();
  CMsgTFQuickplay_ScoreServersResponse::default_instance_ = new CMsgTFQuickplay_ScoreServersResponse();
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_ = new CMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  CMsgTFQuickplay_PlayerJoining::default_instance_ = new CMsgTFQuickplay_PlayerJoining();
  CMsgGC_GameServer_LevelInfo::default_instance_ = new CMsgGC_GameServer_LevelInfo();
  CMsgGC_GameServer_AuthChallenge::default_instance_ = new CMsgGC_GameServer_AuthChallenge();
  CMsgGC_GameServer_AuthResult::default_instance_ = new CMsgGC_GameServer_AuthResult();
  CMsgGC_GameServer_AuthChallengeResponse::default_instance_ = new CMsgGC_GameServer_AuthChallengeResponse();
  CMsgGC_GameServer_CreateIdentity::default_instance_ = new CMsgGC_GameServer_CreateIdentity();
  CMsgGC_GameServer_CreateIdentityResponse::default_instance_ = new CMsgGC_GameServer_CreateIdentityResponse();
  CMsgGC_GameServer_List::default_instance_ = new CMsgGC_GameServer_List();
  CMsgGC_GameServer_ListResponse::default_instance_ = new CMsgGC_GameServer_ListResponse();
  CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_ = new CMsgGC_GameServer_ListResponse_GameServerIdentity();
  CMsgGC_GameServer_ResetIdentity::default_instance_ = new CMsgGC_GameServer_ResetIdentity();
  CMsgGC_GameServer_ResetIdentityResponse::default_instance_ = new CMsgGC_GameServer_ResetIdentityResponse();
  CMsgGC_GameServer_AckPolicy::default_instance_ = new CMsgGC_GameServer_AckPolicy();
  CMsgGC_GameServer_AckPolicyResponse::default_instance_ = new CMsgGC_GameServer_AckPolicyResponse();
  CMsgGC_Client_UseServerModificationItem::default_instance_ = new CMsgGC_Client_UseServerModificationItem();
  CMsgGC_Client_UseServerModificationItem_Response::default_instance_ = new CMsgGC_Client_UseServerModificationItem_Response();
  CMsgGC_GameServer_UseServerModificationItem::default_instance_ = new CMsgGC_GameServer_UseServerModificationItem();
  CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_ = new CMsgGC_GameServer_UseServerModificationItem_Response();
  CMsgGC_GameServer_ServerModificationItemExpired::default_instance_ = new CMsgGC_GameServer_ServerModificationItemExpired();
  CMsgGC_GameServer_ServerModificationItem::default_instance_ = new CMsgGC_GameServer_ServerModificationItem();
  CMsgGC_Halloween_ReservedItem::default_instance_ = new CMsgGC_Halloween_ReservedItem();
  CMsgGC_Halloween_GrantItem::default_instance_ = new CMsgGC_Halloween_GrantItem();
  CMsgGC_Halloween_GrantItemResponse::default_instance_ = new CMsgGC_Halloween_GrantItemResponse();
  CMsgGC_Halloween_ItemClaimed::default_instance_ = new CMsgGC_Halloween_ItemClaimed();
  CMsgGC_PickupItemEligibility_Query::default_instance_ = new CMsgGC_PickupItemEligibility_Query();
  CMsgGC_PickupItemEligibility_QueryResponse::default_instance_ = new CMsgGC_PickupItemEligibility_QueryResponse();
  CSOTFPartyMember::default_instance_ = new CSOTFPartyMember();
  CSOTFPartyMember_Activity::default_instance_ = new CSOTFPartyMember_Activity();
  TFPendingPartyMember::default_instance_ = new TFPendingPartyMember();
  TFSyncedMMUIState::default_instance_ = new TFSyncedMMUIState();
  CTFGroupMatchCriteriaProto::default_instance_ = new CTFGroupMatchCriteriaProto();
  CTFCasualMatchCriteria::default_instance_ = new CTFCasualMatchCriteria();
  CTFPerPlayerMatchCriteriaProto::default_instance_ = new CTFPerPlayerMatchCriteriaProto();
  CTFPartyOptions::default_instance_ = new CTFPartyOptions();
  CMsgPartySetOptions::default_instance_ = new CMsgPartySetOptions();
  CMsgPartySetOptionsResponse::default_instance_ = new CMsgPartySetOptionsResponse();
  CMsgPartyQueueForMatch::default_instance_ = new CMsgPartyQueueForMatch();
  CMsgPartyQueueForMatchResponse::default_instance_ = new CMsgPartyQueueForMatchResponse();
  CMsgPartyQueueForStandby::default_instance_ = new CMsgPartyQueueForStandby();
  CMsgPartyQueueForStandbyResponse::default_instance_ = new CMsgPartyQueueForStandbyResponse();
  CMsgPartyRemoveFromQueue::default_instance_ = new CMsgPartyRemoveFromQueue();
  CMsgPartyRemoveFromQueueResponse::default_instance_ = new CMsgPartyRemoveFromQueueResponse();
  CMsgPartyRemoveFromStandbyQueue::default_instance_ = new CMsgPartyRemoveFromStandbyQueue();
  CMsgPartyRemoveFromStandbyQueueResponse::default_instance_ = new CMsgPartyRemoveFromStandbyQueueResponse();
  CMsgPartyInvitePlayer::default_instance_ = new CMsgPartyInvitePlayer();
  CMsgPartyRequestJoinPlayer::default_instance_ = new CMsgPartyRequestJoinPlayer();
  CMsgPartyClearPendingPlayer::default_instance_ = new CMsgPartyClearPendingPlayer();
  CMsgPartyClearPendingPlayerResponse::default_instance_ = new CMsgPartyClearPendingPlayerResponse();
  CMsgPartyClearOtherPartyRequest::default_instance_ = new CMsgPartyClearOtherPartyRequest();
  CMsgPartyClearOtherPartyRequestResponse::default_instance_ = new CMsgPartyClearOtherPartyRequestResponse();
  CMsgPartyPromoteToLeader::default_instance_ = new CMsgPartyPromoteToLeader();
  CMsgPartyKickMember::default_instance_ = new CMsgPartyKickMember();
  CMsgPartySendChat::default_instance_ = new CMsgPartySendChat();
  CMsgPartyChatMsg::default_instance_ = new CMsgPartyChatMsg();
  CSOTFParty::default_instance_ = new CSOTFParty();
  CSOTFParty_QueueEntry::default_instance_ = new CSOTFParty_QueueEntry();
  CSOTFPartyInvite::default_instance_ = new CSOTFPartyInvite();
  CSOTFPartyInvite_PartyMember::default_instance_ = new CSOTFPartyInvite_PartyMember();
  CTFLobbyPlayerProto::default_instance_ = new CTFLobbyPlayerProto();
  CTFLobbyInviteProto::default_instance_ = new CTFLobbyInviteProto();
  CSOTFGameServerLobby::default_instance_ = new CSOTFGameServerLobby();
  CMsgExitMatchmaking::default_instance_ = new CMsgExitMatchmaking();
  CMsgAcceptLobbyInvite::default_instance_ = new CMsgAcceptLobbyInvite();
  CMsgAcceptLobbyInviteReply::default_instance_ = new CMsgAcceptLobbyInviteReply();
  CMsgMatchmakingSearchCountRequest::default_instance_ = new CMsgMatchmakingSearchCountRequest();
  CMsgMatchmakingSearchCountResponse::default_instance_ = new CMsgMatchmakingSearchCountResponse();
  CMsgKickedFromMatchmakingQueue::default_instance_ = new CMsgKickedFromMatchmakingQueue();
  CMsgGameServerMatchmakingStatus::default_instance_ = new CMsgGameServerMatchmakingStatus();
  CMsgGameServerMatchmakingStatus_Player::default_instance_ = new CMsgGameServerMatchmakingStatus_Player();
  CMsgMatchmakingProgress::default_instance_ = new CMsgMatchmakingProgress();
  CMsgMvMVictoryInfo::default_instance_ = new CMsgMvMVictoryInfo();
  CMsgMvMVictoryInfo_Item::default_instance_ = new CMsgMvMVictoryInfo_Item();
  CMsgMvMVictoryInfo_Player::default_instance_ = new CMsgMvMVictoryInfo_Player();
  CGCMsgTFHelloResponse::default_instance_ = new CGCMsgTFHelloResponse();
  CGCMsgTFSync::default_instance_ = new CGCMsgTFSync();
  CGCMsgTFSyncEx::default_instance_ = new CGCMsgTFSyncEx();
  CMsgMvMVictory::default_instance_ = new CMsgMvMVictory();
  CMsgMvMVictory_Player::default_instance_ = new CMsgMvMVictory_Player();
  CMsgMvMMannUpVictoryReply::default_instance_ = new CMsgMvMMannUpVictoryReply();
  CMsgGameServerKickingLobby::default_instance_ = new CMsgGameServerKickingLobby();
  CMsgGameServerKickingLobbyResponse::default_instance_ = new CMsgGameServerKickingLobbyResponse();
  CMsgLeaveGameAndPrepareToJoinParty::default_instance_ = new CMsgLeaveGameAndPrepareToJoinParty();
  CMsgPlayerLeftMatch::default_instance_ = new CMsgPlayerLeftMatch();
  CMsgPlayerLeftMatchResponse::default_instance_ = new CMsgPlayerLeftMatchResponse();
  CMsgPlayerVoteKickedAfterLeavingMatch::default_instance_ = new CMsgPlayerVoteKickedAfterLeavingMatch();
  CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance_ = new CMsgPlayerVoteKickedAfterLeavingMatchResponse();
  CMsgHalloween_ServerBossEvent::default_instance_ = new CMsgHalloween_ServerBossEvent();
  CMsgHalloween_Merasmus2012::default_instance_ = new CMsgHalloween_Merasmus2012();
  CMsgUpdateHalloweenMerasmusLootLevel::default_instance_ = new CMsgUpdateHalloweenMerasmusLootLevel();
  CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_ = new CMsgUpdateHalloweenMerasmusLootLevel_Player();
  CAttribute_String::default_instance_ = new CAttribute_String();
  CAttribute_DynamicRecipeComponent::default_instance_ = new CAttribute_DynamicRecipeComponent();
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_ = new CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT();
  CAttribute_ItemSlotCriteria::default_instance_ = new CAttribute_ItemSlotCriteria();
  CMsgSetItemSlotAttribute::default_instance_ = new CMsgSetItemSlotAttribute();
  CSOWarData::default_instance_ = new CSOWarData();
  CGCMsgGC_War_IndividualUpdate::default_instance_ = new CGCMsgGC_War_IndividualUpdate();
  CGCMsgGC_War_JoinWar::default_instance_ = new CGCMsgGC_War_JoinWar();
  CGCMsgGC_War_RequestGlobalStats::default_instance_ = new CGCMsgGC_War_RequestGlobalStats();
  CGCMsgGC_War_GlobalStatsResponse::default_instance_ = new CGCMsgGC_War_GlobalStatsResponse();
  CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_ = new CGCMsgGC_War_GlobalStatsResponse_SideScore();
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_ = new CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate();
  CAttribute_WorldItemPlacement::default_instance_ = new CAttribute_WorldItemPlacement();
  CGCMsg_WorldItemPlacement_Update::default_instance_ = new CGCMsg_WorldItemPlacement_Update();
  CMsgAcknowledgeXP::default_instance_ = new CMsgAcknowledgeXP();
  CMsgTFXPSource::default_instance_ = new CMsgTFXPSource();
  CMsgTFXPSourceBreakdown::default_instance_ = new CMsgTFXPSourceBreakdown();
  CMsgTFClientInit::default_instance_ = new CMsgTFClientInit();
  CMsgGCNotification::default_instance_ = new CMsgGCNotification();
  CMsgGCNotificationQueue::default_instance_ = new CMsgGCNotificationQueue();
  CMsgNotificationAcknowledge::default_instance_ = new CMsgNotificationAcknowledge();
  CMsgNotificationAcknowledgeReply::default_instance_ = new CMsgNotificationAcknowledgeReply();
  CMsgGC_Match_Result::default_instance_ = new CMsgGC_Match_Result();
  CMsgGC_Match_Result_Player::default_instance_ = new CMsgGC_Match_Result_Player();
  CMsgGC_Match_ResultResponse::default_instance_ = new CMsgGC_Match_ResultResponse();
  CEconItemPreviewDataBlock::default_instance_ = new CEconItemPreviewDataBlock();
  CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_ = new CMsgGC_Client2GCEconPreviewDataBlockRequest();
  CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_ = new CMsgGC_Client2GCEconPreviewDataBlockResponse();
  CSOTFLadderPlayerStats::default_instance_ = new CSOTFLadderPlayerStats();
  CSOTFRatingData::default_instance_ = new CSOTFRatingData();
  CMsgGC_TFVoteKickPlayerRequest::default_instance_ = new CMsgGC_TFVoteKickPlayerRequest();
  CMsgGC_VoteKickPlayerRequestResponse::default_instance_ = new CMsgGC_VoteKickPlayerRequestResponse();
  CMsgGC_DailyCompetitiveStatsRollup::default_instance_ = new CMsgGC_DailyCompetitiveStatsRollup();
  CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_ = new CMsgGC_DailyCompetitiveStatsRollup_Response();
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_ = new CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
  CMsgGC_ReportPlayer::default_instance_ = new CMsgGC_ReportPlayer();
  CSOTFMatchResultPlayerStats::default_instance_ = new CSOTFMatchResultPlayerStats();
  CMsgGCRequestMatchMakerStats::default_instance_ = new CMsgGCRequestMatchMakerStats();
  CMsgGCDataCenterPopulation::default_instance_ = new CMsgGCDataCenterPopulation();
  CMsgGCMatchGroupDataCenterPopulation::default_instance_ = new CMsgGCMatchGroupDataCenterPopulation();
  CMsgGCMatchMakerStatsResponse::default_instance_ = new CMsgGCMatchMakerStatsResponse();
  CMsgGCMatchHistoryLoad::default_instance_ = new CMsgGCMatchHistoryLoad();
  CMsgGCDataCenterPing_Update::default_instance_ = new CMsgGCDataCenterPing_Update();
  CMsgGCDataCenterPing_Update_PingEntry::default_instance_ = new CMsgGCDataCenterPing_Update_PingEntry();
  CMsgGC_KickPlayerFromLobby::default_instance_ = new CMsgGC_KickPlayerFromLobby();
  CMsgGCSurveyRequest::default_instance_ = new CMsgGCSurveyRequest();
  CMsgGCSurveyResponse::default_instance_ = new CMsgGCSurveyResponse();
  CSOQuestMapNode::default_instance_ = new CSOQuestMapNode();
  CSOQuest::default_instance_ = new CSOQuest();
  CSOQuestMapRewardPurchase::default_instance_ = new CSOQuestMapRewardPurchase();
  CMsgGCQuestIdentify::default_instance_ = new CMsgGCQuestIdentify();
  CMsgGCQuestDevGive::default_instance_ = new CMsgGCQuestDevGive();
  CMsgGCQuestNodeTurnIn::default_instance_ = new CMsgGCQuestNodeTurnIn();
  CMsgGCQuestMapUnlockNode::default_instance_ = new CMsgGCQuestMapUnlockNode();
  CMsgGCNewMatchForLobbyRequest::default_instance_ = new CMsgGCNewMatchForLobbyRequest();
  CMsgGCNewMatchForLobbyResponse::default_instance_ = new CMsgGCNewMatchForLobbyResponse();
  CMsgGCChangeMatchPlayerTeamsRequest::default_instance_ = new CMsgGCChangeMatchPlayerTeamsRequest();
  CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance_ = new CMsgGCChangeMatchPlayerTeamsRequest_Member();
  CMsgGCChangeMatchPlayerTeamsResponse::default_instance_ = new CMsgGCChangeMatchPlayerTeamsResponse();
  CMsgGCQuestComplete_Debug::default_instance_ = new CMsgGCQuestComplete_Debug();
  CMsgGCQuestMap_Debug::default_instance_ = new CMsgGCQuestMap_Debug();
  CMsgGCQuestMapPurchaseReward::default_instance_ = new CMsgGCQuestMapPurchaseReward();
  CMsgGCQuestResponse::default_instance_ = new CMsgGCQuestResponse();
  CMsgGCSetDisablePartyQuestProgress::default_instance_ = new CMsgGCSetDisablePartyQuestProgress();
  CMsgQuestProgressReport::default_instance_ = new CMsgQuestProgressReport();
  CMsgConsumePaintkit::default_instance_ = new CMsgConsumePaintkit();
  CMsgPainkitDevGrant::default_instance_ = new CMsgPainkitDevGrant();
  GCQuestStrangeEvent::default_instance_ = new GCQuestStrangeEvent();
  CMsgTFGoldenWrenchBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgTFSaxxyBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgGCTFSpecificItemBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgTFWorldStatus::default_instance_->InitAsDefaultInstance();
  CSOTFDuelSummary::default_instance_->InitAsDefaultInstance();
  CSOTFMapContribution::default_instance_->InitAsDefaultInstance();
  CMsgTFVoteKickBanPlayer::default_instance_->InitAsDefaultInstance();
  CMsgTFVoteKickBanPlayerResult::default_instance_->InitAsDefaultInstance();
  CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_->InitAsDefaultInstance();
  CMsgTFRequestTF2Friends::default_instance_->InitAsDefaultInstance();
  CMsgTFRequestTF2FriendsResponse::default_instance_->InitAsDefaultInstance();
  CSOTFPlayerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFThankedBySomeone::default_instance_->InitAsDefaultInstance();
  CMsgTFThankedSomeone::default_instance_->InitAsDefaultInstance();
  CMsgTFFreeTrialConvertedToPremium::default_instance_->InitAsDefaultInstance();
  CMsgSaxxyAwarded::default_instance_->InitAsDefaultInstance();
  CMsgReplaySubmitContestEntry::default_instance_->InitAsDefaultInstance();
  CMsgReplaySubmitContestEntryResponse::default_instance_->InitAsDefaultInstance();
  CReplayCachedContestData::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AddToCoaches::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_RemoveFromCoaches::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_FindCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_FindCoachResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AskCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AskCoachResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoinGame::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoining::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoined::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_LikeCurrentCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_RemoveCurrentCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServers::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServersResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_PlayerJoining::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_LevelInfo::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthChallenge::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthResult::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthChallengeResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_CreateIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_CreateIdentityResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_List::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ListResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ResetIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ResetIdentityResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AckPolicy::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AckPolicyResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_Client_UseServerModificationItem::default_instance_->InitAsDefaultInstance();
  CMsgGC_Client_UseServerModificationItem_Response::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_UseServerModificationItem::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ServerModificationItemExpired::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ServerModificationItem::default_instance_->InitAsDefaultInstance();
  CMsgGC_Halloween_ReservedItem::default_instance_->InitAsDefaultInstance();
  CMsgGC_Halloween_GrantItem::default_instance_->InitAsDefaultInstance();
  CMsgGC_Halloween_GrantItemResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_Halloween_ItemClaimed::default_instance_->InitAsDefaultInstance();
  CMsgGC_PickupItemEligibility_Query::default_instance_->InitAsDefaultInstance();
  CMsgGC_PickupItemEligibility_QueryResponse::default_instance_->InitAsDefaultInstance();
  CSOTFPartyMember::default_instance_->InitAsDefaultInstance();
  CSOTFPartyMember_Activity::default_instance_->InitAsDefaultInstance();
  TFPendingPartyMember::default_instance_->InitAsDefaultInstance();
  TFSyncedMMUIState::default_instance_->InitAsDefaultInstance();
  CTFGroupMatchCriteriaProto::default_instance_->InitAsDefaultInstance();
  CTFCasualMatchCriteria::default_instance_->InitAsDefaultInstance();
  CTFPerPlayerMatchCriteriaProto::default_instance_->InitAsDefaultInstance();
  CTFPartyOptions::default_instance_->InitAsDefaultInstance();
  CMsgPartySetOptions::default_instance_->InitAsDefaultInstance();
  CMsgPartySetOptionsResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyQueueForMatch::default_instance_->InitAsDefaultInstance();
  CMsgPartyQueueForMatchResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyQueueForStandby::default_instance_->InitAsDefaultInstance();
  CMsgPartyQueueForStandbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyRemoveFromQueue::default_instance_->InitAsDefaultInstance();
  CMsgPartyRemoveFromQueueResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyRemoveFromStandbyQueue::default_instance_->InitAsDefaultInstance();
  CMsgPartyRemoveFromStandbyQueueResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyInvitePlayer::default_instance_->InitAsDefaultInstance();
  CMsgPartyRequestJoinPlayer::default_instance_->InitAsDefaultInstance();
  CMsgPartyClearPendingPlayer::default_instance_->InitAsDefaultInstance();
  CMsgPartyClearPendingPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyClearOtherPartyRequest::default_instance_->InitAsDefaultInstance();
  CMsgPartyClearOtherPartyRequestResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyPromoteToLeader::default_instance_->InitAsDefaultInstance();
  CMsgPartyKickMember::default_instance_->InitAsDefaultInstance();
  CMsgPartySendChat::default_instance_->InitAsDefaultInstance();
  CMsgPartyChatMsg::default_instance_->InitAsDefaultInstance();
  CSOTFParty::default_instance_->InitAsDefaultInstance();
  CSOTFParty_QueueEntry::default_instance_->InitAsDefaultInstance();
  CSOTFPartyInvite::default_instance_->InitAsDefaultInstance();
  CSOTFPartyInvite_PartyMember::default_instance_->InitAsDefaultInstance();
  CTFLobbyPlayerProto::default_instance_->InitAsDefaultInstance();
  CTFLobbyInviteProto::default_instance_->InitAsDefaultInstance();
  CSOTFGameServerLobby::default_instance_->InitAsDefaultInstance();
  CMsgExitMatchmaking::default_instance_->InitAsDefaultInstance();
  CMsgAcceptLobbyInvite::default_instance_->InitAsDefaultInstance();
  CMsgAcceptLobbyInviteReply::default_instance_->InitAsDefaultInstance();
  CMsgMatchmakingSearchCountRequest::default_instance_->InitAsDefaultInstance();
  CMsgMatchmakingSearchCountResponse::default_instance_->InitAsDefaultInstance();
  CMsgKickedFromMatchmakingQueue::default_instance_->InitAsDefaultInstance();
  CMsgGameServerMatchmakingStatus::default_instance_->InitAsDefaultInstance();
  CMsgGameServerMatchmakingStatus_Player::default_instance_->InitAsDefaultInstance();
  CMsgMatchmakingProgress::default_instance_->InitAsDefaultInstance();
  CMsgMvMVictoryInfo::default_instance_->InitAsDefaultInstance();
  CMsgMvMVictoryInfo_Item::default_instance_->InitAsDefaultInstance();
  CMsgMvMVictoryInfo_Player::default_instance_->InitAsDefaultInstance();
  CGCMsgTFHelloResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgTFSync::default_instance_->InitAsDefaultInstance();
  CGCMsgTFSyncEx::default_instance_->InitAsDefaultInstance();
  CMsgMvMVictory::default_instance_->InitAsDefaultInstance();
  CMsgMvMVictory_Player::default_instance_->InitAsDefaultInstance();
  CMsgMvMMannUpVictoryReply::default_instance_->InitAsDefaultInstance();
  CMsgGameServerKickingLobby::default_instance_->InitAsDefaultInstance();
  CMsgGameServerKickingLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgLeaveGameAndPrepareToJoinParty::default_instance_->InitAsDefaultInstance();
  CMsgPlayerLeftMatch::default_instance_->InitAsDefaultInstance();
  CMsgPlayerLeftMatchResponse::default_instance_->InitAsDefaultInstance();
  CMsgPlayerVoteKickedAfterLeavingMatch::default_instance_->InitAsDefaultInstance();
  CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance_->InitAsDefaultInstance();
  CMsgHalloween_ServerBossEvent::default_instance_->InitAsDefaultInstance();
  CMsgHalloween_Merasmus2012::default_instance_->InitAsDefaultInstance();
  CMsgUpdateHalloweenMerasmusLootLevel::default_instance_->InitAsDefaultInstance();
  CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_->InitAsDefaultInstance();
  CAttribute_String::default_instance_->InitAsDefaultInstance();
  CAttribute_DynamicRecipeComponent::default_instance_->InitAsDefaultInstance();
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_->InitAsDefaultInstance();
  CAttribute_ItemSlotCriteria::default_instance_->InitAsDefaultInstance();
  CMsgSetItemSlotAttribute::default_instance_->InitAsDefaultInstance();
  CSOWarData::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_War_IndividualUpdate::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_War_JoinWar::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_War_RequestGlobalStats::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_War_GlobalStatsResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_->InitAsDefaultInstance();
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_->InitAsDefaultInstance();
  CAttribute_WorldItemPlacement::default_instance_->InitAsDefaultInstance();
  CGCMsg_WorldItemPlacement_Update::default_instance_->InitAsDefaultInstance();
  CMsgAcknowledgeXP::default_instance_->InitAsDefaultInstance();
  CMsgTFXPSource::default_instance_->InitAsDefaultInstance();
  CMsgTFXPSourceBreakdown::default_instance_->InitAsDefaultInstance();
  CMsgTFClientInit::default_instance_->InitAsDefaultInstance();
  CMsgGCNotification::default_instance_->InitAsDefaultInstance();
  CMsgGCNotificationQueue::default_instance_->InitAsDefaultInstance();
  CMsgNotificationAcknowledge::default_instance_->InitAsDefaultInstance();
  CMsgNotificationAcknowledgeReply::default_instance_->InitAsDefaultInstance();
  CMsgGC_Match_Result::default_instance_->InitAsDefaultInstance();
  CMsgGC_Match_Result_Player::default_instance_->InitAsDefaultInstance();
  CMsgGC_Match_ResultResponse::default_instance_->InitAsDefaultInstance();
  CEconItemPreviewDataBlock::default_instance_->InitAsDefaultInstance();
  CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_->InitAsDefaultInstance();
  CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_->InitAsDefaultInstance();
  CSOTFLadderPlayerStats::default_instance_->InitAsDefaultInstance();
  CSOTFRatingData::default_instance_->InitAsDefaultInstance();
  CMsgGC_TFVoteKickPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMsgGC_VoteKickPlayerRequestResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_DailyCompetitiveStatsRollup::default_instance_->InitAsDefaultInstance();
  CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_->InitAsDefaultInstance();
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_->InitAsDefaultInstance();
  CMsgGC_ReportPlayer::default_instance_->InitAsDefaultInstance();
  CSOTFMatchResultPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestMatchMakerStats::default_instance_->InitAsDefaultInstance();
  CMsgGCDataCenterPopulation::default_instance_->InitAsDefaultInstance();
  CMsgGCMatchGroupDataCenterPopulation::default_instance_->InitAsDefaultInstance();
  CMsgGCMatchMakerStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCMatchHistoryLoad::default_instance_->InitAsDefaultInstance();
  CMsgGCDataCenterPing_Update::default_instance_->InitAsDefaultInstance();
  CMsgGCDataCenterPing_Update_PingEntry::default_instance_->InitAsDefaultInstance();
  CMsgGC_KickPlayerFromLobby::default_instance_->InitAsDefaultInstance();
  CMsgGCSurveyRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCSurveyResponse::default_instance_->InitAsDefaultInstance();
  CSOQuestMapNode::default_instance_->InitAsDefaultInstance();
  CSOQuest::default_instance_->InitAsDefaultInstance();
  CSOQuestMapRewardPurchase::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestIdentify::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestDevGive::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestNodeTurnIn::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestMapUnlockNode::default_instance_->InitAsDefaultInstance();
  CMsgGCNewMatchForLobbyRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCNewMatchForLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCChangeMatchPlayerTeamsRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance_->InitAsDefaultInstance();
  CMsgGCChangeMatchPlayerTeamsResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestComplete_Debug::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestMap_Debug::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestMapPurchaseReward::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCSetDisablePartyQuestProgress::default_instance_->InitAsDefaultInstance();
  CMsgQuestProgressReport::default_instance_->InitAsDefaultInstance();
  CMsgConsumePaintkit::default_instance_->InitAsDefaultInstance();
  CMsgPainkitDevGrant::default_instance_->InitAsDefaultInstance();
  GCQuestStrangeEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tf_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tf_5fgcmessages_2eproto {
  StaticDescriptorInitializer_tf_5fgcmessages_2eproto() {
    protobuf_AddDesc_tf_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_tf_5fgcmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* ETFGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETFGCMsg_descriptor_;
}
bool ETFGCMsg_IsValid(int value) {
  switch(value) {
    case 5001:
    case 5018:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5023:
    case 5024:
    case 5026:
    case 5027:
    case 5028:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5033:
    case 5034:
    case 5200:
    case 5201:
    case 5202:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5211:
    case 5212:
    case 5213:
    case 5500:
    case 5501:
    case 5502:
    case 5503:
    case 5600:
    case 5601:
    case 5604:
    case 5605:
    case 5606:
    case 5607:
    case 5608:
    case 5609:
    case 5610:
    case 5611:
    case 5612:
    case 5613:
    case 5614:
    case 5700:
    case 5701:
    case 5702:
    case 5703:
    case 5704:
    case 5705:
    case 5706:
    case 5707:
    case 5708:
    case 5709:
    case 5710:
    case 5711:
    case 5712:
    case 5713:
    case 5714:
    case 5715:
    case 5716:
    case 5717:
    case 5800:
    case 5801:
    case 5802:
    case 6000:
    case 6001:
    case 6100:
    case 6101:
    case 6235:
    case 6237:
    case 6260:
    case 6261:
    case 6270:
    case 6271:
    case 6272:
    case 6287:
    case 6289:
    case 6293:
    case 6294:
    case 6295:
    case 6297:
    case 6298:
    case 6299:
    case 6300:
    case 6400:
    case 6401:
    case 6402:
    case 6403:
    case 6500:
    case 6501:
    case 6502:
    case 6503:
    case 6505:
    case 6506:
    case 6507:
    case 6508:
    case 6510:
    case 6511:
    case 6512:
    case 6513:
    case 6514:
    case 6516:
    case 6517:
    case 6518:
    case 6519:
    case 6520:
    case 6521:
    case 6522:
    case 6523:
    case 6524:
    case 6525:
    case 6526:
    case 6527:
    case 6528:
    case 6529:
    case 6530:
    case 6531:
    case 6534:
    case 6535:
    case 6536:
    case 6537:
    case 6538:
    case 6539:
    case 6540:
    case 6541:
    case 6542:
    case 6544:
    case 6545:
    case 6547:
    case 6549:
    case 6550:
    case 6551:
    case 6552:
    case 6553:
    case 6554:
    case 6555:
    case 6556:
    case 6557:
    case 6558:
    case 6559:
    case 6560:
    case 6561:
    case 6562:
    case 6563:
    case 6564:
    case 6565:
    case 6566:
    case 6567:
    case 6568:
    case 6569:
    case 6570:
    case 6571:
    case 6572:
    case 6573:
    case 6574:
    case 6575:
    case 6576:
    case 6577:
    case 6578:
    case 6579:
    case 10001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerModificationItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerModificationItemType_descriptor_;
}
bool EServerModificationItemType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETFSyncedMMMenuStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETFSyncedMMMenuStep_descriptor_;
}
bool ETFSyncedMMMenuStep_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETFMatchGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETFMatchGroup_descriptor_;
}
bool ETFMatchGroup_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETFPartyChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETFPartyChatType_descriptor_;
}
bool ETFPartyChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_GC_GameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TF_GC_GameState_descriptor_;
}
bool TF_GC_GameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_GC_TEAM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TF_GC_TEAM_descriptor_;
}
bool TF_GC_TEAM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TFMatchLeaveReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFMatchLeaveReason_descriptor_;
}
bool TFMatchLeaveReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerMatchmakingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMatchmakingState_descriptor_;
}
bool ServerMatchmakingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SurveyQuestionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurveyQuestionType_descriptor_;
}
bool SurveyQuestionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CMsgTFGoldenWrenchBroadcast::_default_user_name_;
#ifndef _MSC_VER
const int CMsgTFGoldenWrenchBroadcast::kWrenchNumberFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kDeletedFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFGoldenWrenchBroadcast::InitAsDefaultInstance() {
}

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(const CMsgTFGoldenWrenchBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::SharedCtor() {
  _cached_size_ = 0;
  wrench_number_ = 0;
  deleted_ = false;
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFGoldenWrenchBroadcast::~CMsgTFGoldenWrenchBroadcast() {
  SharedDtor();
}

void CMsgTFGoldenWrenchBroadcast::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFGoldenWrenchBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFGoldenWrenchBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFGoldenWrenchBroadcast_descriptor_;
}

const CMsgTFGoldenWrenchBroadcast& CMsgTFGoldenWrenchBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFGoldenWrenchBroadcast* CMsgTFGoldenWrenchBroadcast::default_instance_ = NULL;

CMsgTFGoldenWrenchBroadcast* CMsgTFGoldenWrenchBroadcast::New() const {
  return new CMsgTFGoldenWrenchBroadcast;
}

void CMsgTFGoldenWrenchBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wrench_number_ = 0;
    deleted_ = false;
    if (_has_bit(2)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFGoldenWrenchBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wrench_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrench_number_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deleted;
        break;
      }
      
      // optional bool deleted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wrench_number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrench_number(), output);
  }
  
  // optional bool deleted = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->deleted(), output);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wrench_number = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrench_number(), target);
  }
  
  // optional bool deleted = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->deleted(), target);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFGoldenWrenchBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wrench_number = 1;
    if (has_wrench_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrench_number());
    }
    
    // optional bool deleted = 2;
    if (has_deleted()) {
      total_size += 1 + 1;
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFGoldenWrenchBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFGoldenWrenchBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const CMsgTFGoldenWrenchBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_wrench_number(from.wrench_number());
    }
    if (from._has_bit(1)) {
      set_deleted(from.deleted());
    }
    if (from._has_bit(2)) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const CMsgTFGoldenWrenchBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFGoldenWrenchBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgTFGoldenWrenchBroadcast::Swap(CMsgTFGoldenWrenchBroadcast* other) {
  if (other != this) {
    std::swap(wrench_number_, other->wrench_number_);
    std::swap(deleted_, other->deleted_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFGoldenWrenchBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFGoldenWrenchBroadcast_descriptor_;
  metadata.reflection = CMsgTFGoldenWrenchBroadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgTFSaxxyBroadcast::_default_user_name_;
#ifndef _MSC_VER
const int CMsgTFSaxxyBroadcast::kCategoryNumberFieldNumber;
const int CMsgTFSaxxyBroadcast::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFSaxxyBroadcast::InitAsDefaultInstance() {
}

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(const CMsgTFSaxxyBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  category_number_ = 0;
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFSaxxyBroadcast::~CMsgTFSaxxyBroadcast() {
  SharedDtor();
}

void CMsgTFSaxxyBroadcast::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFSaxxyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFSaxxyBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFSaxxyBroadcast_descriptor_;
}

const CMsgTFSaxxyBroadcast& CMsgTFSaxxyBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFSaxxyBroadcast* CMsgTFSaxxyBroadcast::default_instance_ = NULL;

CMsgTFSaxxyBroadcast* CMsgTFSaxxyBroadcast::New() const {
  return new CMsgTFSaxxyBroadcast;
}

void CMsgTFSaxxyBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_number_ = 0;
    if (_has_bit(1)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFSaxxyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_number_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFSaxxyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 category_number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_number(), output);
  }
  
  // optional string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFSaxxyBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 category_number = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_number(), target);
  }
  
  // optional string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFSaxxyBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 category_number = 1;
    if (has_category_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_number());
    }
    
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFSaxxyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFSaxxyBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFSaxxyBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFSaxxyBroadcast::MergeFrom(const CMsgTFSaxxyBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_category_number(from.category_number());
    }
    if (from._has_bit(1)) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFSaxxyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::CopyFrom(const CMsgTFSaxxyBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFSaxxyBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgTFSaxxyBroadcast::Swap(CMsgTFSaxxyBroadcast* other) {
  if (other != this) {
    std::swap(category_number_, other->category_number_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFSaxxyBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFSaxxyBroadcast_descriptor_;
  metadata.reflection = CMsgTFSaxxyBroadcast_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCTFSpecificItemBroadcast::_default_user_name_;
#ifndef _MSC_VER
const int CMsgGCTFSpecificItemBroadcast::kItemDefIndexFieldNumber;
const int CMsgGCTFSpecificItemBroadcast::kWasDestructionFieldNumber;
const int CMsgGCTFSpecificItemBroadcast::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCTFSpecificItemBroadcast::InitAsDefaultInstance() {
}

CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast(const CMsgGCTFSpecificItemBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCTFSpecificItemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  was_destruction_ = false;
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCTFSpecificItemBroadcast::~CMsgGCTFSpecificItemBroadcast() {
  SharedDtor();
}

void CMsgGCTFSpecificItemBroadcast::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCTFSpecificItemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCTFSpecificItemBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCTFSpecificItemBroadcast_descriptor_;
}

const CMsgGCTFSpecificItemBroadcast& CMsgGCTFSpecificItemBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCTFSpecificItemBroadcast* CMsgGCTFSpecificItemBroadcast::default_instance_ = NULL;

CMsgGCTFSpecificItemBroadcast* CMsgGCTFSpecificItemBroadcast::New() const {
  return new CMsgGCTFSpecificItemBroadcast;
}

void CMsgGCTFSpecificItemBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_index_ = 0u;
    was_destruction_ = false;
    if (_has_bit(2)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCTFSpecificItemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_was_destruction;
        break;
      }
      
      // optional bool was_destruction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_destruction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_destruction_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCTFSpecificItemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }
  
  // optional bool was_destruction = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_destruction(), output);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCTFSpecificItemBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }
  
  // optional bool was_destruction = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_destruction(), target);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCTFSpecificItemBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
    // optional bool was_destruction = 2;
    if (has_was_destruction()) {
      total_size += 1 + 1;
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCTFSpecificItemBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCTFSpecificItemBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const CMsgGCTFSpecificItemBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_index(from.item_def_index());
    }
    if (from._has_bit(1)) {
      set_was_destruction(from.was_destruction());
    }
    if (from._has_bit(2)) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const CMsgGCTFSpecificItemBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTFSpecificItemBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgGCTFSpecificItemBroadcast::Swap(CMsgGCTFSpecificItemBroadcast* other) {
  if (other != this) {
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(was_destruction_, other->was_destruction_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCTFSpecificItemBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCTFSpecificItemBroadcast_descriptor_;
  metadata.reflection = CMsgGCTFSpecificItemBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFWorldStatus::kBetaStressTestEventActiveFieldNumber;
const int CMsgTFWorldStatus::kEventMatchGroupFieldNumber;
const int CMsgTFWorldStatus::kEventExpireTimeFieldNumber;
const int CMsgTFWorldStatus::kActiveClientVersionFieldNumber;
const int CMsgTFWorldStatus::kDisabledMatchGroupsFieldNumber;
#endif  // !_MSC_VER

CMsgTFWorldStatus::CMsgTFWorldStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFWorldStatus::InitAsDefaultInstance() {
}

CMsgTFWorldStatus::CMsgTFWorldStatus(const CMsgTFWorldStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFWorldStatus::SharedCtor() {
  _cached_size_ = 0;
  beta_stress_test_event_active_ = false;
  event_match_group_ = -1;
  event_expire_time_ = 0u;
  active_client_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFWorldStatus::~CMsgTFWorldStatus() {
  SharedDtor();
}

void CMsgTFWorldStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFWorldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFWorldStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFWorldStatus_descriptor_;
}

const CMsgTFWorldStatus& CMsgTFWorldStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFWorldStatus* CMsgTFWorldStatus::default_instance_ = NULL;

CMsgTFWorldStatus* CMsgTFWorldStatus::New() const {
  return new CMsgTFWorldStatus;
}

void CMsgTFWorldStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beta_stress_test_event_active_ = false;
    event_match_group_ = -1;
    event_expire_time_ = 0u;
    active_client_version_ = 0u;
  }
  disabled_match_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFWorldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool beta_stress_test_event_active = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beta_stress_test_event_active_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_match_group;
        break;
      }
      
      // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_event_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_event_expire_time;
        break;
      }
      
      // optional fixed32 event_expire_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_event_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &event_expire_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active_client_version;
        break;
      }
      
      // optional uint32 active_client_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_client_version_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_disabled_match_groups;
        break;
      }
      
      // repeated .ETFMatchGroup disabled_match_groups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disabled_match_groups:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            add_disabled_match_groups(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &ETFMatchGroup_IsValid,
                 this->mutable_disabled_match_groups())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_disabled_match_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFWorldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->beta_stress_test_event_active(), output);
  }
  
  // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_match_group(), output);
  }
  
  // optional fixed32 event_expire_time = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->event_expire_time(), output);
  }
  
  // optional uint32 active_client_version = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->active_client_version(), output);
  }
  
  // repeated .ETFMatchGroup disabled_match_groups = 5;
  for (int i = 0; i < this->disabled_match_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->disabled_match_groups(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFWorldStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->beta_stress_test_event_active(), target);
  }
  
  // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_match_group(), target);
  }
  
  // optional fixed32 event_expire_time = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->event_expire_time(), target);
  }
  
  // optional uint32 active_client_version = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->active_client_version(), target);
  }
  
  // repeated .ETFMatchGroup disabled_match_groups = 5;
  for (int i = 0; i < this->disabled_match_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->disabled_match_groups(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFWorldStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool beta_stress_test_event_active = 1 [default = false];
    if (has_beta_stress_test_event_active()) {
      total_size += 1 + 1;
    }
    
    // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (has_event_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_match_group());
    }
    
    // optional fixed32 event_expire_time = 3 [default = 0];
    if (has_event_expire_time()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 active_client_version = 4;
    if (has_active_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_client_version());
    }
    
  }
  // repeated .ETFMatchGroup disabled_match_groups = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->disabled_match_groups_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->disabled_match_groups(i));
    }
    total_size += 1 * this->disabled_match_groups_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFWorldStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFWorldStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFWorldStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFWorldStatus::MergeFrom(const CMsgTFWorldStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  disabled_match_groups_.MergeFrom(from.disabled_match_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_beta_stress_test_event_active(from.beta_stress_test_event_active());
    }
    if (from._has_bit(1)) {
      set_event_match_group(from.event_match_group());
    }
    if (from._has_bit(2)) {
      set_event_expire_time(from.event_expire_time());
    }
    if (from._has_bit(3)) {
      set_active_client_version(from.active_client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFWorldStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFWorldStatus::CopyFrom(const CMsgTFWorldStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFWorldStatus::IsInitialized() const {
  
  return true;
}

void CMsgTFWorldStatus::Swap(CMsgTFWorldStatus* other) {
  if (other != this) {
    std::swap(beta_stress_test_event_active_, other->beta_stress_test_event_active_);
    std::swap(event_match_group_, other->event_match_group_);
    std::swap(event_expire_time_, other->event_expire_time_);
    std::swap(active_client_version_, other->active_client_version_);
    disabled_match_groups_.Swap(&other->disabled_match_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFWorldStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFWorldStatus_descriptor_;
  metadata.reflection = CMsgTFWorldStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFDuelSummary::kAccountIdFieldNumber;
const int CSOTFDuelSummary::kDuelWinsFieldNumber;
const int CSOTFDuelSummary::kDuelLossesFieldNumber;
const int CSOTFDuelSummary::kLastDuelAccountIdFieldNumber;
const int CSOTFDuelSummary::kLastDuelTimestampFieldNumber;
const int CSOTFDuelSummary::kLastDuelStatusFieldNumber;
#endif  // !_MSC_VER

CSOTFDuelSummary::CSOTFDuelSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFDuelSummary::InitAsDefaultInstance() {
}

CSOTFDuelSummary::CSOTFDuelSummary(const CSOTFDuelSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFDuelSummary::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  duel_wins_ = 0u;
  duel_losses_ = 0u;
  last_duel_account_id_ = 0u;
  last_duel_timestamp_ = 0u;
  last_duel_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFDuelSummary::~CSOTFDuelSummary() {
  SharedDtor();
}

void CSOTFDuelSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFDuelSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFDuelSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFDuelSummary_descriptor_;
}

const CSOTFDuelSummary& CSOTFDuelSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFDuelSummary* CSOTFDuelSummary::default_instance_ = NULL;

CSOTFDuelSummary* CSOTFDuelSummary::New() const {
  return new CSOTFDuelSummary;
}

void CSOTFDuelSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    duel_wins_ = 0u;
    duel_losses_ = 0u;
    last_duel_account_id_ = 0u;
    last_duel_timestamp_ = 0u;
    last_duel_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFDuelSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duel_wins;
        break;
      }
      
      // optional uint32 duel_wins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_wins_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duel_losses;
        break;
      }
      
      // optional uint32 duel_losses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_losses_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_duel_account_id;
        break;
      }
      
      // optional uint32 last_duel_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_account_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_duel_timestamp;
        break;
      }
      
      // optional uint32 last_duel_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_timestamp_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_duel_status;
        break;
      }
      
      // optional uint32 last_duel_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_status_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFDuelSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 duel_wins = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duel_wins(), output);
  }
  
  // optional uint32 duel_losses = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duel_losses(), output);
  }
  
  // optional uint32 last_duel_account_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_duel_account_id(), output);
  }
  
  // optional uint32 last_duel_timestamp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_duel_timestamp(), output);
  }
  
  // optional uint32 last_duel_status = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_duel_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFDuelSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 duel_wins = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duel_wins(), target);
  }
  
  // optional uint32 duel_losses = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duel_losses(), target);
  }
  
  // optional uint32 last_duel_account_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_duel_account_id(), target);
  }
  
  // optional uint32 last_duel_timestamp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_duel_timestamp(), target);
  }
  
  // optional uint32 last_duel_status = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_duel_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFDuelSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 duel_wins = 2;
    if (has_duel_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_wins());
    }
    
    // optional uint32 duel_losses = 3;
    if (has_duel_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_losses());
    }
    
    // optional uint32 last_duel_account_id = 4;
    if (has_last_duel_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_account_id());
    }
    
    // optional uint32 last_duel_timestamp = 5;
    if (has_last_duel_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_timestamp());
    }
    
    // optional uint32 last_duel_status = 6;
    if (has_last_duel_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFDuelSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFDuelSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFDuelSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFDuelSummary::MergeFrom(const CSOTFDuelSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_duel_wins(from.duel_wins());
    }
    if (from._has_bit(2)) {
      set_duel_losses(from.duel_losses());
    }
    if (from._has_bit(3)) {
      set_last_duel_account_id(from.last_duel_account_id());
    }
    if (from._has_bit(4)) {
      set_last_duel_timestamp(from.last_duel_timestamp());
    }
    if (from._has_bit(5)) {
      set_last_duel_status(from.last_duel_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFDuelSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFDuelSummary::CopyFrom(const CSOTFDuelSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFDuelSummary::IsInitialized() const {
  
  return true;
}

void CSOTFDuelSummary::Swap(CSOTFDuelSummary* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(duel_wins_, other->duel_wins_);
    std::swap(duel_losses_, other->duel_losses_);
    std::swap(last_duel_account_id_, other->last_duel_account_id_);
    std::swap(last_duel_timestamp_, other->last_duel_timestamp_);
    std::swap(last_duel_status_, other->last_duel_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFDuelSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFDuelSummary_descriptor_;
  metadata.reflection = CSOTFDuelSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFMapContribution::kAccountIdFieldNumber;
const int CSOTFMapContribution::kDefIndexFieldNumber;
const int CSOTFMapContribution::kContributionLevelFieldNumber;
#endif  // !_MSC_VER

CSOTFMapContribution::CSOTFMapContribution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFMapContribution::InitAsDefaultInstance() {
}

CSOTFMapContribution::CSOTFMapContribution(const CSOTFMapContribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFMapContribution::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  def_index_ = 0u;
  contribution_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFMapContribution::~CSOTFMapContribution() {
  SharedDtor();
}

void CSOTFMapContribution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFMapContribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFMapContribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFMapContribution_descriptor_;
}

const CSOTFMapContribution& CSOTFMapContribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFMapContribution* CSOTFMapContribution::default_instance_ = NULL;

CSOTFMapContribution* CSOTFMapContribution::New() const {
  return new CSOTFMapContribution;
}

void CSOTFMapContribution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    def_index_ = 0u;
    contribution_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFMapContribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribution_level;
        break;
      }
      
      // optional uint32 contribution_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_level_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFMapContribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 def_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->def_index(), output);
  }
  
  // optional uint32 contribution_level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribution_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFMapContribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 def_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->def_index(), target);
  }
  
  // optional uint32 contribution_level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribution_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFMapContribution::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 def_index = 2;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 contribution_level = 3;
    if (has_contribution_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFMapContribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFMapContribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFMapContribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFMapContribution::MergeFrom(const CSOTFMapContribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(2)) {
      set_contribution_level(from.contribution_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFMapContribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMapContribution::CopyFrom(const CSOTFMapContribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMapContribution::IsInitialized() const {
  
  return true;
}

void CSOTFMapContribution::Swap(CSOTFMapContribution* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(def_index_, other->def_index_);
    std::swap(contribution_level_, other->contribution_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFMapContribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFMapContribution_descriptor_;
  metadata.reflection = CSOTFMapContribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFVoteKickBanPlayer::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayer::kKickReasonFieldNumber;
#endif  // !_MSC_VER

CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFVoteKickBanPlayer::InitAsDefaultInstance() {
}

CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer(const CMsgTFVoteKickBanPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_subject_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFVoteKickBanPlayer::~CMsgTFVoteKickBanPlayer() {
  SharedDtor();
}

void CMsgTFVoteKickBanPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFVoteKickBanPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFVoteKickBanPlayer_descriptor_;
}

const CMsgTFVoteKickBanPlayer& CMsgTFVoteKickBanPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFVoteKickBanPlayer* CMsgTFVoteKickBanPlayer::default_instance_ = NULL;

CMsgTFVoteKickBanPlayer* CMsgTFVoteKickBanPlayer::New() const {
  return new CMsgTFVoteKickBanPlayer;
}

void CMsgTFVoteKickBanPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_subject_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFVoteKickBanPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_subject = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kick_reason;
        break;
      }
      
      // optional uint32 kick_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFVoteKickBanPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_subject = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_subject(), output);
  }
  
  // optional uint32 kick_reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_subject = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_subject(), target);
  }
  
  // optional uint32 kick_reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFVoteKickBanPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_subject = 1;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }
    
    // optional uint32 kick_reason = 2;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFVoteKickBanPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const CMsgTFVoteKickBanPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_subject(from.account_id_subject());
    }
    if (from._has_bit(1)) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const CMsgTFVoteKickBanPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayer::IsInitialized() const {
  
  return true;
}

void CMsgTFVoteKickBanPlayer::Swap(CMsgTFVoteKickBanPlayer* other) {
  if (other != this) {
    std::swap(account_id_subject_, other->account_id_subject_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFVoteKickBanPlayer_descriptor_;
  metadata.reflection = CMsgTFVoteKickBanPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFVoteKickBanPlayerResult::kAccountIdInitiatorFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickReasonFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickSuccessfulFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumYesVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumNoVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumPossibleVotesFieldNumber;
#endif  // !_MSC_VER

CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFVoteKickBanPlayerResult::InitAsDefaultInstance() {
}

CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult(const CMsgTFVoteKickBanPlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayerResult::SharedCtor() {
  _cached_size_ = 0;
  account_id_initiator_ = 0u;
  account_id_subject_ = 0u;
  kick_reason_ = 0u;
  kick_successful_ = false;
  num_yes_votes_ = 0u;
  num_no_votes_ = 0u;
  num_possible_votes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFVoteKickBanPlayerResult::~CMsgTFVoteKickBanPlayerResult() {
  SharedDtor();
}

void CMsgTFVoteKickBanPlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFVoteKickBanPlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFVoteKickBanPlayerResult_descriptor_;
}

const CMsgTFVoteKickBanPlayerResult& CMsgTFVoteKickBanPlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFVoteKickBanPlayerResult* CMsgTFVoteKickBanPlayerResult::default_instance_ = NULL;

CMsgTFVoteKickBanPlayerResult* CMsgTFVoteKickBanPlayerResult::New() const {
  return new CMsgTFVoteKickBanPlayerResult;
}

void CMsgTFVoteKickBanPlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_initiator_ = 0u;
    account_id_subject_ = 0u;
    kick_reason_ = 0u;
    kick_successful_ = false;
    num_yes_votes_ = 0u;
    num_no_votes_ = 0u;
    num_possible_votes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFVoteKickBanPlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_initiator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_initiator_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id_subject;
        break;
      }
      
      // optional uint32 account_id_subject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_subject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }
      
      // optional uint32 kick_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kick_successful;
        break;
      }
      
      // optional bool kick_successful = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_successful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_successful_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_yes_votes;
        break;
      }
      
      // optional uint32 num_yes_votes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_yes_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_yes_votes_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_no_votes;
        break;
      }
      
      // optional uint32 num_no_votes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_no_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_no_votes_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_possible_votes;
        break;
      }
      
      // optional uint32 num_possible_votes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_possible_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_possible_votes_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_initiator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_initiator(), output);
  }
  
  // optional uint32 account_id_subject = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_subject(), output);
  }
  
  // optional uint32 kick_reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }
  
  // optional bool kick_successful = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->kick_successful(), output);
  }
  
  // optional uint32 num_yes_votes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_yes_votes(), output);
  }
  
  // optional uint32 num_no_votes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_no_votes(), output);
  }
  
  // optional uint32 num_possible_votes = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_possible_votes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_initiator = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_initiator(), target);
  }
  
  // optional uint32 account_id_subject = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_subject(), target);
  }
  
  // optional uint32 kick_reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }
  
  // optional bool kick_successful = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->kick_successful(), target);
  }
  
  // optional uint32 num_yes_votes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_yes_votes(), target);
  }
  
  // optional uint32 num_no_votes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_no_votes(), target);
  }
  
  // optional uint32 num_possible_votes = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_possible_votes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFVoteKickBanPlayerResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_initiator = 1;
    if (has_account_id_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_initiator());
    }
    
    // optional uint32 account_id_subject = 2;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }
    
    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }
    
    // optional bool kick_successful = 4;
    if (has_kick_successful()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 num_yes_votes = 5;
    if (has_num_yes_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_yes_votes());
    }
    
    // optional uint32 num_no_votes = 6;
    if (has_num_no_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_no_votes());
    }
    
    // optional uint32 num_possible_votes = 7;
    if (has_num_possible_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_possible_votes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFVoteKickBanPlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const CMsgTFVoteKickBanPlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_initiator(from.account_id_initiator());
    }
    if (from._has_bit(1)) {
      set_account_id_subject(from.account_id_subject());
    }
    if (from._has_bit(2)) {
      set_kick_reason(from.kick_reason());
    }
    if (from._has_bit(3)) {
      set_kick_successful(from.kick_successful());
    }
    if (from._has_bit(4)) {
      set_num_yes_votes(from.num_yes_votes());
    }
    if (from._has_bit(5)) {
      set_num_no_votes(from.num_no_votes());
    }
    if (from._has_bit(6)) {
      set_num_possible_votes(from.num_possible_votes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const CMsgTFVoteKickBanPlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayerResult::IsInitialized() const {
  
  return true;
}

void CMsgTFVoteKickBanPlayerResult::Swap(CMsgTFVoteKickBanPlayerResult* other) {
  if (other != this) {
    std::swap(account_id_initiator_, other->account_id_initiator_);
    std::swap(account_id_subject_, other->account_id_subject_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(kick_successful_, other->kick_successful_);
    std::swap(num_yes_votes_, other->num_yes_votes_);
    std::swap(num_no_votes_, other->num_no_votes_);
    std::swap(num_possible_votes_, other->num_possible_votes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFVoteKickBanPlayerResult_descriptor_;
  metadata.reflection = CMsgTFVoteKickBanPlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFFreeTrialChooseMostHelpfulFriend::kAccountIdFriendFieldNumber;
#endif  // !_MSC_VER

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::InitAsDefaultInstance() {
}

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(const CMsgTFFreeTrialChooseMostHelpfulFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFFreeTrialChooseMostHelpfulFriend::~CMsgTFFreeTrialChooseMostHelpfulFriend() {
  SharedDtor();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialChooseMostHelpfulFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_;
}

const CMsgTFFreeTrialChooseMostHelpfulFriend& CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFFreeTrialChooseMostHelpfulFriend* CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_ = NULL;

CMsgTFFreeTrialChooseMostHelpfulFriend* CMsgTFFreeTrialChooseMostHelpfulFriend::New() const {
  return new CMsgTFFreeTrialChooseMostHelpfulFriend;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_friend_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_friend = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_friend = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFFreeTrialChooseMostHelpfulFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_friend = 1;
    if (has_account_id_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_friend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFFreeTrialChooseMostHelpfulFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFFreeTrialChooseMostHelpfulFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_friend(from.account_id_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::IsInitialized() const {
  
  return true;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Swap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
  if (other != this) {
    std::swap(account_id_friend_, other->account_id_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFFreeTrialChooseMostHelpfulFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_;
  metadata.reflection = CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFRequestTF2Friends::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFRequestTF2Friends::InitAsDefaultInstance() {
}

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(const CMsgTFRequestTF2Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFRequestTF2Friends::~CMsgTFRequestTF2Friends() {
  SharedDtor();
}

void CMsgTFRequestTF2Friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFRequestTF2Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFRequestTF2Friends_descriptor_;
}

const CMsgTFRequestTF2Friends& CMsgTFRequestTF2Friends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFRequestTF2Friends* CMsgTFRequestTF2Friends::default_instance_ = NULL;

CMsgTFRequestTF2Friends* CMsgTFRequestTF2Friends::New() const {
  return new CMsgTFRequestTF2Friends;
}

void CMsgTFRequestTF2Friends::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFRequestTF2Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFRequestTF2Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFRequestTF2Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFRequestTF2Friends::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFRequestTF2Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFRequestTF2Friends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2Friends::MergeFrom(const CMsgTFRequestTF2Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFRequestTF2Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::CopyFrom(const CMsgTFRequestTF2Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2Friends::IsInitialized() const {
  
  return true;
}

void CMsgTFRequestTF2Friends::Swap(CMsgTFRequestTF2Friends* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFRequestTF2Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFRequestTF2Friends_descriptor_;
  metadata.reflection = CMsgTFRequestTF2Friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFRequestTF2FriendsResponse::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFRequestTF2FriendsResponse::InitAsDefaultInstance() {
}

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(const CMsgTFRequestTF2FriendsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFRequestTF2FriendsResponse::~CMsgTFRequestTF2FriendsResponse() {
  SharedDtor();
}

void CMsgTFRequestTF2FriendsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFRequestTF2FriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2FriendsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFRequestTF2FriendsResponse_descriptor_;
}

const CMsgTFRequestTF2FriendsResponse& CMsgTFRequestTF2FriendsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFRequestTF2FriendsResponse* CMsgTFRequestTF2FriendsResponse::default_instance_ = NULL;

CMsgTFRequestTF2FriendsResponse* CMsgTFRequestTF2FriendsResponse::New() const {
  return new CMsgTFRequestTF2FriendsResponse;
}

void CMsgTFRequestTF2FriendsResponse::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFRequestTF2FriendsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFRequestTF2FriendsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFRequestTF2FriendsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFRequestTF2FriendsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const CMsgTFRequestTF2FriendsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const CMsgTFRequestTF2FriendsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2FriendsResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFRequestTF2FriendsResponse::Swap(CMsgTFRequestTF2FriendsResponse* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFRequestTF2FriendsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFRequestTF2FriendsResponse_descriptor_;
  metadata.reflection = CMsgTFRequestTF2FriendsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFPlayerInfo::kNumNewUsersHelpedFieldNumber;
#endif  // !_MSC_VER

CSOTFPlayerInfo::CSOTFPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPlayerInfo::InitAsDefaultInstance() {
}

CSOTFPlayerInfo::CSOTFPlayerInfo(const CSOTFPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  num_new_users_helped_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPlayerInfo::~CSOTFPlayerInfo() {
  SharedDtor();
}

void CSOTFPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPlayerInfo_descriptor_;
}

const CSOTFPlayerInfo& CSOTFPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPlayerInfo* CSOTFPlayerInfo::default_instance_ = NULL;

CSOTFPlayerInfo* CSOTFPlayerInfo::New() const {
  return new CSOTFPlayerInfo;
}

void CSOTFPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_new_users_helped_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_new_users_helped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_new_users_helped_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num_new_users_helped = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_new_users_helped(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num_new_users_helped = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_new_users_helped(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_new_users_helped = 1;
    if (has_num_new_users_helped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_new_users_helped());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPlayerInfo::MergeFrom(const CSOTFPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_new_users_helped(from.num_new_users_helped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPlayerInfo::CopyFrom(const CSOTFPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPlayerInfo::IsInitialized() const {
  
  return true;
}

void CSOTFPlayerInfo::Swap(CSOTFPlayerInfo* other) {
  if (other != this) {
    std::swap(num_new_users_helped_, other->num_new_users_helped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPlayerInfo_descriptor_;
  metadata.reflection = CSOTFPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFThankedBySomeone::kThankerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFThankedBySomeone::InitAsDefaultInstance() {
}

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(const CMsgTFThankedBySomeone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::SharedCtor() {
  _cached_size_ = 0;
  thanker_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFThankedBySomeone::~CMsgTFThankedBySomeone() {
  SharedDtor();
}

void CMsgTFThankedBySomeone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFThankedBySomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedBySomeone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFThankedBySomeone_descriptor_;
}

const CMsgTFThankedBySomeone& CMsgTFThankedBySomeone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFThankedBySomeone* CMsgTFThankedBySomeone::default_instance_ = NULL;

CMsgTFThankedBySomeone* CMsgTFThankedBySomeone::New() const {
  return new CMsgTFThankedBySomeone;
}

void CMsgTFThankedBySomeone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thanker_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFThankedBySomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 thanker_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thanker_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFThankedBySomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 thanker_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thanker_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFThankedBySomeone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 thanker_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thanker_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFThankedBySomeone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 thanker_steam_id = 1;
    if (has_thanker_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thanker_steam_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedBySomeone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFThankedBySomeone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFThankedBySomeone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFThankedBySomeone::MergeFrom(const CMsgTFThankedBySomeone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_thanker_steam_id(from.thanker_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFThankedBySomeone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::CopyFrom(const CMsgTFThankedBySomeone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedBySomeone::IsInitialized() const {
  
  return true;
}

void CMsgTFThankedBySomeone::Swap(CMsgTFThankedBySomeone* other) {
  if (other != this) {
    std::swap(thanker_steam_id_, other->thanker_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFThankedBySomeone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFThankedBySomeone_descriptor_;
  metadata.reflection = CMsgTFThankedBySomeone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFThankedSomeone::CMsgTFThankedSomeone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFThankedSomeone::InitAsDefaultInstance() {
}

CMsgTFThankedSomeone::CMsgTFThankedSomeone(const CMsgTFThankedSomeone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFThankedSomeone::~CMsgTFThankedSomeone() {
  SharedDtor();
}

void CMsgTFThankedSomeone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFThankedSomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedSomeone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFThankedSomeone_descriptor_;
}

const CMsgTFThankedSomeone& CMsgTFThankedSomeone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFThankedSomeone* CMsgTFThankedSomeone::default_instance_ = NULL;

CMsgTFThankedSomeone* CMsgTFThankedSomeone::New() const {
  return new CMsgTFThankedSomeone;
}

void CMsgTFThankedSomeone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFThankedSomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFThankedSomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFThankedSomeone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFThankedSomeone::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedSomeone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFThankedSomeone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFThankedSomeone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFThankedSomeone::MergeFrom(const CMsgTFThankedSomeone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFThankedSomeone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::CopyFrom(const CMsgTFThankedSomeone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedSomeone::IsInitialized() const {
  
  return true;
}

void CMsgTFThankedSomeone::Swap(CMsgTFThankedSomeone* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFThankedSomeone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFThankedSomeone_descriptor_;
  metadata.reflection = CMsgTFThankedSomeone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFFreeTrialConvertedToPremium::InitAsDefaultInstance() {
}

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(const CMsgTFFreeTrialConvertedToPremium& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFFreeTrialConvertedToPremium::~CMsgTFFreeTrialConvertedToPremium() {
  SharedDtor();
}

void CMsgTFFreeTrialConvertedToPremium::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFFreeTrialConvertedToPremium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialConvertedToPremium::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFFreeTrialConvertedToPremium_descriptor_;
}

const CMsgTFFreeTrialConvertedToPremium& CMsgTFFreeTrialConvertedToPremium::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFFreeTrialConvertedToPremium* CMsgTFFreeTrialConvertedToPremium::default_instance_ = NULL;

CMsgTFFreeTrialConvertedToPremium* CMsgTFFreeTrialConvertedToPremium::New() const {
  return new CMsgTFFreeTrialConvertedToPremium;
}

void CMsgTFFreeTrialConvertedToPremium::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFFreeTrialConvertedToPremium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFFreeTrialConvertedToPremium::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFFreeTrialConvertedToPremium* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFFreeTrialConvertedToPremium*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialConvertedToPremium::IsInitialized() const {
  
  return true;
}

void CMsgTFFreeTrialConvertedToPremium::Swap(CMsgTFFreeTrialConvertedToPremium* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFFreeTrialConvertedToPremium::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFFreeTrialConvertedToPremium_descriptor_;
  metadata.reflection = CMsgTFFreeTrialConvertedToPremium_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSaxxyAwarded::kCategoryFieldNumber;
const int CMsgSaxxyAwarded::kWinnerNamesFieldNumber;
#endif  // !_MSC_VER

CMsgSaxxyAwarded::CMsgSaxxyAwarded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSaxxyAwarded::InitAsDefaultInstance() {
}

CMsgSaxxyAwarded::CMsgSaxxyAwarded(const CMsgSaxxyAwarded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::SharedCtor() {
  _cached_size_ = 0;
  category_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSaxxyAwarded::~CMsgSaxxyAwarded() {
  SharedDtor();
}

void CMsgSaxxyAwarded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSaxxyAwarded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSaxxyAwarded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSaxxyAwarded_descriptor_;
}

const CMsgSaxxyAwarded& CMsgSaxxyAwarded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSaxxyAwarded* CMsgSaxxyAwarded::default_instance_ = NULL;

CMsgSaxxyAwarded* CMsgSaxxyAwarded::New() const {
  return new CMsgSaxxyAwarded;
}

void CMsgSaxxyAwarded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_ = 0u;
  }
  winner_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSaxxyAwarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 category = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_winner_names;
        break;
      }
      
      // repeated string winner_names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winner_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_winner_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winner_names(0).data(), this->winner_names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_winner_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSaxxyAwarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 category = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->category(), output);
  }
  
  // repeated string winner_names = 2;
  for (int i = 0; i < this->winner_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->winner_names(i).data(), this->winner_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->winner_names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSaxxyAwarded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 category = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->category(), target);
  }
  
  // repeated string winner_names = 2;
  for (int i = 0; i < this->winner_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winner_names(i).data(), this->winner_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->winner_names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSaxxyAwarded::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }
    
  }
  // repeated string winner_names = 2;
  total_size += 1 * this->winner_names_size();
  for (int i = 0; i < this->winner_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->winner_names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSaxxyAwarded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSaxxyAwarded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSaxxyAwarded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSaxxyAwarded::MergeFrom(const CMsgSaxxyAwarded& from) {
  GOOGLE_CHECK_NE(&from, this);
  winner_names_.MergeFrom(from.winner_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSaxxyAwarded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::CopyFrom(const CMsgSaxxyAwarded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaxxyAwarded::IsInitialized() const {
  
  return true;
}

void CMsgSaxxyAwarded::Swap(CMsgSaxxyAwarded* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    winner_names_.Swap(&other->winner_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSaxxyAwarded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSaxxyAwarded_descriptor_;
  metadata.reflection = CMsgSaxxyAwarded_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgReplaySubmitContestEntry::_default_youtube_url_;
#ifndef _MSC_VER
const int CMsgReplaySubmitContestEntry::kYoutubeUrlFieldNumber;
const int CMsgReplaySubmitContestEntry::kCategoryFieldNumber;
#endif  // !_MSC_VER

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplaySubmitContestEntry::InitAsDefaultInstance() {
}

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(const CMsgReplaySubmitContestEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::SharedCtor() {
  _cached_size_ = 0;
  youtube_url_ = const_cast< ::std::string*>(&_default_youtube_url_);
  category_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplaySubmitContestEntry::~CMsgReplaySubmitContestEntry() {
  SharedDtor();
}

void CMsgReplaySubmitContestEntry::SharedDtor() {
  if (youtube_url_ != &_default_youtube_url_) {
    delete youtube_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgReplaySubmitContestEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplaySubmitContestEntry_descriptor_;
}

const CMsgReplaySubmitContestEntry& CMsgReplaySubmitContestEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplaySubmitContestEntry* CMsgReplaySubmitContestEntry::default_instance_ = NULL;

CMsgReplaySubmitContestEntry* CMsgReplaySubmitContestEntry::New() const {
  return new CMsgReplaySubmitContestEntry;
}

void CMsgReplaySubmitContestEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (youtube_url_ != &_default_youtube_url_) {
        youtube_url_->clear();
      }
    }
    category_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplaySubmitContestEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string youtube_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_url().data(), this->youtube_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }
      
      // optional uint32 category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplaySubmitContestEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string youtube_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->youtube_url(), output);
  }
  
  // optional uint32 category = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string youtube_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->youtube_url(), target);
  }
  
  // optional uint32 category = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplaySubmitContestEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string youtube_url = 1;
    if (has_youtube_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_url());
    }
    
    // optional uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplaySubmitContestEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntry::MergeFrom(const CMsgReplaySubmitContestEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_youtube_url(from.youtube_url());
    }
    if (from._has_bit(1)) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplaySubmitContestEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::CopyFrom(const CMsgReplaySubmitContestEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntry::IsInitialized() const {
  
  return true;
}

void CMsgReplaySubmitContestEntry::Swap(CMsgReplaySubmitContestEntry* other) {
  if (other != this) {
    std::swap(youtube_url_, other->youtube_url_);
    std::swap(category_, other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplaySubmitContestEntry_descriptor_;
  metadata.reflection = CMsgReplaySubmitContestEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplaySubmitContestEntryResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplaySubmitContestEntryResponse::InitAsDefaultInstance() {
}

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(const CMsgReplaySubmitContestEntryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplaySubmitContestEntryResponse::~CMsgReplaySubmitContestEntryResponse() {
  SharedDtor();
}

void CMsgReplaySubmitContestEntryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReplaySubmitContestEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplaySubmitContestEntryResponse_descriptor_;
}

const CMsgReplaySubmitContestEntryResponse& CMsgReplaySubmitContestEntryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplaySubmitContestEntryResponse* CMsgReplaySubmitContestEntryResponse::default_instance_ = NULL;

CMsgReplaySubmitContestEntryResponse* CMsgReplaySubmitContestEntryResponse::New() const {
  return new CMsgReplaySubmitContestEntryResponse;
}

void CMsgReplaySubmitContestEntryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplaySubmitContestEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplaySubmitContestEntryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplaySubmitContestEntryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const CMsgReplaySubmitContestEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const CMsgReplaySubmitContestEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntryResponse::IsInitialized() const {
  
  return true;
}

void CMsgReplaySubmitContestEntryResponse::Swap(CMsgReplaySubmitContestEntryResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplaySubmitContestEntryResponse_descriptor_;
  metadata.reflection = CMsgReplaySubmitContestEntryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CReplayCachedContestData::kTimestampFieldNumber;
const int CReplayCachedContestData::kNumVotesLastDayFieldNumber;
const int CReplayCachedContestData::kVideoEntryIdsFieldNumber;
const int CReplayCachedContestData::kNumFlagsLastDayFieldNumber;
#endif  // !_MSC_VER

CReplayCachedContestData::CReplayCachedContestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CReplayCachedContestData::InitAsDefaultInstance() {
}

CReplayCachedContestData::CReplayCachedContestData(const CReplayCachedContestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CReplayCachedContestData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  num_votes_last_day_ = 0u;
  num_flags_last_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CReplayCachedContestData::~CReplayCachedContestData() {
  SharedDtor();
}

void CReplayCachedContestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CReplayCachedContestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CReplayCachedContestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CReplayCachedContestData_descriptor_;
}

const CReplayCachedContestData& CReplayCachedContestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CReplayCachedContestData* CReplayCachedContestData::default_instance_ = NULL;

CReplayCachedContestData* CReplayCachedContestData::New() const {
  return new CReplayCachedContestData;
}

void CReplayCachedContestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    num_votes_last_day_ = 0u;
    num_flags_last_day_ = 0u;
  }
  video_entry_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CReplayCachedContestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_votes_last_day;
        break;
      }
      
      // optional uint32 num_votes_last_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_votes_last_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_votes_last_day_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_video_entry_ids;
        break;
      }
      
      // repeated uint32 video_entry_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_entry_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_video_entry_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_video_entry_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_video_entry_ids;
        if (input->ExpectTag(32)) goto parse_num_flags_last_day;
        break;
      }
      
      // optional uint32 num_flags_last_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_flags_last_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_flags_last_day_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CReplayCachedContestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 timestamp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp(), output);
  }
  
  // optional uint32 num_votes_last_day = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_votes_last_day(), output);
  }
  
  // repeated uint32 video_entry_ids = 3;
  for (int i = 0; i < this->video_entry_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->video_entry_ids(i), output);
  }
  
  // optional uint32 num_flags_last_day = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_flags_last_day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CReplayCachedContestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 timestamp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp(), target);
  }
  
  // optional uint32 num_votes_last_day = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_votes_last_day(), target);
  }
  
  // repeated uint32 video_entry_ids = 3;
  for (int i = 0; i < this->video_entry_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->video_entry_ids(i), target);
  }
  
  // optional uint32 num_flags_last_day = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_flags_last_day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CReplayCachedContestData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 num_votes_last_day = 2;
    if (has_num_votes_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_votes_last_day());
    }
    
    // optional uint32 num_flags_last_day = 4;
    if (has_num_flags_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_flags_last_day());
    }
    
  }
  // repeated uint32 video_entry_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_entry_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->video_entry_ids(i));
    }
    total_size += 1 * this->video_entry_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CReplayCachedContestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CReplayCachedContestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CReplayCachedContestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CReplayCachedContestData::MergeFrom(const CReplayCachedContestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  video_entry_ids_.MergeFrom(from.video_entry_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(1)) {
      set_num_votes_last_day(from.num_votes_last_day());
    }
    if (from._has_bit(3)) {
      set_num_flags_last_day(from.num_flags_last_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CReplayCachedContestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReplayCachedContestData::CopyFrom(const CReplayCachedContestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReplayCachedContestData::IsInitialized() const {
  
  return true;
}

void CReplayCachedContestData::Swap(CReplayCachedContestData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(num_votes_last_day_, other->num_votes_last_day_);
    video_entry_ids_.Swap(&other->video_entry_ids_);
    std::swap(num_flags_last_day_, other->num_flags_last_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CReplayCachedContestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CReplayCachedContestData_descriptor_;
  metadata.reflection = CReplayCachedContestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AddToCoaches::InitAsDefaultInstance() {
}

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(const CMsgTFCoaching_AddToCoaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AddToCoaches::~CMsgTFCoaching_AddToCoaches() {
  SharedDtor();
}

void CMsgTFCoaching_AddToCoaches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AddToCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AddToCoaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AddToCoaches_descriptor_;
}

const CMsgTFCoaching_AddToCoaches& CMsgTFCoaching_AddToCoaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AddToCoaches* CMsgTFCoaching_AddToCoaches::default_instance_ = NULL;

CMsgTFCoaching_AddToCoaches* CMsgTFCoaching_AddToCoaches::New() const {
  return new CMsgTFCoaching_AddToCoaches;
}

void CMsgTFCoaching_AddToCoaches::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AddToCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AddToCoaches::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AddToCoaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AddToCoaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const CMsgTFCoaching_AddToCoaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const CMsgTFCoaching_AddToCoaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AddToCoaches::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AddToCoaches::Swap(CMsgTFCoaching_AddToCoaches* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AddToCoaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AddToCoaches_descriptor_;
  metadata.reflection = CMsgTFCoaching_AddToCoaches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_RemoveFromCoaches::InitAsDefaultInstance() {
}

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(const CMsgTFCoaching_RemoveFromCoaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_RemoveFromCoaches::~CMsgTFCoaching_RemoveFromCoaches() {
  SharedDtor();
}

void CMsgTFCoaching_RemoveFromCoaches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_RemoveFromCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveFromCoaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_RemoveFromCoaches_descriptor_;
}

const CMsgTFCoaching_RemoveFromCoaches& CMsgTFCoaching_RemoveFromCoaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_RemoveFromCoaches* CMsgTFCoaching_RemoveFromCoaches::default_instance_ = NULL;

CMsgTFCoaching_RemoveFromCoaches* CMsgTFCoaching_RemoveFromCoaches::New() const {
  return new CMsgTFCoaching_RemoveFromCoaches;
}

void CMsgTFCoaching_RemoveFromCoaches::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_RemoveFromCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_RemoveFromCoaches::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveFromCoaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_RemoveFromCoaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveFromCoaches::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_RemoveFromCoaches::Swap(CMsgTFCoaching_RemoveFromCoaches* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveFromCoaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_RemoveFromCoaches_descriptor_;
  metadata.reflection = CMsgTFCoaching_RemoveFromCoaches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_FindCoach::kAccountIdFriendAsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_FindCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(const CMsgTFCoaching_FindCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_as_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_FindCoach::~CMsgTFCoaching_FindCoach() {
  SharedDtor();
}

void CMsgTFCoaching_FindCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_FindCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_FindCoach_descriptor_;
}

const CMsgTFCoaching_FindCoach& CMsgTFCoaching_FindCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_FindCoach* CMsgTFCoaching_FindCoach::default_instance_ = NULL;

CMsgTFCoaching_FindCoach* CMsgTFCoaching_FindCoach::New() const {
  return new CMsgTFCoaching_FindCoach;
}

void CMsgTFCoaching_FindCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_friend_as_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_FindCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend_as_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_as_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_FindCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_friend_as_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend_as_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_friend_as_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend_as_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_FindCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_friend_as_coach = 1;
    if (has_account_id_friend_as_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_friend_as_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_FindCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoach::MergeFrom(const CMsgTFCoaching_FindCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_friend_as_coach(from.account_id_friend_as_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_FindCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::CopyFrom(const CMsgTFCoaching_FindCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_FindCoach::Swap(CMsgTFCoaching_FindCoach* other) {
  if (other != this) {
    std::swap(account_id_friend_as_coach_, other->account_id_friend_as_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_FindCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_FindCoach_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgTFCoaching_FindCoachResponse::_default_coach_name_;
#ifndef _MSC_VER
const int CMsgTFCoaching_FindCoachResponse::kFoundCoachFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kNumLikesFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kCoachNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_FindCoachResponse::InitAsDefaultInstance() {
}

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(const CMsgTFCoaching_FindCoachResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  found_coach_ = false;
  num_likes_ = 0u;
  coach_name_ = const_cast< ::std::string*>(&_default_coach_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_FindCoachResponse::~CMsgTFCoaching_FindCoachResponse() {
  SharedDtor();
}

void CMsgTFCoaching_FindCoachResponse::SharedDtor() {
  if (coach_name_ != &_default_coach_name_) {
    delete coach_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_FindCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_FindCoachResponse_descriptor_;
}

const CMsgTFCoaching_FindCoachResponse& CMsgTFCoaching_FindCoachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_FindCoachResponse* CMsgTFCoaching_FindCoachResponse::default_instance_ = NULL;

CMsgTFCoaching_FindCoachResponse* CMsgTFCoaching_FindCoachResponse::New() const {
  return new CMsgTFCoaching_FindCoachResponse;
}

void CMsgTFCoaching_FindCoachResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    found_coach_ = false;
    num_likes_ = 0u;
    if (_has_bit(2)) {
      if (coach_name_ != &_default_coach_name_) {
        coach_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_FindCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_likes;
        break;
      }
      
      // optional uint32 num_likes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_likes_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coach_name;
        break;
      }
      
      // optional string coach_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coach_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coach_name().data(), this->coach_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool found_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found_coach(), output);
  }
  
  // optional uint32 num_likes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_likes(), output);
  }
  
  // optional string coach_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coach_name().data(), this->coach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->coach_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool found_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found_coach(), target);
  }
  
  // optional uint32 num_likes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_likes(), target);
  }
  
  // optional string coach_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coach_name().data(), this->coach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->coach_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_FindCoachResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool found_coach = 1;
    if (has_found_coach()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 num_likes = 2;
    if (has_num_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_likes());
    }
    
    // optional string coach_name = 3;
    if (has_coach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coach_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoachResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_FindCoachResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const CMsgTFCoaching_FindCoachResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_found_coach(from.found_coach());
    }
    if (from._has_bit(1)) {
      set_num_likes(from.num_likes());
    }
    if (from._has_bit(2)) {
      set_coach_name(from.coach_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const CMsgTFCoaching_FindCoachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoachResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_FindCoachResponse::Swap(CMsgTFCoaching_FindCoachResponse* other) {
  if (other != this) {
    std::swap(found_coach_, other->found_coach_);
    std::swap(num_likes_, other->num_likes_);
    std::swap(coach_name_, other->coach_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_FindCoachResponse_descriptor_;
  metadata.reflection = CMsgTFCoaching_FindCoachResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_AskCoach::kAccountIdStudentFieldNumber;
const int CMsgTFCoaching_AskCoach::kStudentIsFriendFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AskCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(const CMsgTFCoaching_AskCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_student_ = 0u;
  student_is_friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AskCoach::~CMsgTFCoaching_AskCoach() {
  SharedDtor();
}

void CMsgTFCoaching_AskCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AskCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AskCoach_descriptor_;
}

const CMsgTFCoaching_AskCoach& CMsgTFCoaching_AskCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AskCoach* CMsgTFCoaching_AskCoach::default_instance_ = NULL;

CMsgTFCoaching_AskCoach* CMsgTFCoaching_AskCoach::New() const {
  return new CMsgTFCoaching_AskCoach;
}

void CMsgTFCoaching_AskCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_student_ = 0u;
    student_is_friend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AskCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_student = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_student_is_friend;
        break;
      }
      
      // optional bool student_is_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_student_is_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &student_is_friend_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AskCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_student = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_student(), output);
  }
  
  // optional bool student_is_friend = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->student_is_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_student = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_student(), target);
  }
  
  // optional bool student_is_friend = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->student_is_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AskCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_student = 1;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
    // optional bool student_is_friend = 2;
    if (has_student_is_friend()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AskCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoach::MergeFrom(const CMsgTFCoaching_AskCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_student(from.account_id_student());
    }
    if (from._has_bit(1)) {
      set_student_is_friend(from.student_is_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AskCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::CopyFrom(const CMsgTFCoaching_AskCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AskCoach::Swap(CMsgTFCoaching_AskCoach* other) {
  if (other != this) {
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(student_is_friend_, other->student_is_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AskCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_AskCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_AskCoachResponse::kAcceptCoachingAssignmentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AskCoachResponse::InitAsDefaultInstance() {
}

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(const CMsgTFCoaching_AskCoachResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  accept_coaching_assignment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AskCoachResponse::~CMsgTFCoaching_AskCoachResponse() {
  SharedDtor();
}

void CMsgTFCoaching_AskCoachResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AskCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AskCoachResponse_descriptor_;
}

const CMsgTFCoaching_AskCoachResponse& CMsgTFCoaching_AskCoachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AskCoachResponse* CMsgTFCoaching_AskCoachResponse::default_instance_ = NULL;

CMsgTFCoaching_AskCoachResponse* CMsgTFCoaching_AskCoachResponse::New() const {
  return new CMsgTFCoaching_AskCoachResponse;
}

void CMsgTFCoaching_AskCoachResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_coaching_assignment_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AskCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accept_coaching_assignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_coaching_assignment_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accept_coaching_assignment = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accept_coaching_assignment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool accept_coaching_assignment = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accept_coaching_assignment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AskCoachResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accept_coaching_assignment = 1;
    if (has_accept_coaching_assignment()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoachResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AskCoachResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const CMsgTFCoaching_AskCoachResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accept_coaching_assignment(from.accept_coaching_assignment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const CMsgTFCoaching_AskCoachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoachResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AskCoachResponse::Swap(CMsgTFCoaching_AskCoachResponse* other) {
  if (other != this) {
    std::swap(accept_coaching_assignment_, other->accept_coaching_assignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AskCoachResponse_descriptor_;
  metadata.reflection = CMsgTFCoaching_AskCoachResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoinGame::kJoinGameFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerAddressFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerPortFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kAccountIdStudentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoinGame::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(const CMsgTFCoaching_CoachJoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::SharedCtor() {
  _cached_size_ = 0;
  join_game_ = false;
  server_address_ = 0u;
  server_port_ = 0u;
  account_id_student_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoinGame::~CMsgTFCoaching_CoachJoinGame() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoinGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoinGame_descriptor_;
}

const CMsgTFCoaching_CoachJoinGame& CMsgTFCoaching_CoachJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoinGame* CMsgTFCoaching_CoachJoinGame::default_instance_ = NULL;

CMsgTFCoaching_CoachJoinGame* CMsgTFCoaching_CoachJoinGame::New() const {
  return new CMsgTFCoaching_CoachJoinGame;
}

void CMsgTFCoaching_CoachJoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    join_game_ = false;
    server_address_ = 0u;
    server_port_ = 0u;
    account_id_student_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool join_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_game_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_address;
        break;
      }
      
      // optional uint32 server_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_id_student;
        break;
      }
      
      // optional uint32 account_id_student = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_student:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool join_game = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->join_game(), output);
  }
  
  // optional uint32 server_address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_address(), output);
  }
  
  // optional uint32 server_port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }
  
  // optional uint32 account_id_student = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id_student(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool join_game = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->join_game(), target);
  }
  
  // optional uint32 server_address = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_address(), target);
  }
  
  // optional uint32 server_port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }
  
  // optional uint32 account_id_student = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id_student(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoinGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool join_game = 1;
    if (has_join_game()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 server_address = 2;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 account_id_student = 4;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const CMsgTFCoaching_CoachJoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_join_game(from.join_game());
    }
    if (from._has_bit(1)) {
      set_server_address(from.server_address());
    }
    if (from._has_bit(2)) {
      set_server_port(from.server_port());
    }
    if (from._has_bit(3)) {
      set_account_id_student(from.account_id_student());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const CMsgTFCoaching_CoachJoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoinGame::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoinGame::Swap(CMsgTFCoaching_CoachJoinGame* other) {
  if (other != this) {
    std::swap(join_game_, other->join_game_);
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoinGame_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoining::kAccountIdCoachFieldNumber;
const int CMsgTFCoaching_CoachJoining::kAccountIdStudentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoining::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(const CMsgTFCoaching_CoachJoining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  account_id_student_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoining::~CMsgTFCoaching_CoachJoining() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoining_descriptor_;
}

const CMsgTFCoaching_CoachJoining& CMsgTFCoaching_CoachJoining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoining* CMsgTFCoaching_CoachJoining::default_instance_ = NULL;

CMsgTFCoaching_CoachJoining* CMsgTFCoaching_CoachJoining::New() const {
  return new CMsgTFCoaching_CoachJoining;
}

void CMsgTFCoaching_CoachJoining::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
    account_id_student_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id_student;
        break;
      }
      
      // optional uint32 account_id_student = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_student:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  // optional uint32 account_id_student = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_student(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  // optional uint32 account_id_student = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_student(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoining::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
    // optional uint32 account_id_student = 2;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const CMsgTFCoaching_CoachJoining& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_coach(from.account_id_coach());
    }
    if (from._has_bit(1)) {
      set_account_id_student(from.account_id_student());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const CMsgTFCoaching_CoachJoining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoining::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoining::Swap(CMsgTFCoaching_CoachJoining* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoining_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoining_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoined::kAccountIdCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoined::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(const CMsgTFCoaching_CoachJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoined::~CMsgTFCoaching_CoachJoined() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoined_descriptor_;
}

const CMsgTFCoaching_CoachJoined& CMsgTFCoaching_CoachJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoined* CMsgTFCoaching_CoachJoined::default_instance_ = NULL;

CMsgTFCoaching_CoachJoined* CMsgTFCoaching_CoachJoined::New() const {
  return new CMsgTFCoaching_CoachJoined;
}

void CMsgTFCoaching_CoachJoined::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoined::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const CMsgTFCoaching_CoachJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_coach(from.account_id_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const CMsgTFCoaching_CoachJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoined::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoined::Swap(CMsgTFCoaching_CoachJoined* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoined_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_LikeCurrentCoach::kLikeCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_LikeCurrentCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(const CMsgTFCoaching_LikeCurrentCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  like_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_LikeCurrentCoach::~CMsgTFCoaching_LikeCurrentCoach() {
  SharedDtor();
}

void CMsgTFCoaching_LikeCurrentCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_LikeCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_LikeCurrentCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_LikeCurrentCoach_descriptor_;
}

const CMsgTFCoaching_LikeCurrentCoach& CMsgTFCoaching_LikeCurrentCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_LikeCurrentCoach* CMsgTFCoaching_LikeCurrentCoach::default_instance_ = NULL;

CMsgTFCoaching_LikeCurrentCoach* CMsgTFCoaching_LikeCurrentCoach::New() const {
  return new CMsgTFCoaching_LikeCurrentCoach;
}

void CMsgTFCoaching_LikeCurrentCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    like_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_LikeCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool like_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &like_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool like_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->like_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool like_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->like_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_LikeCurrentCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool like_coach = 1;
    if (has_like_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_LikeCurrentCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_LikeCurrentCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_like_coach(from.like_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_LikeCurrentCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_LikeCurrentCoach::Swap(CMsgTFCoaching_LikeCurrentCoach* other) {
  if (other != this) {
    std::swap(like_coach_, other->like_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_LikeCurrentCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_LikeCurrentCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_LikeCurrentCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_RemoveCurrentCoach::kAccountIdCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_RemoveCurrentCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(const CMsgTFCoaching_RemoveCurrentCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_RemoveCurrentCoach::~CMsgTFCoaching_RemoveCurrentCoach() {
  SharedDtor();
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveCurrentCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_RemoveCurrentCoach_descriptor_;
}

const CMsgTFCoaching_RemoveCurrentCoach& CMsgTFCoaching_RemoveCurrentCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_RemoveCurrentCoach* CMsgTFCoaching_RemoveCurrentCoach::default_instance_ = NULL;

CMsgTFCoaching_RemoveCurrentCoach* CMsgTFCoaching_RemoveCurrentCoach::New() const {
  return new CMsgTFCoaching_RemoveCurrentCoach;
}

void CMsgTFCoaching_RemoveCurrentCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_RemoveCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_RemoveCurrentCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveCurrentCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_RemoveCurrentCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_coach(from.account_id_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveCurrentCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_RemoveCurrentCoach::Swap(CMsgTFCoaching_RemoveCurrentCoach* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveCurrentCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_RemoveCurrentCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_RemoveCurrentCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kNumUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kSteamIdFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kMaxUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kUserScoreFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(const CMsgTFQuickplay_ScoreServers_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_address_ = 0u;
  server_port_ = 0u;
  num_users_ = 0u;
  steam_id_ = GOOGLE_ULONGLONG(0);
  max_users_ = 0u;
  user_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServers_ServerInfo::~CMsgTFQuickplay_ScoreServers_ServerInfo() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_;
}

const CMsgTFQuickplay_ScoreServers_ServerInfo& CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers_ServerInfo::New() const {
  return new CMsgTFQuickplay_ScoreServers_ServerInfo;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_address_ = 0u;
    server_port_ = 0u;
    num_users_ = 0u;
    steam_id_ = GOOGLE_ULONGLONG(0);
    max_users_ = 0u;
    user_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_users;
        break;
      }
      
      // optional uint32 num_users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_users_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steam_id;
        break;
      }
      
      // optional uint64 steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_users;
        break;
      }
      
      // optional uint32 max_users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_user_score;
        break;
      }
      
      // optional float user_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_score_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }
  
  // optional uint32 server_port = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }
  
  // optional uint32 num_users = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_users(), output);
  }
  
  // optional uint64 steam_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }
  
  // optional uint32 max_users = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_users(), output);
  }
  
  // optional float user_score = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->user_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_address = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }
  
  // optional uint32 server_port = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }
  
  // optional uint32 num_users = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_users(), target);
  }
  
  // optional uint64 steam_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }
  
  // optional uint32 max_users = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_users(), target);
  }
  
  // optional float user_score = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->user_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServers_ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 num_users = 3;
    if (has_num_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_users());
    }
    
    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }
    
    // optional uint32 max_users = 5;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }
    
    // optional float user_score = 6;
    if (has_user_score()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServers_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_server_address(from.server_address());
    }
    if (from._has_bit(1)) {
      set_server_port(from.server_port());
    }
    if (from._has_bit(2)) {
      set_num_users(from.num_users());
    }
    if (from._has_bit(3)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(4)) {
      set_max_users(from.max_users());
    }
    if (from._has_bit(5)) {
      set_user_score(from.user_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Swap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
  if (other != this) {
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(num_users_, other->num_users_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(max_users_, other->max_users_);
    std::swap(user_score_, other->user_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServers::kServersFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServers::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(const CMsgTFQuickplay_ScoreServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServers::~CMsgTFQuickplay_ScoreServers() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServers_descriptor_;
}

const CMsgTFQuickplay_ScoreServers& CMsgTFQuickplay_ScoreServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServers* CMsgTFQuickplay_ScoreServers::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServers* CMsgTFQuickplay_ScoreServers::New() const {
  return new CMsgTFQuickplay_ScoreServers;
}

void CMsgTFQuickplay_ScoreServers::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServers::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const CMsgTFQuickplay_ScoreServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const CMsgTFQuickplay_ScoreServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServers::Swap(CMsgTFQuickplay_ScoreServers* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServers_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kTotalScoreFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kSteamIdFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kOptionsScoreFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_address_ = 0u;
  server_port_ = 0u;
  total_score_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  options_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::~CMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_;
}

const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::New() const {
  return new CMsgTFQuickplay_ScoreServersResponse_ServerInfo;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_address_ = 0u;
    server_port_ = 0u;
    total_score_ = 0;
    steam_id_ = GOOGLE_ULONGLONG(0);
    options_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_total_score;
        break;
      }
      
      // optional float total_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_score_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steam_id;
        break;
      }
      
      // optional uint64 steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_options_score;
        break;
      }
      
      // optional uint32 options_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_options_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &options_score_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }
  
  // optional uint32 server_port = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }
  
  // optional float total_score = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total_score(), output);
  }
  
  // optional uint64 steam_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }
  
  // optional uint32 options_score = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->options_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_address = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }
  
  // optional uint32 server_port = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }
  
  // optional float total_score = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total_score(), target);
  }
  
  // optional uint64 steam_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }
  
  // optional uint32 options_score = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->options_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional float total_score = 3;
    if (has_total_score()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }
    
    // optional uint32 options_score = 5;
    if (has_options_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->options_score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServersResponse_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_server_address(from.server_address());
    }
    if (from._has_bit(1)) {
      set_server_port(from.server_port());
    }
    if (from._has_bit(2)) {
      set_total_score(from.total_score());
    }
    if (from._has_bit(3)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(4)) {
      set_options_score(from.options_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Swap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
  if (other != this) {
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(total_score_, other->total_score_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(options_score_, other->options_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServersResponse::kServersFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServersResponse::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(const CMsgTFQuickplay_ScoreServersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServersResponse::~CMsgTFQuickplay_ScoreServersResponse() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServersResponse_descriptor_;
}

const CMsgTFQuickplay_ScoreServersResponse& CMsgTFQuickplay_ScoreServersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServersResponse* CMsgTFQuickplay_ScoreServersResponse::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServersResponse* CMsgTFQuickplay_ScoreServersResponse::New() const {
  return new CMsgTFQuickplay_ScoreServersResponse;
}

void CMsgTFQuickplay_ScoreServersResponse::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse::Swap(CMsgTFQuickplay_ScoreServersResponse* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServersResponse_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_PlayerJoining::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_PlayerJoining::InitAsDefaultInstance() {
}

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(const CMsgTFQuickplay_PlayerJoining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_PlayerJoining::~CMsgTFQuickplay_PlayerJoining() {
  SharedDtor();
}

void CMsgTFQuickplay_PlayerJoining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_PlayerJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_PlayerJoining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_PlayerJoining_descriptor_;
}

const CMsgTFQuickplay_PlayerJoining& CMsgTFQuickplay_PlayerJoining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_PlayerJoining* CMsgTFQuickplay_PlayerJoining::default_instance_ = NULL;

CMsgTFQuickplay_PlayerJoining* CMsgTFQuickplay_PlayerJoining::New() const {
  return new CMsgTFQuickplay_PlayerJoining;
}

void CMsgTFQuickplay_PlayerJoining::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_PlayerJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_PlayerJoining::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_PlayerJoining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_PlayerJoining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const CMsgTFQuickplay_PlayerJoining& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const CMsgTFQuickplay_PlayerJoining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_PlayerJoining::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_PlayerJoining::Swap(CMsgTFQuickplay_PlayerJoining* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_PlayerJoining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_PlayerJoining_descriptor_;
  metadata.reflection = CMsgTFQuickplay_PlayerJoining_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_LevelInfo::_default_level_name_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_LevelInfo::kLevelLoadedFieldNumber;
const int CMsgGC_GameServer_LevelInfo::kLevelNameFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_LevelInfo::InitAsDefaultInstance() {
}

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(const CMsgGC_GameServer_LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_loaded_ = false;
  level_name_ = const_cast< ::std::string*>(&_default_level_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_LevelInfo::~CMsgGC_GameServer_LevelInfo() {
  SharedDtor();
}

void CMsgGC_GameServer_LevelInfo::SharedDtor() {
  if (level_name_ != &_default_level_name_) {
    delete level_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_LevelInfo_descriptor_;
}

const CMsgGC_GameServer_LevelInfo& CMsgGC_GameServer_LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_LevelInfo* CMsgGC_GameServer_LevelInfo::default_instance_ = NULL;

CMsgGC_GameServer_LevelInfo* CMsgGC_GameServer_LevelInfo::New() const {
  return new CMsgGC_GameServer_LevelInfo;
}

void CMsgGC_GameServer_LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_loaded_ = false;
    if (_has_bit(1)) {
      if (level_name_ != &_default_level_name_) {
        level_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool level_loaded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &level_loaded_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_name;
        break;
      }
      
      // optional string level_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->level_name().data(), this->level_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool level_loaded = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->level_loaded(), output);
  }
  
  // optional string level_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level_name().data(), this->level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->level_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool level_loaded = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->level_loaded(), target);
  }
  
  // optional string level_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level_name().data(), this->level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_LevelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool level_loaded = 1;
    if (has_level_loaded()) {
      total_size += 1 + 1;
    }
    
    // optional string level_name = 2;
    if (has_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const CMsgGC_GameServer_LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level_loaded(from.level_loaded());
    }
    if (from._has_bit(1)) {
      set_level_name(from.level_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const CMsgGC_GameServer_LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_LevelInfo::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_LevelInfo::Swap(CMsgGC_GameServer_LevelInfo* other) {
  if (other != this) {
    std::swap(level_loaded_, other->level_loaded_);
    std::swap(level_name_, other->level_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_LevelInfo_descriptor_;
  metadata.reflection = CMsgGC_GameServer_LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_AuthChallenge::_default_challenge_string_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthChallenge::kChallengeStringFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthChallenge::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(const CMsgGC_GameServer_AuthChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  challenge_string_ = const_cast< ::std::string*>(&_default_challenge_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthChallenge::~CMsgGC_GameServer_AuthChallenge() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallenge::SharedDtor() {
  if (challenge_string_ != &_default_challenge_string_) {
    delete challenge_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthChallenge_descriptor_;
}

const CMsgGC_GameServer_AuthChallenge& CMsgGC_GameServer_AuthChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthChallenge* CMsgGC_GameServer_AuthChallenge::default_instance_ = NULL;

CMsgGC_GameServer_AuthChallenge* CMsgGC_GameServer_AuthChallenge::New() const {
  return new CMsgGC_GameServer_AuthChallenge;
}

void CMsgGC_GameServer_AuthChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (challenge_string_ != &_default_challenge_string_) {
        challenge_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string challenge_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenge_string().data(), this->challenge_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string challenge_string = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenge_string().data(), this->challenge_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->challenge_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string challenge_string = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenge_string().data(), this->challenge_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->challenge_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthChallenge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string challenge_string = 1;
    if (has_challenge_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenge_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const CMsgGC_GameServer_AuthChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_challenge_string(from.challenge_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const CMsgGC_GameServer_AuthChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallenge::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthChallenge::Swap(CMsgGC_GameServer_AuthChallenge* other) {
  if (other != this) {
    std::swap(challenge_string_, other->challenge_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthChallenge_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthChallenge_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_AuthResult::_default_message_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthResult::kAuthenticatedFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingTrendFieldNumber;
const int CMsgGC_GameServer_AuthResult::kIsValveServerFieldNumber;
const int CMsgGC_GameServer_AuthResult::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthResult::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(const CMsgGC_GameServer_AuthResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::SharedCtor() {
  _cached_size_ = 0;
  authenticated_ = false;
  game_server_standing_ = 0;
  game_server_standing_trend_ = 0;
  is_valve_server_ = false;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthResult::~CMsgGC_GameServer_AuthResult() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthResult::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthResult_descriptor_;
}

const CMsgGC_GameServer_AuthResult& CMsgGC_GameServer_AuthResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthResult* CMsgGC_GameServer_AuthResult::default_instance_ = NULL;

CMsgGC_GameServer_AuthResult* CMsgGC_GameServer_AuthResult::New() const {
  return new CMsgGC_GameServer_AuthResult;
}

void CMsgGC_GameServer_AuthResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    authenticated_ = false;
    game_server_standing_ = 0;
    game_server_standing_trend_ = 0;
    is_valve_server_ = false;
    if (_has_bit(4)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool authenticated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_standing;
        break;
      }
      
      // optional int32 game_server_standing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_standing_trend;
        break;
      }
      
      // optional int32 game_server_standing_trend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing_trend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_valve_server;
        break;
      }
      
      // optional bool is_valve_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valve_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valve_server_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }
      
      // optional string message = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool authenticated = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }
  
  // optional int32 game_server_standing = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_server_standing(), output);
  }
  
  // optional int32 game_server_standing_trend = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing_trend(), output);
  }
  
  // optional bool is_valve_server = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_valve_server(), output);
  }
  
  // optional string message = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool authenticated = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }
  
  // optional int32 game_server_standing = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_server_standing(), target);
  }
  
  // optional int32 game_server_standing_trend = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing_trend(), target);
  }
  
  // optional bool is_valve_server = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_valve_server(), target);
  }
  
  // optional string message = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool authenticated = 1;
    if (has_authenticated()) {
      total_size += 1 + 1;
    }
    
    // optional int32 game_server_standing = 2;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }
    
    // optional int32 game_server_standing_trend = 3;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }
    
    // optional bool is_valve_server = 4;
    if (has_is_valve_server()) {
      total_size += 1 + 1;
    }
    
    // optional string message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const CMsgGC_GameServer_AuthResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_authenticated(from.authenticated());
    }
    if (from._has_bit(1)) {
      set_game_server_standing(from.game_server_standing());
    }
    if (from._has_bit(2)) {
      set_game_server_standing_trend(from.game_server_standing_trend());
    }
    if (from._has_bit(3)) {
      set_is_valve_server(from.is_valve_server());
    }
    if (from._has_bit(4)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const CMsgGC_GameServer_AuthResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthResult::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthResult::Swap(CMsgGC_GameServer_AuthResult* other) {
  if (other != this) {
    std::swap(authenticated_, other->authenticated_);
    std::swap(game_server_standing_, other->game_server_standing_);
    std::swap(game_server_standing_trend_, other->game_server_standing_trend_);
    std::swap(is_valve_server_, other->is_valve_server_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthResult_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthResult_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_AuthChallengeResponse::_default_hashed_challenge_string_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthChallengeResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_AuthChallengeResponse::kHashedChallengeStringFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthChallengeResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(const CMsgGC_GameServer_AuthChallengeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  hashed_challenge_string_ = const_cast< ::std::string*>(&_default_hashed_challenge_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthChallengeResponse::~CMsgGC_GameServer_AuthChallengeResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedDtor() {
  if (hashed_challenge_string_ != &_default_hashed_challenge_string_) {
    delete hashed_challenge_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthChallengeResponse_descriptor_;
}

const CMsgGC_GameServer_AuthChallengeResponse& CMsgGC_GameServer_AuthChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthChallengeResponse* CMsgGC_GameServer_AuthChallengeResponse::default_instance_ = NULL;

CMsgGC_GameServer_AuthChallengeResponse* CMsgGC_GameServer_AuthChallengeResponse::New() const {
  return new CMsgGC_GameServer_AuthChallengeResponse;
}

void CMsgGC_GameServer_AuthChallengeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
    if (_has_bit(1)) {
      if (hashed_challenge_string_ != &_default_hashed_challenge_string_) {
        hashed_challenge_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hashed_challenge_string;
        break;
      }
      
      // optional bytes hashed_challenge_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_challenge_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_challenge_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  // optional bytes hashed_challenge_string = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hashed_challenge_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  // optional bytes hashed_challenge_string = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hashed_challenge_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthChallengeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional bytes hashed_challenge_string = 2;
    if (has_hashed_challenge_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_challenge_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallengeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthChallengeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from._has_bit(1)) {
      set_hashed_challenge_string(from.hashed_challenge_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallengeResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthChallengeResponse::Swap(CMsgGC_GameServer_AuthChallengeResponse* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(hashed_challenge_string_, other->hashed_challenge_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthChallengeResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthChallengeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_CreateIdentity::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_CreateIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(const CMsgGC_GameServer_CreateIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_CreateIdentity::~CMsgGC_GameServer_CreateIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_CreateIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentity_descriptor_;
}

const CMsgGC_GameServer_CreateIdentity& CMsgGC_GameServer_CreateIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_CreateIdentity* CMsgGC_GameServer_CreateIdentity::default_instance_ = NULL;

CMsgGC_GameServer_CreateIdentity* CMsgGC_GameServer_CreateIdentity::New() const {
  return new CMsgGC_GameServer_CreateIdentity;
}

void CMsgGC_GameServer_CreateIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_CreateIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_CreateIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_CreateIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const CMsgGC_GameServer_CreateIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const CMsgGC_GameServer_CreateIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_CreateIdentity::Swap(CMsgGC_GameServer_CreateIdentity* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_CreateIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_CreateIdentity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_;
}
bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_GenericFailure;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_TooMany;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_NoPrivs;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_Created;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MIN;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MAX;
const int CMsgGC_GameServer_CreateIdentityResponse::EStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CMsgGC_GameServer_CreateIdentityResponse::_default_game_server_identity_token_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_CreateIdentityResponse::kAccountCreatedFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_CreateIdentityResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(const CMsgGC_GameServer_CreateIdentityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  account_created_ = false;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&_default_game_server_identity_token_);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_CreateIdentityResponse::~CMsgGC_GameServer_CreateIdentityResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedDtor() {
  if (game_server_identity_token_ != &_default_game_server_identity_token_) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentityResponse_descriptor_;
}

const CMsgGC_GameServer_CreateIdentityResponse& CMsgGC_GameServer_CreateIdentityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_CreateIdentityResponse* CMsgGC_GameServer_CreateIdentityResponse::default_instance_ = NULL;

CMsgGC_GameServer_CreateIdentityResponse* CMsgGC_GameServer_CreateIdentityResponse::New() const {
  return new CMsgGC_GameServer_CreateIdentityResponse;
}

void CMsgGC_GameServer_CreateIdentityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_created_ = false;
    game_server_account_id_ = 0u;
    if (_has_bit(2)) {
      if (game_server_identity_token_ != &_default_game_server_identity_token_) {
        game_server_identity_token_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_CreateIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool account_created = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_created_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_account_id;
        break;
      }
      
      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional string game_server_identity_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(value)) {
            set_status(static_cast< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool account_created = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->account_created(), output);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }
  
  // optional string game_server_identity_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->game_server_identity_token(), output);
  }
  
  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool account_created = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->account_created(), target);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }
  
  // optional string game_server_identity_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }
  
  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_CreateIdentityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool account_created = 1;
    if (has_account_created()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
    // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_CreateIdentityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_created(from.account_created());
    }
    if (from._has_bit(1)) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from._has_bit(2)) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
    if (from._has_bit(3)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentityResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_CreateIdentityResponse::Swap(CMsgGC_GameServer_CreateIdentityResponse* other) {
  if (other != this) {
    std::swap(account_created_, other->account_created_);
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_CreateIdentityResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_CreateIdentityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_List::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_List::CMsgGC_GameServer_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_List::InitAsDefaultInstance() {
}

CMsgGC_GameServer_List::CMsgGC_GameServer_List(const CMsgGC_GameServer_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_List::~CMsgGC_GameServer_List() {
  SharedDtor();
}

void CMsgGC_GameServer_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_List_descriptor_;
}

const CMsgGC_GameServer_List& CMsgGC_GameServer_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_List* CMsgGC_GameServer_List::default_instance_ = NULL;

CMsgGC_GameServer_List* CMsgGC_GameServer_List::New() const {
  return new CMsgGC_GameServer_List;
}

void CMsgGC_GameServer_List::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_List::MergeFrom(const CMsgGC_GameServer_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::CopyFrom(const CMsgGC_GameServer_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_List::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_List::Swap(CMsgGC_GameServer_List* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_List_descriptor_;
  metadata.reflection = CMsgGC_GameServer_List_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_ListResponse_GameServerIdentity::_default_game_server_identity_token_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingTrendFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&_default_game_server_identity_token_);
  game_server_standing_ = 0;
  game_server_standing_trend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::~CMsgGC_GameServer_ListResponse_GameServerIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedDtor() {
  if (game_server_identity_token_ != &_default_game_server_identity_token_) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_GameServerIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_;
}

const CMsgGC_GameServer_ListResponse_GameServerIdentity& CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_ = NULL;

CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse_GameServerIdentity::New() const {
  return new CMsgGC_GameServer_ListResponse_GameServerIdentity;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
    if (_has_bit(1)) {
      if (game_server_identity_token_ != &_default_game_server_identity_token_) {
        game_server_identity_token_->clear();
      }
    }
    game_server_standing_ = 0;
    game_server_standing_trend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional string game_server_identity_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_standing;
        break;
      }
      
      // optional int32 game_server_standing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_standing_trend;
        break;
      }
      
      // optional int32 game_server_standing_trend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing_trend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  // optional string game_server_identity_token = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_server_identity_token(), output);
  }
  
  // optional int32 game_server_standing = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing(), output);
  }
  
  // optional int32 game_server_standing_trend = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_server_standing_trend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  // optional string game_server_identity_token = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_server_identity_token(), target);
  }
  
  // optional int32 game_server_standing = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing(), target);
  }
  
  // optional int32 game_server_standing_trend = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_server_standing_trend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ListResponse_GameServerIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional string game_server_identity_token = 2;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
    // optional int32 game_server_standing = 3;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }
    
    // optional int32 game_server_standing_trend = 4;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse_GameServerIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ListResponse_GameServerIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from._has_bit(1)) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
    if (from._has_bit(2)) {
      set_game_server_standing(from.game_server_standing());
    }
    if (from._has_bit(3)) {
      set_game_server_standing_trend(from.game_server_standing_trend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Swap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(game_server_standing_, other->game_server_standing_);
    std::swap(game_server_standing_trend_, other->game_server_standing_trend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse_GameServerIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGC_GameServer_ListResponse::kOwnedGameServersFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ListResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(const CMsgGC_GameServer_ListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ListResponse::~CMsgGC_GameServer_ListResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ListResponse_descriptor_;
}

const CMsgGC_GameServer_ListResponse& CMsgGC_GameServer_ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ListResponse* CMsgGC_GameServer_ListResponse::default_instance_ = NULL;

CMsgGC_GameServer_ListResponse* CMsgGC_GameServer_ListResponse::New() const {
  return new CMsgGC_GameServer_ListResponse;
}

void CMsgGC_GameServer_ListResponse::Clear() {
  owned_game_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owned_game_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_owned_game_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_owned_game_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owned_game_servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owned_game_servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ListResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  total_size += 1 * this->owned_game_servers_size();
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->owned_game_servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const CMsgGC_GameServer_ListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  owned_game_servers_.MergeFrom(from.owned_game_servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const CMsgGC_GameServer_ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ListResponse::Swap(CMsgGC_GameServer_ListResponse* other) {
  if (other != this) {
    owned_game_servers_.Swap(&other->owned_game_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ListResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ResetIdentity::kGameServerAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ResetIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(const CMsgGC_GameServer_ResetIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ResetIdentity::~CMsgGC_GameServer_ResetIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ResetIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ResetIdentity_descriptor_;
}

const CMsgGC_GameServer_ResetIdentity& CMsgGC_GameServer_ResetIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ResetIdentity* CMsgGC_GameServer_ResetIdentity::default_instance_ = NULL;

CMsgGC_GameServer_ResetIdentity* CMsgGC_GameServer_ResetIdentity::New() const {
  return new CMsgGC_GameServer_ResetIdentity;
}

void CMsgGC_GameServer_ResetIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ResetIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ResetIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ResetIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const CMsgGC_GameServer_ResetIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_server_account_id(from.game_server_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const CMsgGC_GameServer_ResetIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ResetIdentity::Swap(CMsgGC_GameServer_ResetIdentity* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ResetIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ResetIdentity_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_ResetIdentityResponse::_default_game_server_identity_token_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenResetFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ResetIdentityResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(const CMsgGC_GameServer_ResetIdentityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_identity_token_reset_ = false;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&_default_game_server_identity_token_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ResetIdentityResponse::~CMsgGC_GameServer_ResetIdentityResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedDtor() {
  if (game_server_identity_token_ != &_default_game_server_identity_token_) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ResetIdentityResponse_descriptor_;
}

const CMsgGC_GameServer_ResetIdentityResponse& CMsgGC_GameServer_ResetIdentityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ResetIdentityResponse* CMsgGC_GameServer_ResetIdentityResponse::default_instance_ = NULL;

CMsgGC_GameServer_ResetIdentityResponse* CMsgGC_GameServer_ResetIdentityResponse::New() const {
  return new CMsgGC_GameServer_ResetIdentityResponse;
}

void CMsgGC_GameServer_ResetIdentityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_identity_token_reset_ = false;
    game_server_account_id_ = 0u;
    if (_has_bit(2)) {
      if (game_server_identity_token_ != &_default_game_server_identity_token_) {
        game_server_identity_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ResetIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool game_server_identity_token_reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_server_identity_token_reset_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_account_id;
        break;
      }
      
      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional string game_server_identity_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool game_server_identity_token_reset = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->game_server_identity_token_reset(), output);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }
  
  // optional string game_server_identity_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->game_server_identity_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool game_server_identity_token_reset = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->game_server_identity_token_reset(), target);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }
  
  // optional string game_server_identity_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ResetIdentityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool game_server_identity_token_reset = 1;
    if (has_game_server_identity_token_reset()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ResetIdentityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_server_identity_token_reset(from.game_server_identity_token_reset());
    }
    if (from._has_bit(1)) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from._has_bit(2)) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentityResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ResetIdentityResponse::Swap(CMsgGC_GameServer_ResetIdentityResponse* other) {
  if (other != this) {
    std::swap(game_server_identity_token_reset_, other->game_server_identity_token_reset_);
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ResetIdentityResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ResetIdentityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AckPolicy::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy(const CMsgGC_GameServer_AckPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AckPolicy::~CMsgGC_GameServer_AckPolicy() {
  SharedDtor();
}

void CMsgGC_GameServer_AckPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AckPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AckPolicy_descriptor_;
}

const CMsgGC_GameServer_AckPolicy& CMsgGC_GameServer_AckPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AckPolicy* CMsgGC_GameServer_AckPolicy::default_instance_ = NULL;

CMsgGC_GameServer_AckPolicy* CMsgGC_GameServer_AckPolicy::New() const {
  return new CMsgGC_GameServer_AckPolicy;
}

void CMsgGC_GameServer_AckPolicy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AckPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AckPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AckPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AckPolicy::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AckPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const CMsgGC_GameServer_AckPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const CMsgGC_GameServer_AckPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicy::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AckPolicy::Swap(CMsgGC_GameServer_AckPolicy* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AckPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AckPolicy_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AckPolicy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGC_GameServer_AckPolicyResponse::_default_message_;
#ifndef _MSC_VER
const int CMsgGC_GameServer_AckPolicyResponse::kResultFieldNumber;
const int CMsgGC_GameServer_AckPolicyResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AckPolicyResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse(const CMsgGC_GameServer_AckPolicyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AckPolicyResponse::~CMsgGC_GameServer_AckPolicyResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_AckPolicyResponse::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AckPolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AckPolicyResponse_descriptor_;
}

const CMsgGC_GameServer_AckPolicyResponse& CMsgGC_GameServer_AckPolicyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AckPolicyResponse* CMsgGC_GameServer_AckPolicyResponse::default_instance_ = NULL;

CMsgGC_GameServer_AckPolicyResponse* CMsgGC_GameServer_AckPolicyResponse::New() const {
  return new CMsgGC_GameServer_AckPolicyResponse;
}

void CMsgGC_GameServer_AckPolicyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AckPolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AckPolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AckPolicyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AckPolicyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AckPolicyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicyResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AckPolicyResponse::Swap(CMsgGC_GameServer_AckPolicyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AckPolicyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AckPolicyResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AckPolicyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Client_UseServerModificationItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Client_UseServerModificationItem::InitAsDefaultInstance() {
}

CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem(const CMsgGC_Client_UseServerModificationItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Client_UseServerModificationItem::~CMsgGC_Client_UseServerModificationItem() {
  SharedDtor();
}

void CMsgGC_Client_UseServerModificationItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Client_UseServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Client_UseServerModificationItem_descriptor_;
}

const CMsgGC_Client_UseServerModificationItem& CMsgGC_Client_UseServerModificationItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Client_UseServerModificationItem* CMsgGC_Client_UseServerModificationItem::default_instance_ = NULL;

CMsgGC_Client_UseServerModificationItem* CMsgGC_Client_UseServerModificationItem::New() const {
  return new CMsgGC_Client_UseServerModificationItem;
}

void CMsgGC_Client_UseServerModificationItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Client_UseServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Client_UseServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Client_UseServerModificationItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Client_UseServerModificationItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Client_UseServerModificationItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const CMsgGC_Client_UseServerModificationItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const CMsgGC_Client_UseServerModificationItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem::IsInitialized() const {
  
  return true;
}

void CMsgGC_Client_UseServerModificationItem::Swap(CMsgGC_Client_UseServerModificationItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Client_UseServerModificationItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Client_UseServerModificationItem_descriptor_;
  metadata.reflection = CMsgGC_Client_UseServerModificationItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor_;
}
bool CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_AlreadyInUse;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_NotOnAuthenticatedServer;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_ServerReject;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_InternalError;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_EventAlreadyActive;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MIN;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MAX;
const int CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGC_Client_UseServerModificationItem_Response::kResponseCodeFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Client_UseServerModificationItem_Response::InitAsDefaultInstance() {
}

CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response(const CMsgGC_Client_UseServerModificationItem_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedCtor() {
  _cached_size_ = 0;
  response_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Client_UseServerModificationItem_Response::~CMsgGC_Client_UseServerModificationItem_Response() {
  SharedDtor();
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Client_UseServerModificationItem_Response_descriptor_;
}

const CMsgGC_Client_UseServerModificationItem_Response& CMsgGC_Client_UseServerModificationItem_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Client_UseServerModificationItem_Response* CMsgGC_Client_UseServerModificationItem_Response::default_instance_ = NULL;

CMsgGC_Client_UseServerModificationItem_Response* CMsgGC_Client_UseServerModificationItem_Response::New() const {
  return new CMsgGC_Client_UseServerModificationItem_Response;
}

void CMsgGC_Client_UseServerModificationItem_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_code_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Client_UseServerModificationItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(value)) {
            set_response_code(static_cast< ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Client_UseServerModificationItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Client_UseServerModificationItem_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Client_UseServerModificationItem_Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Client_UseServerModificationItem_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_response_code(from.response_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem_Response::IsInitialized() const {
  
  return true;
}

void CMsgGC_Client_UseServerModificationItem_Response::Swap(CMsgGC_Client_UseServerModificationItem_Response* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Client_UseServerModificationItem_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Client_UseServerModificationItem_Response_descriptor_;
  metadata.reflection = CMsgGC_Client_UseServerModificationItem_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_UseServerModificationItem::kModificationTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_UseServerModificationItem::InitAsDefaultInstance() {
}

CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem(const CMsgGC_GameServer_UseServerModificationItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_UseServerModificationItem::~CMsgGC_GameServer_UseServerModificationItem() {
  SharedDtor();
}

void CMsgGC_GameServer_UseServerModificationItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_UseServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_UseServerModificationItem_descriptor_;
}

const CMsgGC_GameServer_UseServerModificationItem& CMsgGC_GameServer_UseServerModificationItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_UseServerModificationItem* CMsgGC_GameServer_UseServerModificationItem::default_instance_ = NULL;

CMsgGC_GameServer_UseServerModificationItem* CMsgGC_GameServer_UseServerModificationItem::New() const {
  return new CMsgGC_GameServer_UseServerModificationItem;
}

void CMsgGC_GameServer_UseServerModificationItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modification_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_UseServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_UseServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_UseServerModificationItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_UseServerModificationItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_UseServerModificationItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_modification_type(from.modification_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem::Swap(CMsgGC_GameServer_UseServerModificationItem* other) {
  if (other != this) {
    std::swap(modification_type_, other->modification_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_UseServerModificationItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_UseServerModificationItem_descriptor_;
  metadata.reflection = CMsgGC_GameServer_UseServerModificationItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor_;
}
bool CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_Accepted;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_NoVoteCalled;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_VoteFailed;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MIN;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MAX;
const int CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGC_GameServer_UseServerModificationItem_Response::kModificationTypeFieldNumber;
const int CMsgGC_GameServer_UseServerModificationItem_Response::kServerResponseCodeFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_UseServerModificationItem_Response::InitAsDefaultInstance() {
}

CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response(const CMsgGC_GameServer_UseServerModificationItem_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
  server_response_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_UseServerModificationItem_Response::~CMsgGC_GameServer_UseServerModificationItem_Response() {
  SharedDtor();
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_;
}

const CMsgGC_GameServer_UseServerModificationItem_Response& CMsgGC_GameServer_UseServerModificationItem_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_UseServerModificationItem_Response* CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_ = NULL;

CMsgGC_GameServer_UseServerModificationItem_Response* CMsgGC_GameServer_UseServerModificationItem_Response::New() const {
  return new CMsgGC_GameServer_UseServerModificationItem_Response;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modification_type_ = 1;
    server_response_code_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_UseServerModificationItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_response_code;
        break;
      }
      
      // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_response_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(value)) {
            set_server_response_code(static_cast< ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }
  
  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server_response_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_UseServerModificationItem_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }
  
  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server_response_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_UseServerModificationItem_Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }
    
    // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
    if (has_server_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_response_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_UseServerModificationItem_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_modification_type(from.modification_type());
    }
    if (from._has_bit(1)) {
      set_server_response_code(from.server_response_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem_Response::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::Swap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
  if (other != this) {
    std::swap(modification_type_, other->modification_type_);
    std::swap(server_response_code_, other->server_response_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_UseServerModificationItem_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_;
  metadata.reflection = CMsgGC_GameServer_UseServerModificationItem_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ServerModificationItemExpired::kModificationTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ServerModificationItemExpired::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired(const CMsgGC_GameServer_ServerModificationItemExpired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ServerModificationItemExpired::~CMsgGC_GameServer_ServerModificationItemExpired() {
  SharedDtor();
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItemExpired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ServerModificationItemExpired_descriptor_;
}

const CMsgGC_GameServer_ServerModificationItemExpired& CMsgGC_GameServer_ServerModificationItemExpired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ServerModificationItemExpired* CMsgGC_GameServer_ServerModificationItemExpired::default_instance_ = NULL;

CMsgGC_GameServer_ServerModificationItemExpired* CMsgGC_GameServer_ServerModificationItemExpired::New() const {
  return new CMsgGC_GameServer_ServerModificationItemExpired;
}

void CMsgGC_GameServer_ServerModificationItemExpired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modification_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ServerModificationItemExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ServerModificationItemExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ServerModificationItemExpired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ServerModificationItemExpired::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItemExpired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ServerModificationItemExpired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_modification_type(from.modification_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItemExpired::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ServerModificationItemExpired::Swap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
  if (other != this) {
    std::swap(modification_type_, other->modification_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ServerModificationItemExpired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ServerModificationItemExpired_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ServerModificationItemExpired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ServerModificationItem::kModificationTypeFieldNumber;
const int CMsgGC_GameServer_ServerModificationItem::kActiveFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ServerModificationItem::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem(const CMsgGC_GameServer_ServerModificationItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ServerModificationItem::~CMsgGC_GameServer_ServerModificationItem() {
  SharedDtor();
}

void CMsgGC_GameServer_ServerModificationItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ServerModificationItem_descriptor_;
}

const CMsgGC_GameServer_ServerModificationItem& CMsgGC_GameServer_ServerModificationItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ServerModificationItem* CMsgGC_GameServer_ServerModificationItem::default_instance_ = NULL;

CMsgGC_GameServer_ServerModificationItem* CMsgGC_GameServer_ServerModificationItem::New() const {
  return new CMsgGC_GameServer_ServerModificationItem;
}

void CMsgGC_GameServer_ServerModificationItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modification_type_ = 1;
    active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }
      
      // optional bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }
  
  // optional bool active = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ServerModificationItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }
  
  // optional bool active = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ServerModificationItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }
    
    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ServerModificationItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_modification_type(from.modification_type());
    }
    if (from._has_bit(1)) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItem::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ServerModificationItem::Swap(CMsgGC_GameServer_ServerModificationItem* other) {
  if (other != this) {
    std::swap(modification_type_, other->modification_type_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ServerModificationItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ServerModificationItem_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ServerModificationItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Halloween_ReservedItem::kXFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kYFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kZFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kSpawnMetaInfoFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Halloween_ReservedItem::InitAsDefaultInstance() {
}

CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem(const CMsgGC_Halloween_ReservedItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Halloween_ReservedItem::SharedCtor() {
  _cached_size_ = 0;
  spawn_meta_info_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Halloween_ReservedItem::~CMsgGC_Halloween_ReservedItem() {
  SharedDtor();
}

void CMsgGC_Halloween_ReservedItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Halloween_ReservedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ReservedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Halloween_ReservedItem_descriptor_;
}

const CMsgGC_Halloween_ReservedItem& CMsgGC_Halloween_ReservedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Halloween_ReservedItem* CMsgGC_Halloween_ReservedItem::default_instance_ = NULL;

CMsgGC_Halloween_ReservedItem* CMsgGC_Halloween_ReservedItem::New() const {
  return new CMsgGC_Halloween_ReservedItem;
}

void CMsgGC_Halloween_ReservedItem::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    spawn_meta_info_ = 0u;
  }
  x_.Clear();
  y_.Clear();
  z_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Halloween_ReservedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_x;
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // repeated float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // repeated float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        if (input->ExpectTag(56)) goto parse_spawn_meta_info;
        break;
      }
      
      // optional uint32 spawn_meta_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawn_meta_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_meta_info_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Halloween_ReservedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x(i), output);
  }
  
  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y(i), output);
  }
  
  // repeated float z = 3;
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->z(i), output);
  }
  
  // optional uint32 spawn_meta_info = 7;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->spawn_meta_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Halloween_ReservedItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->x(i), target);
  }
  
  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->y(i), target);
  }
  
  // repeated float z = 3;
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->z(i), target);
  }
  
  // optional uint32 spawn_meta_info = 7;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->spawn_meta_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Halloween_ReservedItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 spawn_meta_info = 7;
    if (has_spawn_meta_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_meta_info());
    }
    
  }
  // repeated float x = 1;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }
  
  // repeated float y = 2;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }
  
  // repeated float z = 3;
  {
    int data_size = 0;
    data_size = 4 * this->z_size();
    total_size += 1 * this->z_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Halloween_ReservedItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Halloween_ReservedItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const CMsgGC_Halloween_ReservedItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from._has_bit(3)) {
      set_spawn_meta_info(from.spawn_meta_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const CMsgGC_Halloween_ReservedItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ReservedItem::IsInitialized() const {
  
  return true;
}

void CMsgGC_Halloween_ReservedItem::Swap(CMsgGC_Halloween_ReservedItem* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    z_.Swap(&other->z_);
    std::swap(spawn_meta_info_, other->spawn_meta_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Halloween_ReservedItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Halloween_ReservedItem_descriptor_;
  metadata.reflection = CMsgGC_Halloween_ReservedItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Halloween_GrantItem::kRecipientAccountIdFieldNumber;
const int CMsgGC_Halloween_GrantItem::kLevelIdFieldNumber;
const int CMsgGC_Halloween_GrantItem::kFlaggedFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Halloween_GrantItem::InitAsDefaultInstance() {
}

CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem(const CMsgGC_Halloween_GrantItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItem::SharedCtor() {
  _cached_size_ = 0;
  recipient_account_id_ = 0u;
  level_id_ = 0u;
  flagged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Halloween_GrantItem::~CMsgGC_Halloween_GrantItem() {
  SharedDtor();
}

void CMsgGC_Halloween_GrantItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Halloween_GrantItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Halloween_GrantItem_descriptor_;
}

const CMsgGC_Halloween_GrantItem& CMsgGC_Halloween_GrantItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Halloween_GrantItem* CMsgGC_Halloween_GrantItem::default_instance_ = NULL;

CMsgGC_Halloween_GrantItem* CMsgGC_Halloween_GrantItem::New() const {
  return new CMsgGC_Halloween_GrantItem;
}

void CMsgGC_Halloween_GrantItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_account_id_ = 0u;
    level_id_ = 0u;
    flagged_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Halloween_GrantItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level_id;
        break;
      }
      
      // optional uint32 level_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flagged;
        break;
      }
      
      // optional bool flagged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flagged_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Halloween_GrantItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 recipient_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_account_id(), output);
  }
  
  // optional uint32 level_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level_id(), output);
  }
  
  // optional bool flagged = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flagged(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Halloween_GrantItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 recipient_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_account_id(), target);
  }
  
  // optional uint32 level_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level_id(), target);
  }
  
  // optional bool flagged = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flagged(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Halloween_GrantItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recipient_account_id = 1;
    if (has_recipient_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }
    
    // optional uint32 level_id = 2;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }
    
    // optional bool flagged = 3;
    if (has_flagged()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Halloween_GrantItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const CMsgGC_Halloween_GrantItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_recipient_account_id(from.recipient_account_id());
    }
    if (from._has_bit(1)) {
      set_level_id(from.level_id());
    }
    if (from._has_bit(2)) {
      set_flagged(from.flagged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const CMsgGC_Halloween_GrantItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItem::IsInitialized() const {
  
  return true;
}

void CMsgGC_Halloween_GrantItem::Swap(CMsgGC_Halloween_GrantItem* other) {
  if (other != this) {
    std::swap(recipient_account_id_, other->recipient_account_id_);
    std::swap(level_id_, other->level_id_);
    std::swap(flagged_, other->flagged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Halloween_GrantItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Halloween_GrantItem_descriptor_;
  metadata.reflection = CMsgGC_Halloween_GrantItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Halloween_GrantItemResponse::kRecipientAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Halloween_GrantItemResponse::InitAsDefaultInstance() {
}

CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse(const CMsgGC_Halloween_GrantItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItemResponse::SharedCtor() {
  _cached_size_ = 0;
  recipient_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Halloween_GrantItemResponse::~CMsgGC_Halloween_GrantItemResponse() {
  SharedDtor();
}

void CMsgGC_Halloween_GrantItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Halloween_GrantItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Halloween_GrantItemResponse_descriptor_;
}

const CMsgGC_Halloween_GrantItemResponse& CMsgGC_Halloween_GrantItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Halloween_GrantItemResponse* CMsgGC_Halloween_GrantItemResponse::default_instance_ = NULL;

CMsgGC_Halloween_GrantItemResponse* CMsgGC_Halloween_GrantItemResponse::New() const {
  return new CMsgGC_Halloween_GrantItemResponse;
}

void CMsgGC_Halloween_GrantItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Halloween_GrantItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Halloween_GrantItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 recipient_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Halloween_GrantItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 recipient_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Halloween_GrantItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recipient_account_id = 1;
    if (has_recipient_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Halloween_GrantItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_recipient_account_id(from.recipient_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItemResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_Halloween_GrantItemResponse::Swap(CMsgGC_Halloween_GrantItemResponse* other) {
  if (other != this) {
    std::swap(recipient_account_id_, other->recipient_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Halloween_GrantItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Halloween_GrantItemResponse_descriptor_;
  metadata.reflection = CMsgGC_Halloween_GrantItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Halloween_ItemClaimed::InitAsDefaultInstance() {
}

CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed(const CMsgGC_Halloween_ItemClaimed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Halloween_ItemClaimed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Halloween_ItemClaimed::~CMsgGC_Halloween_ItemClaimed() {
  SharedDtor();
}

void CMsgGC_Halloween_ItemClaimed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Halloween_ItemClaimed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ItemClaimed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Halloween_ItemClaimed_descriptor_;
}

const CMsgGC_Halloween_ItemClaimed& CMsgGC_Halloween_ItemClaimed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Halloween_ItemClaimed* CMsgGC_Halloween_ItemClaimed::default_instance_ = NULL;

CMsgGC_Halloween_ItemClaimed* CMsgGC_Halloween_ItemClaimed::New() const {
  return new CMsgGC_Halloween_ItemClaimed;
}

void CMsgGC_Halloween_ItemClaimed::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Halloween_ItemClaimed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGC_Halloween_ItemClaimed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Halloween_ItemClaimed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Halloween_ItemClaimed::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Halloween_ItemClaimed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Halloween_ItemClaimed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const CMsgGC_Halloween_ItemClaimed& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const CMsgGC_Halloween_ItemClaimed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ItemClaimed::IsInitialized() const {
  
  return true;
}

void CMsgGC_Halloween_ItemClaimed::Swap(CMsgGC_Halloween_ItemClaimed* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Halloween_ItemClaimed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Halloween_ItemClaimed_descriptor_;
  metadata.reflection = CMsgGC_Halloween_ItemClaimed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_PickupItemEligibility_Query::kAccountIdFieldNumber;
const int CMsgGC_PickupItemEligibility_Query::kSecondsAgoFieldNumber;
#endif  // !_MSC_VER

CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_PickupItemEligibility_Query::InitAsDefaultInstance() {
}

CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query(const CMsgGC_PickupItemEligibility_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_Query::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  seconds_ago_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_PickupItemEligibility_Query::~CMsgGC_PickupItemEligibility_Query() {
  SharedDtor();
}

void CMsgGC_PickupItemEligibility_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_PickupItemEligibility_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_PickupItemEligibility_Query_descriptor_;
}

const CMsgGC_PickupItemEligibility_Query& CMsgGC_PickupItemEligibility_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_PickupItemEligibility_Query* CMsgGC_PickupItemEligibility_Query::default_instance_ = NULL;

CMsgGC_PickupItemEligibility_Query* CMsgGC_PickupItemEligibility_Query::New() const {
  return new CMsgGC_PickupItemEligibility_Query;
}

void CMsgGC_PickupItemEligibility_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    seconds_ago_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_PickupItemEligibility_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seconds_ago;
        break;
      }
      
      // optional uint32 seconds_ago = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_ago:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_ago_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_PickupItemEligibility_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 seconds_ago = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seconds_ago(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_PickupItemEligibility_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 seconds_ago = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seconds_ago(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_PickupItemEligibility_Query::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 seconds_ago = 2;
    if (has_seconds_ago()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_ago());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_PickupItemEligibility_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const CMsgGC_PickupItemEligibility_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_seconds_ago(from.seconds_ago());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const CMsgGC_PickupItemEligibility_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_Query::IsInitialized() const {
  
  return true;
}

void CMsgGC_PickupItemEligibility_Query::Swap(CMsgGC_PickupItemEligibility_Query* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(seconds_ago_, other->seconds_ago_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_PickupItemEligibility_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_PickupItemEligibility_Query_descriptor_;
  metadata.reflection = CMsgGC_PickupItemEligibility_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_PickupItemEligibility_QueryResponse::kAccountIdFieldNumber;
const int CMsgGC_PickupItemEligibility_QueryResponse::kWasEligibleFieldNumber;
const int CMsgGC_PickupItemEligibility_QueryResponse::kLevelIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_PickupItemEligibility_QueryResponse::InitAsDefaultInstance() {
}

CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse(const CMsgGC_PickupItemEligibility_QueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  was_eligible_ = false;
  level_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_PickupItemEligibility_QueryResponse::~CMsgGC_PickupItemEligibility_QueryResponse() {
  SharedDtor();
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_QueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_PickupItemEligibility_QueryResponse_descriptor_;
}

const CMsgGC_PickupItemEligibility_QueryResponse& CMsgGC_PickupItemEligibility_QueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_PickupItemEligibility_QueryResponse* CMsgGC_PickupItemEligibility_QueryResponse::default_instance_ = NULL;

CMsgGC_PickupItemEligibility_QueryResponse* CMsgGC_PickupItemEligibility_QueryResponse::New() const {
  return new CMsgGC_PickupItemEligibility_QueryResponse;
}

void CMsgGC_PickupItemEligibility_QueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    was_eligible_ = false;
    level_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_PickupItemEligibility_QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_was_eligible;
        break;
      }
      
      // optional bool was_eligible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_eligible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_eligible_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level_id;
        break;
      }
      
      // optional uint32 level_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_PickupItemEligibility_QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional bool was_eligible = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_eligible(), output);
  }
  
  // optional uint32 level_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_PickupItemEligibility_QueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional bool was_eligible = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_eligible(), target);
  }
  
  // optional uint32 level_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_PickupItemEligibility_QueryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional bool was_eligible = 2;
    if (has_was_eligible()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 level_id = 3;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_QueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_PickupItemEligibility_QueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_was_eligible(from.was_eligible());
    }
    if (from._has_bit(2)) {
      set_level_id(from.level_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_QueryResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_PickupItemEligibility_QueryResponse::Swap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(was_eligible_, other->was_eligible_);
    std::swap(level_id_, other->level_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_PickupItemEligibility_QueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_PickupItemEligibility_QueryResponse_descriptor_;
  metadata.reflection = CMsgGC_PickupItemEligibility_QueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFPartyMember_Activity::kLobbyIdFieldNumber;
const int CSOTFPartyMember_Activity::kLobbyMatchGroupFieldNumber;
const int CSOTFPartyMember_Activity::kMultiqueueBlockedFieldNumber;
const int CSOTFPartyMember_Activity::kOnlineFieldNumber;
const int CSOTFPartyMember_Activity::kClientVersionFieldNumber;
#endif  // !_MSC_VER

CSOTFPartyMember_Activity::CSOTFPartyMember_Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPartyMember_Activity::InitAsDefaultInstance() {
}

CSOTFPartyMember_Activity::CSOTFPartyMember_Activity(const CSOTFPartyMember_Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPartyMember_Activity::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  lobby_match_group_ = -1;
  multiqueue_blocked_ = false;
  online_ = false;
  client_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPartyMember_Activity::~CSOTFPartyMember_Activity() {
  SharedDtor();
}

void CSOTFPartyMember_Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFPartyMember_Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyMember_Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPartyMember_Activity_descriptor_;
}

const CSOTFPartyMember_Activity& CSOTFPartyMember_Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPartyMember_Activity* CSOTFPartyMember_Activity::default_instance_ = NULL;

CSOTFPartyMember_Activity* CSOTFPartyMember_Activity::New() const {
  return new CSOTFPartyMember_Activity;
}

void CSOTFPartyMember_Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    lobby_match_group_ = -1;
    multiqueue_blocked_ = false;
    online_ = false;
    client_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPartyMember_Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lobby_match_group;
        break;
      }
      
      // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_lobby_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_multiqueue_blocked;
        break;
      }
      
      // optional bool multiqueue_blocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiqueue_blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiqueue_blocked_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }
      
      // optional bool online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_version;
        break;
      }
      
      // optional uint32 client_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPartyMember_Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }
  
  // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lobby_match_group(), output);
  }
  
  // optional bool multiqueue_blocked = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->multiqueue_blocked(), output);
  }
  
  // optional bool online = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->online(), output);
  }
  
  // optional uint32 client_version = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPartyMember_Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }
  
  // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lobby_match_group(), target);
  }
  
  // optional bool multiqueue_blocked = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->multiqueue_blocked(), target);
  }
  
  // optional bool online = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->online(), target);
  }
  
  // optional uint32 client_version = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPartyMember_Activity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (has_lobby_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_match_group());
    }
    
    // optional bool multiqueue_blocked = 3;
    if (has_multiqueue_blocked()) {
      total_size += 1 + 1;
    }
    
    // optional bool online = 4;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 client_version = 5;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyMember_Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPartyMember_Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPartyMember_Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPartyMember_Activity::MergeFrom(const CSOTFPartyMember_Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(1)) {
      set_lobby_match_group(from.lobby_match_group());
    }
    if (from._has_bit(2)) {
      set_multiqueue_blocked(from.multiqueue_blocked());
    }
    if (from._has_bit(3)) {
      set_online(from.online());
    }
    if (from._has_bit(4)) {
      set_client_version(from.client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPartyMember_Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyMember_Activity::CopyFrom(const CSOTFPartyMember_Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyMember_Activity::IsInitialized() const {
  
  return true;
}

void CSOTFPartyMember_Activity::Swap(CSOTFPartyMember_Activity* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(lobby_match_group_, other->lobby_match_group_);
    std::swap(multiqueue_blocked_, other->multiqueue_blocked_);
    std::swap(online_, other->online_);
    std::swap(client_version_, other->client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPartyMember_Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPartyMember_Activity_descriptor_;
  metadata.reflection = CSOTFPartyMember_Activity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSOTFPartyMember::kOwnsTicketFieldNumber;
const int CSOTFPartyMember::kCompletedMissionsFieldNumber;
const int CSOTFPartyMember::kBadgeLevelFieldNumber;
const int CSOTFPartyMember::kCompetitiveAccessFieldNumber;
const int CSOTFPartyMember::kExperienceFieldNumber;
const int CSOTFPartyMember::kPlayerCriteriaFieldNumber;
const int CSOTFPartyMember::kActivityFieldNumber;
const int CSOTFPartyMember::kCasualBannedFieldNumber;
const int CSOTFPartyMember::kRankedBannedFieldNumber;
const int CSOTFPartyMember::kCasualLowPriorityFieldNumber;
const int CSOTFPartyMember::kRankedLowPriorityFieldNumber;
const int CSOTFPartyMember::kLobbyStandbyFieldNumber;
#endif  // !_MSC_VER

CSOTFPartyMember::CSOTFPartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPartyMember::InitAsDefaultInstance() {
  player_criteria_ = const_cast< ::CTFPerPlayerMatchCriteriaProto*>(&::CTFPerPlayerMatchCriteriaProto::default_instance());
  activity_ = const_cast< ::CSOTFPartyMember_Activity*>(&::CSOTFPartyMember_Activity::default_instance());
}

CSOTFPartyMember::CSOTFPartyMember(const CSOTFPartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPartyMember::SharedCtor() {
  _cached_size_ = 0;
  owns_ticket_ = false;
  completed_missions_ = 0u;
  badge_level_ = 0u;
  competitive_access_ = false;
  experience_ = 0u;
  player_criteria_ = NULL;
  activity_ = NULL;
  casual_banned_ = false;
  ranked_banned_ = false;
  casual_low_priority_ = false;
  ranked_low_priority_ = false;
  lobby_standby_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPartyMember::~CSOTFPartyMember() {
  SharedDtor();
}

void CSOTFPartyMember::SharedDtor() {
  if (this != default_instance_) {
    delete player_criteria_;
    delete activity_;
  }
}

void CSOTFPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPartyMember_descriptor_;
}

const CSOTFPartyMember& CSOTFPartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPartyMember* CSOTFPartyMember::default_instance_ = NULL;

CSOTFPartyMember* CSOTFPartyMember::New() const {
  return new CSOTFPartyMember;
}

void CSOTFPartyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owns_ticket_ = false;
    completed_missions_ = 0u;
    badge_level_ = 0u;
    competitive_access_ = false;
    experience_ = 0u;
    if (_has_bit(5)) {
      if (player_criteria_ != NULL) player_criteria_->::CTFPerPlayerMatchCriteriaProto::Clear();
    }
    if (_has_bit(6)) {
      if (activity_ != NULL) activity_->::CSOTFPartyMember_Activity::Clear();
    }
    casual_banned_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ranked_banned_ = false;
    casual_low_priority_ = false;
    ranked_low_priority_ = false;
    lobby_standby_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool owns_ticket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owns_ticket_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completed_missions;
        break;
      }
      
      // optional uint32 completed_missions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed_missions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_missions_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_badge_level;
        break;
      }
      
      // optional uint32 badge_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_competitive_access;
        break;
      }
      
      // optional bool competitive_access = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_competitive_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &competitive_access_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_experience;
        break;
      }
      
      // optional uint32 experience = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_player_criteria;
        break;
      }
      
      // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_activity;
        break;
      }
      
      // optional .CSOTFPartyMember.Activity activity = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_casual_banned;
        break;
      }
      
      // optional bool casual_banned = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casual_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &casual_banned_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ranked_banned;
        break;
      }
      
      // optional bool ranked_banned = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranked_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ranked_banned_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_casual_low_priority;
        break;
      }
      
      // optional bool casual_low_priority = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casual_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &casual_low_priority_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_ranked_low_priority;
        break;
      }
      
      // optional bool ranked_low_priority = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranked_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ranked_low_priority_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_lobby_standby;
        break;
      }
      
      // optional bool lobby_standby = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_standby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lobby_standby_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool owns_ticket = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->owns_ticket(), output);
  }
  
  // optional uint32 completed_missions = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completed_missions(), output);
  }
  
  // optional uint32 badge_level = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_level(), output);
  }
  
  // optional bool competitive_access = 9;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->competitive_access(), output);
  }
  
  // optional uint32 experience = 14;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->experience(), output);
  }
  
  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->player_criteria(), output);
  }
  
  // optional .CSOTFPartyMember.Activity activity = 17;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->activity(), output);
  }
  
  // optional bool casual_banned = 18;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->casual_banned(), output);
  }
  
  // optional bool ranked_banned = 19;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->ranked_banned(), output);
  }
  
  // optional bool casual_low_priority = 20;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->casual_low_priority(), output);
  }
  
  // optional bool ranked_low_priority = 21;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->ranked_low_priority(), output);
  }
  
  // optional bool lobby_standby = 22;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->lobby_standby(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool owns_ticket = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->owns_ticket(), target);
  }
  
  // optional uint32 completed_missions = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completed_missions(), target);
  }
  
  // optional uint32 badge_level = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_level(), target);
  }
  
  // optional bool competitive_access = 9;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->competitive_access(), target);
  }
  
  // optional uint32 experience = 14;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->experience(), target);
  }
  
  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->player_criteria(), target);
  }
  
  // optional .CSOTFPartyMember.Activity activity = 17;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->activity(), target);
  }
  
  // optional bool casual_banned = 18;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->casual_banned(), target);
  }
  
  // optional bool ranked_banned = 19;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->ranked_banned(), target);
  }
  
  // optional bool casual_low_priority = 20;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->casual_low_priority(), target);
  }
  
  // optional bool ranked_low_priority = 21;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->ranked_low_priority(), target);
  }
  
  // optional bool lobby_standby = 22;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->lobby_standby(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPartyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool owns_ticket = 2;
    if (has_owns_ticket()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 completed_missions = 3;
    if (has_completed_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_missions());
    }
    
    // optional uint32 badge_level = 4;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }
    
    // optional bool competitive_access = 9;
    if (has_competitive_access()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 experience = 14;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }
    
    // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
    if (has_player_criteria()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_criteria());
    }
    
    // optional .CSOTFPartyMember.Activity activity = 17;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }
    
    // optional bool casual_banned = 18;
    if (has_casual_banned()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ranked_banned = 19;
    if (has_ranked_banned()) {
      total_size += 2 + 1;
    }
    
    // optional bool casual_low_priority = 20;
    if (has_casual_low_priority()) {
      total_size += 2 + 1;
    }
    
    // optional bool ranked_low_priority = 21;
    if (has_ranked_low_priority()) {
      total_size += 2 + 1;
    }
    
    // optional bool lobby_standby = 22;
    if (has_lobby_standby()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPartyMember::MergeFrom(const CSOTFPartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_owns_ticket(from.owns_ticket());
    }
    if (from._has_bit(1)) {
      set_completed_missions(from.completed_missions());
    }
    if (from._has_bit(2)) {
      set_badge_level(from.badge_level());
    }
    if (from._has_bit(3)) {
      set_competitive_access(from.competitive_access());
    }
    if (from._has_bit(4)) {
      set_experience(from.experience());
    }
    if (from._has_bit(5)) {
      mutable_player_criteria()->::CTFPerPlayerMatchCriteriaProto::MergeFrom(from.player_criteria());
    }
    if (from._has_bit(6)) {
      mutable_activity()->::CSOTFPartyMember_Activity::MergeFrom(from.activity());
    }
    if (from._has_bit(7)) {
      set_casual_banned(from.casual_banned());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_ranked_banned(from.ranked_banned());
    }
    if (from._has_bit(9)) {
      set_casual_low_priority(from.casual_low_priority());
    }
    if (from._has_bit(10)) {
      set_ranked_low_priority(from.ranked_low_priority());
    }
    if (from._has_bit(11)) {
      set_lobby_standby(from.lobby_standby());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyMember::CopyFrom(const CSOTFPartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyMember::IsInitialized() const {
  
  return true;
}

void CSOTFPartyMember::Swap(CSOTFPartyMember* other) {
  if (other != this) {
    std::swap(owns_ticket_, other->owns_ticket_);
    std::swap(completed_missions_, other->completed_missions_);
    std::swap(badge_level_, other->badge_level_);
    std::swap(competitive_access_, other->competitive_access_);
    std::swap(experience_, other->experience_);
    std::swap(player_criteria_, other->player_criteria_);
    std::swap(activity_, other->activity_);
    std::swap(casual_banned_, other->casual_banned_);
    std::swap(ranked_banned_, other->ranked_banned_);
    std::swap(casual_low_priority_, other->casual_low_priority_);
    std::swap(ranked_low_priority_, other->ranked_low_priority_);
    std::swap(lobby_standby_, other->lobby_standby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPartyMember_descriptor_;
  metadata.reflection = CSOTFPartyMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TFPendingPartyMember_EType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFPendingPartyMember_EType_descriptor_;
}
bool TFPendingPartyMember_EType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TFPendingPartyMember_EType TFPendingPartyMember::Invited;
const TFPendingPartyMember_EType TFPendingPartyMember::RequestedToJoin;
const TFPendingPartyMember_EType TFPendingPartyMember::EType_MIN;
const TFPendingPartyMember_EType TFPendingPartyMember::EType_MAX;
const int TFPendingPartyMember::EType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TFPendingPartyMember::kSteamidFieldNumber;
const int TFPendingPartyMember::kTypeFieldNumber;
const int TFPendingPartyMember::kInviterFieldNumber;
#endif  // !_MSC_VER

TFPendingPartyMember::TFPendingPartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TFPendingPartyMember::InitAsDefaultInstance() {
}

TFPendingPartyMember::TFPendingPartyMember(const TFPendingPartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TFPendingPartyMember::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  inviter_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFPendingPartyMember::~TFPendingPartyMember() {
  SharedDtor();
}

void TFPendingPartyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFPendingPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFPendingPartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFPendingPartyMember_descriptor_;
}

const TFPendingPartyMember& TFPendingPartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

TFPendingPartyMember* TFPendingPartyMember::default_instance_ = NULL;

TFPendingPartyMember* TFPendingPartyMember::New() const {
  return new TFPendingPartyMember;
}

void TFPendingPartyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    inviter_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFPendingPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TFPendingPartyMember_EType_IsValid(value)) {
            set_type(static_cast< ::TFPendingPartyMember_EType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_inviter;
        break;
      }
      
      // optional fixed64 inviter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &inviter_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TFPendingPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }
  
  // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional fixed64 inviter = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->inviter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TFPendingPartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }
  
  // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional fixed64 inviter = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->inviter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TFPendingPartyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }
    
    // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional fixed64 inviter = 3;
    if (has_inviter()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFPendingPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFPendingPartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFPendingPartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFPendingPartyMember::MergeFrom(const TFPendingPartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steamid(from.steamid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_inviter(from.inviter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFPendingPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFPendingPartyMember::CopyFrom(const TFPendingPartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFPendingPartyMember::IsInitialized() const {
  
  return true;
}

void TFPendingPartyMember::Swap(TFPendingPartyMember* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(type_, other->type_);
    std::swap(inviter_, other->inviter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFPendingPartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFPendingPartyMember_descriptor_;
  metadata.reflection = TFPendingPartyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFSyncedMMUIState::kMenuStepFieldNumber;
const int TFSyncedMMUIState::kMatchGroupFieldNumber;
#endif  // !_MSC_VER

TFSyncedMMUIState::TFSyncedMMUIState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TFSyncedMMUIState::InitAsDefaultInstance() {
}

TFSyncedMMUIState::TFSyncedMMUIState(const TFSyncedMMUIState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TFSyncedMMUIState::SharedCtor() {
  _cached_size_ = 0;
  menu_step_ = 0;
  match_group_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFSyncedMMUIState::~TFSyncedMMUIState() {
  SharedDtor();
}

void TFSyncedMMUIState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFSyncedMMUIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFSyncedMMUIState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFSyncedMMUIState_descriptor_;
}

const TFSyncedMMUIState& TFSyncedMMUIState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

TFSyncedMMUIState* TFSyncedMMUIState::default_instance_ = NULL;

TFSyncedMMUIState* TFSyncedMMUIState::New() const {
  return new TFSyncedMMUIState;
}

void TFSyncedMMUIState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    menu_step_ = 0;
    match_group_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFSyncedMMUIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFSyncedMMMenuStep_IsValid(value)) {
            set_menu_step(static_cast< ETFSyncedMMMenuStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_group;
        break;
      }
      
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TFSyncedMMUIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->menu_step(), output);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TFSyncedMMUIState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->menu_step(), target);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TFSyncedMMUIState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
    if (has_menu_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->menu_step());
    }
    
    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFSyncedMMUIState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFSyncedMMUIState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFSyncedMMUIState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFSyncedMMUIState::MergeFrom(const TFSyncedMMUIState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_menu_step(from.menu_step());
    }
    if (from._has_bit(1)) {
      set_match_group(from.match_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFSyncedMMUIState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFSyncedMMUIState::CopyFrom(const TFSyncedMMUIState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFSyncedMMUIState::IsInitialized() const {
  
  return true;
}

void TFSyncedMMUIState::Swap(TFSyncedMMUIState* other) {
  if (other != this) {
    std::swap(menu_step_, other->menu_step_);
    std::swap(match_group_, other->match_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFSyncedMMUIState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFSyncedMMUIState_descriptor_;
  metadata.reflection = TFSyncedMMUIState_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CTFGroupMatchCriteriaProto::_default_mvm_mannup_tour_;
#ifndef _MSC_VER
const int CTFGroupMatchCriteriaProto::kLateJoinOkFieldNumber;
const int CTFGroupMatchCriteriaProto::kCustomPingToleranceFieldNumber;
const int CTFGroupMatchCriteriaProto::kMvmMannupTourFieldNumber;
const int CTFGroupMatchCriteriaProto::kMvmMannupMissionsFieldNumber;
const int CTFGroupMatchCriteriaProto::kMvmBootcampMissionsFieldNumber;
const int CTFGroupMatchCriteriaProto::kCasualCriteriaFieldNumber;
#endif  // !_MSC_VER

CTFGroupMatchCriteriaProto::CTFGroupMatchCriteriaProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFGroupMatchCriteriaProto::InitAsDefaultInstance() {
  casual_criteria_ = const_cast< ::CTFCasualMatchCriteria*>(&::CTFCasualMatchCriteria::default_instance());
}

CTFGroupMatchCriteriaProto::CTFGroupMatchCriteriaProto(const CTFGroupMatchCriteriaProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFGroupMatchCriteriaProto::SharedCtor() {
  _cached_size_ = 0;
  late_join_ok_ = false;
  custom_ping_tolerance_ = 0u;
  mvm_mannup_tour_ = const_cast< ::std::string*>(&_default_mvm_mannup_tour_);
  casual_criteria_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFGroupMatchCriteriaProto::~CTFGroupMatchCriteriaProto() {
  SharedDtor();
}

void CTFGroupMatchCriteriaProto::SharedDtor() {
  if (mvm_mannup_tour_ != &_default_mvm_mannup_tour_) {
    delete mvm_mannup_tour_;
  }
  if (this != default_instance_) {
    delete casual_criteria_;
  }
}

void CTFGroupMatchCriteriaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFGroupMatchCriteriaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFGroupMatchCriteriaProto_descriptor_;
}

const CTFGroupMatchCriteriaProto& CTFGroupMatchCriteriaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFGroupMatchCriteriaProto* CTFGroupMatchCriteriaProto::default_instance_ = NULL;

CTFGroupMatchCriteriaProto* CTFGroupMatchCriteriaProto::New() const {
  return new CTFGroupMatchCriteriaProto;
}

void CTFGroupMatchCriteriaProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    late_join_ok_ = false;
    custom_ping_tolerance_ = 0u;
    if (_has_bit(2)) {
      if (mvm_mannup_tour_ != &_default_mvm_mannup_tour_) {
        mvm_mannup_tour_->clear();
      }
    }
    if (_has_bit(5)) {
      if (casual_criteria_ != NULL) casual_criteria_->::CTFCasualMatchCriteria::Clear();
    }
  }
  mvm_mannup_missions_.Clear();
  mvm_bootcamp_missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFGroupMatchCriteriaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool late_join_ok = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &late_join_ok_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mvm_mannup_tour;
        break;
      }
      
      // optional string mvm_mannup_tour = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mvm_mannup_tour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mvm_mannup_tour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mvm_mannup_tour().data(), this->mvm_mannup_tour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_casual_criteria;
        break;
      }
      
      // optional .CTFCasualMatchCriteria casual_criteria = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_casual_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_casual_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_custom_ping_tolerance;
        break;
      }
      
      // optional uint32 custom_ping_tolerance = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_ping_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_ping_tolerance_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mvm_mannup_missions;
        break;
      }
      
      // repeated string mvm_mannup_missions = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mvm_mannup_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mvm_mannup_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mvm_mannup_missions(0).data(), this->mvm_mannup_missions(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mvm_mannup_missions;
        if (input->ExpectTag(130)) goto parse_mvm_bootcamp_missions;
        break;
      }
      
      // repeated string mvm_bootcamp_missions = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mvm_bootcamp_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mvm_bootcamp_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mvm_bootcamp_missions(0).data(), this->mvm_bootcamp_missions(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_mvm_bootcamp_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFGroupMatchCriteriaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool late_join_ok = 5;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->late_join_ok(), output);
  }
  
  // optional string mvm_mannup_tour = 10;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mvm_mannup_tour().data(), this->mvm_mannup_tour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mvm_mannup_tour(), output);
  }
  
  // optional .CTFCasualMatchCriteria casual_criteria = 12;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->casual_criteria(), output);
  }
  
  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->custom_ping_tolerance(), output);
  }
  
  // repeated string mvm_mannup_missions = 15;
  for (int i = 0; i < this->mvm_mannup_missions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mvm_mannup_missions(i).data(), this->mvm_mannup_missions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mvm_mannup_missions(i), output);
  }
  
  // repeated string mvm_bootcamp_missions = 16;
  for (int i = 0; i < this->mvm_bootcamp_missions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mvm_bootcamp_missions(i).data(), this->mvm_bootcamp_missions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->mvm_bootcamp_missions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFGroupMatchCriteriaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool late_join_ok = 5;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->late_join_ok(), target);
  }
  
  // optional string mvm_mannup_tour = 10;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mvm_mannup_tour().data(), this->mvm_mannup_tour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mvm_mannup_tour(), target);
  }
  
  // optional .CTFCasualMatchCriteria casual_criteria = 12;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->casual_criteria(), target);
  }
  
  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->custom_ping_tolerance(), target);
  }
  
  // repeated string mvm_mannup_missions = 15;
  for (int i = 0; i < this->mvm_mannup_missions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mvm_mannup_missions(i).data(), this->mvm_mannup_missions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->mvm_mannup_missions(i), target);
  }
  
  // repeated string mvm_bootcamp_missions = 16;
  for (int i = 0; i < this->mvm_bootcamp_missions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mvm_bootcamp_missions(i).data(), this->mvm_bootcamp_missions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->mvm_bootcamp_missions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFGroupMatchCriteriaProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool late_join_ok = 5;
    if (has_late_join_ok()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 custom_ping_tolerance = 13 [default = 0];
    if (has_custom_ping_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_ping_tolerance());
    }
    
    // optional string mvm_mannup_tour = 10;
    if (has_mvm_mannup_tour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mvm_mannup_tour());
    }
    
    // optional .CTFCasualMatchCriteria casual_criteria = 12;
    if (has_casual_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->casual_criteria());
    }
    
  }
  // repeated string mvm_mannup_missions = 15;
  total_size += 1 * this->mvm_mannup_missions_size();
  for (int i = 0; i < this->mvm_mannup_missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mvm_mannup_missions(i));
  }
  
  // repeated string mvm_bootcamp_missions = 16;
  total_size += 2 * this->mvm_bootcamp_missions_size();
  for (int i = 0; i < this->mvm_bootcamp_missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mvm_bootcamp_missions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFGroupMatchCriteriaProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFGroupMatchCriteriaProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFGroupMatchCriteriaProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFGroupMatchCriteriaProto::MergeFrom(const CTFGroupMatchCriteriaProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mvm_mannup_missions_.MergeFrom(from.mvm_mannup_missions_);
  mvm_bootcamp_missions_.MergeFrom(from.mvm_bootcamp_missions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_late_join_ok(from.late_join_ok());
    }
    if (from._has_bit(1)) {
      set_custom_ping_tolerance(from.custom_ping_tolerance());
    }
    if (from._has_bit(2)) {
      set_mvm_mannup_tour(from.mvm_mannup_tour());
    }
    if (from._has_bit(5)) {
      mutable_casual_criteria()->::CTFCasualMatchCriteria::MergeFrom(from.casual_criteria());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFGroupMatchCriteriaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFGroupMatchCriteriaProto::CopyFrom(const CTFGroupMatchCriteriaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFGroupMatchCriteriaProto::IsInitialized() const {
  
  return true;
}

void CTFGroupMatchCriteriaProto::Swap(CTFGroupMatchCriteriaProto* other) {
  if (other != this) {
    std::swap(late_join_ok_, other->late_join_ok_);
    std::swap(custom_ping_tolerance_, other->custom_ping_tolerance_);
    std::swap(mvm_mannup_tour_, other->mvm_mannup_tour_);
    mvm_mannup_missions_.Swap(&other->mvm_mannup_missions_);
    mvm_bootcamp_missions_.Swap(&other->mvm_bootcamp_missions_);
    std::swap(casual_criteria_, other->casual_criteria_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFGroupMatchCriteriaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFGroupMatchCriteriaProto_descriptor_;
  metadata.reflection = CTFGroupMatchCriteriaProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTFCasualMatchCriteria::kSelectedMapsBitsFieldNumber;
#endif  // !_MSC_VER

CTFCasualMatchCriteria::CTFCasualMatchCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFCasualMatchCriteria::InitAsDefaultInstance() {
}

CTFCasualMatchCriteria::CTFCasualMatchCriteria(const CTFCasualMatchCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFCasualMatchCriteria::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFCasualMatchCriteria::~CTFCasualMatchCriteria() {
  SharedDtor();
}

void CTFCasualMatchCriteria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTFCasualMatchCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFCasualMatchCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFCasualMatchCriteria_descriptor_;
}

const CTFCasualMatchCriteria& CTFCasualMatchCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFCasualMatchCriteria* CTFCasualMatchCriteria::default_instance_ = NULL;

CTFCasualMatchCriteria* CTFCasualMatchCriteria::New() const {
  return new CTFCasualMatchCriteria;
}

void CTFCasualMatchCriteria::Clear() {
  selected_maps_bits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFCasualMatchCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 selected_maps_bits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_selected_maps_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_selected_maps_bits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_selected_maps_bits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_selected_maps_bits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFCasualMatchCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 selected_maps_bits = 3;
  for (int i = 0; i < this->selected_maps_bits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->selected_maps_bits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFCasualMatchCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 selected_maps_bits = 3;
  for (int i = 0; i < this->selected_maps_bits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->selected_maps_bits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFCasualMatchCriteria::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed32 selected_maps_bits = 3;
  {
    int data_size = 0;
    data_size = 4 * this->selected_maps_bits_size();
    total_size += 1 * this->selected_maps_bits_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFCasualMatchCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFCasualMatchCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFCasualMatchCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFCasualMatchCriteria::MergeFrom(const CTFCasualMatchCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  selected_maps_bits_.MergeFrom(from.selected_maps_bits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFCasualMatchCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFCasualMatchCriteria::CopyFrom(const CTFCasualMatchCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFCasualMatchCriteria::IsInitialized() const {
  
  return true;
}

void CTFCasualMatchCriteria::Swap(CTFCasualMatchCriteria* other) {
  if (other != this) {
    selected_maps_bits_.Swap(&other->selected_maps_bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFCasualMatchCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFCasualMatchCriteria_descriptor_;
  metadata.reflection = CTFCasualMatchCriteria_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTFPerPlayerMatchCriteriaProto::kMvmSquadSurplusFieldNumber;
#endif  // !_MSC_VER

CTFPerPlayerMatchCriteriaProto::CTFPerPlayerMatchCriteriaProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFPerPlayerMatchCriteriaProto::InitAsDefaultInstance() {
}

CTFPerPlayerMatchCriteriaProto::CTFPerPlayerMatchCriteriaProto(const CTFPerPlayerMatchCriteriaProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFPerPlayerMatchCriteriaProto::SharedCtor() {
  _cached_size_ = 0;
  mvm_squad_surplus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFPerPlayerMatchCriteriaProto::~CTFPerPlayerMatchCriteriaProto() {
  SharedDtor();
}

void CTFPerPlayerMatchCriteriaProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTFPerPlayerMatchCriteriaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFPerPlayerMatchCriteriaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFPerPlayerMatchCriteriaProto_descriptor_;
}

const CTFPerPlayerMatchCriteriaProto& CTFPerPlayerMatchCriteriaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFPerPlayerMatchCriteriaProto* CTFPerPlayerMatchCriteriaProto::default_instance_ = NULL;

CTFPerPlayerMatchCriteriaProto* CTFPerPlayerMatchCriteriaProto::New() const {
  return new CTFPerPlayerMatchCriteriaProto;
}

void CTFPerPlayerMatchCriteriaProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mvm_squad_surplus_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFPerPlayerMatchCriteriaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool mvm_squad_surplus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mvm_squad_surplus_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFPerPlayerMatchCriteriaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool mvm_squad_surplus = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->mvm_squad_surplus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFPerPlayerMatchCriteriaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool mvm_squad_surplus = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->mvm_squad_surplus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFPerPlayerMatchCriteriaProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool mvm_squad_surplus = 1;
    if (has_mvm_squad_surplus()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFPerPlayerMatchCriteriaProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFPerPlayerMatchCriteriaProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFPerPlayerMatchCriteriaProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFPerPlayerMatchCriteriaProto::MergeFrom(const CTFPerPlayerMatchCriteriaProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mvm_squad_surplus(from.mvm_squad_surplus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFPerPlayerMatchCriteriaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFPerPlayerMatchCriteriaProto::CopyFrom(const CTFPerPlayerMatchCriteriaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFPerPlayerMatchCriteriaProto::IsInitialized() const {
  
  return true;
}

void CTFPerPlayerMatchCriteriaProto::Swap(CTFPerPlayerMatchCriteriaProto* other) {
  if (other != this) {
    std::swap(mvm_squad_surplus_, other->mvm_squad_surplus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFPerPlayerMatchCriteriaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFPerPlayerMatchCriteriaProto_descriptor_;
  metadata.reflection = CTFPerPlayerMatchCriteriaProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTFPartyOptions::kOverwriteExistingFieldNumber;
const int CTFPartyOptions::kGroupCriteriaFieldNumber;
const int CTFPartyOptions::kPlayerCriteriaFieldNumber;
const int CTFPartyOptions::kPlayerUistateFieldNumber;
#endif  // !_MSC_VER

CTFPartyOptions::CTFPartyOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFPartyOptions::InitAsDefaultInstance() {
  group_criteria_ = const_cast< ::CTFGroupMatchCriteriaProto*>(&::CTFGroupMatchCriteriaProto::default_instance());
  player_criteria_ = const_cast< ::CTFPerPlayerMatchCriteriaProto*>(&::CTFPerPlayerMatchCriteriaProto::default_instance());
  player_uistate_ = const_cast< ::TFSyncedMMUIState*>(&::TFSyncedMMUIState::default_instance());
}

CTFPartyOptions::CTFPartyOptions(const CTFPartyOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFPartyOptions::SharedCtor() {
  _cached_size_ = 0;
  overwrite_existing_ = false;
  group_criteria_ = NULL;
  player_criteria_ = NULL;
  player_uistate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFPartyOptions::~CTFPartyOptions() {
  SharedDtor();
}

void CTFPartyOptions::SharedDtor() {
  if (this != default_instance_) {
    delete group_criteria_;
    delete player_criteria_;
    delete player_uistate_;
  }
}

void CTFPartyOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFPartyOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFPartyOptions_descriptor_;
}

const CTFPartyOptions& CTFPartyOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFPartyOptions* CTFPartyOptions::default_instance_ = NULL;

CTFPartyOptions* CTFPartyOptions::New() const {
  return new CTFPartyOptions;
}

void CTFPartyOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    overwrite_existing_ = false;
    if (_has_bit(1)) {
      if (group_criteria_ != NULL) group_criteria_->::CTFGroupMatchCriteriaProto::Clear();
    }
    if (_has_bit(2)) {
      if (player_criteria_ != NULL) player_criteria_->::CTFPerPlayerMatchCriteriaProto::Clear();
    }
    if (_has_bit(3)) {
      if (player_uistate_ != NULL) player_uistate_->::TFSyncedMMUIState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFPartyOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool overwrite_existing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_existing_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_criteria;
        break;
      }
      
      // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_criteria;
        break;
      }
      
      // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_uistate;
        break;
      }
      
      // optional .TFSyncedMMUIState player_uistate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_uistate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFPartyOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool overwrite_existing = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->overwrite_existing(), output);
  }
  
  // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_criteria(), output);
  }
  
  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_criteria(), output);
  }
  
  // optional .TFSyncedMMUIState player_uistate = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_uistate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFPartyOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool overwrite_existing = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->overwrite_existing(), target);
  }
  
  // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_criteria(), target);
  }
  
  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_criteria(), target);
  }
  
  // optional .TFSyncedMMUIState player_uistate = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_uistate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFPartyOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool overwrite_existing = 1;
    if (has_overwrite_existing()) {
      total_size += 1 + 1;
    }
    
    // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
    if (has_group_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_criteria());
    }
    
    // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
    if (has_player_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_criteria());
    }
    
    // optional .TFSyncedMMUIState player_uistate = 5;
    if (has_player_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_uistate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFPartyOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFPartyOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFPartyOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFPartyOptions::MergeFrom(const CTFPartyOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_overwrite_existing(from.overwrite_existing());
    }
    if (from._has_bit(1)) {
      mutable_group_criteria()->::CTFGroupMatchCriteriaProto::MergeFrom(from.group_criteria());
    }
    if (from._has_bit(2)) {
      mutable_player_criteria()->::CTFPerPlayerMatchCriteriaProto::MergeFrom(from.player_criteria());
    }
    if (from._has_bit(3)) {
      mutable_player_uistate()->::TFSyncedMMUIState::MergeFrom(from.player_uistate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFPartyOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFPartyOptions::CopyFrom(const CTFPartyOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFPartyOptions::IsInitialized() const {
  
  return true;
}

void CTFPartyOptions::Swap(CTFPartyOptions* other) {
  if (other != this) {
    std::swap(overwrite_existing_, other->overwrite_existing_);
    std::swap(group_criteria_, other->group_criteria_);
    std::swap(player_criteria_, other->player_criteria_);
    std::swap(player_uistate_, other->player_uistate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFPartyOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFPartyOptions_descriptor_;
  metadata.reflection = CTFPartyOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartySetOptions::kPartyIdFieldNumber;
const int CMsgPartySetOptions::kOptionsFieldNumber;
#endif  // !_MSC_VER

CMsgPartySetOptions::CMsgPartySetOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartySetOptions::InitAsDefaultInstance() {
  options_ = const_cast< ::CTFPartyOptions*>(&::CTFPartyOptions::default_instance());
}

CMsgPartySetOptions::CMsgPartySetOptions(const CMsgPartySetOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartySetOptions::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartySetOptions::~CMsgPartySetOptions() {
  SharedDtor();
}

void CMsgPartySetOptions::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void CMsgPartySetOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartySetOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartySetOptions_descriptor_;
}

const CMsgPartySetOptions& CMsgPartySetOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartySetOptions* CMsgPartySetOptions::default_instance_ = NULL;

CMsgPartySetOptions* CMsgPartySetOptions::New() const {
  return new CMsgPartySetOptions;
}

void CMsgPartySetOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (options_ != NULL) options_->::CTFPartyOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartySetOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }
      
      // optional .CTFPartyOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartySetOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional .CTFPartyOptions options = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartySetOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional .CTFPartyOptions options = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartySetOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional .CTFPartyOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartySetOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartySetOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartySetOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartySetOptions::MergeFrom(const CMsgPartySetOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      mutable_options()->::CTFPartyOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartySetOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySetOptions::CopyFrom(const CMsgPartySetOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySetOptions::IsInitialized() const {
  
  return true;
}

void CMsgPartySetOptions::Swap(CMsgPartySetOptions* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartySetOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartySetOptions_descriptor_;
  metadata.reflection = CMsgPartySetOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartySetOptionsResponse::CMsgPartySetOptionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartySetOptionsResponse::InitAsDefaultInstance() {
}

CMsgPartySetOptionsResponse::CMsgPartySetOptionsResponse(const CMsgPartySetOptionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartySetOptionsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartySetOptionsResponse::~CMsgPartySetOptionsResponse() {
  SharedDtor();
}

void CMsgPartySetOptionsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartySetOptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartySetOptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartySetOptionsResponse_descriptor_;
}

const CMsgPartySetOptionsResponse& CMsgPartySetOptionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartySetOptionsResponse* CMsgPartySetOptionsResponse::default_instance_ = NULL;

CMsgPartySetOptionsResponse* CMsgPartySetOptionsResponse::New() const {
  return new CMsgPartySetOptionsResponse;
}

void CMsgPartySetOptionsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartySetOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartySetOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartySetOptionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartySetOptionsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartySetOptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartySetOptionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartySetOptionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartySetOptionsResponse::MergeFrom(const CMsgPartySetOptionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartySetOptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySetOptionsResponse::CopyFrom(const CMsgPartySetOptionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySetOptionsResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartySetOptionsResponse::Swap(CMsgPartySetOptionsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartySetOptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartySetOptionsResponse_descriptor_;
  metadata.reflection = CMsgPartySetOptionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyQueueForMatch::kPartyIdFieldNumber;
const int CMsgPartyQueueForMatch::kFinalOptionsFieldNumber;
const int CMsgPartyQueueForMatch::kMatchGroupFieldNumber;
#endif  // !_MSC_VER

CMsgPartyQueueForMatch::CMsgPartyQueueForMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyQueueForMatch::InitAsDefaultInstance() {
  final_options_ = const_cast< ::CTFPartyOptions*>(&::CTFPartyOptions::default_instance());
}

CMsgPartyQueueForMatch::CMsgPartyQueueForMatch(const CMsgPartyQueueForMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyQueueForMatch::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  final_options_ = NULL;
  match_group_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyQueueForMatch::~CMsgPartyQueueForMatch() {
  SharedDtor();
}

void CMsgPartyQueueForMatch::SharedDtor() {
  if (this != default_instance_) {
    delete final_options_;
  }
}

void CMsgPartyQueueForMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyQueueForMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyQueueForMatch_descriptor_;
}

const CMsgPartyQueueForMatch& CMsgPartyQueueForMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyQueueForMatch* CMsgPartyQueueForMatch::default_instance_ = NULL;

CMsgPartyQueueForMatch* CMsgPartyQueueForMatch::New() const {
  return new CMsgPartyQueueForMatch;
}

void CMsgPartyQueueForMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (final_options_ != NULL) final_options_->::CTFPartyOptions::Clear();
    }
    match_group_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyQueueForMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_final_options;
        break;
      }
      
      // optional .CTFPartyOptions final_options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_final_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_group;
        break;
      }
      
      // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyQueueForMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional .CTFPartyOptions final_options = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->final_options(), output);
  }
  
  // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->match_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyQueueForMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional .CTFPartyOptions final_options = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->final_options(), target);
  }
  
  // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->match_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyQueueForMatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional .CTFPartyOptions final_options = 2;
    if (has_final_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->final_options());
    }
    
    // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyQueueForMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyQueueForMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyQueueForMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForMatch::MergeFrom(const CMsgPartyQueueForMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      mutable_final_options()->::CTFPartyOptions::MergeFrom(from.final_options());
    }
    if (from._has_bit(2)) {
      set_match_group(from.match_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyQueueForMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForMatch::CopyFrom(const CMsgPartyQueueForMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForMatch::IsInitialized() const {
  
  return true;
}

void CMsgPartyQueueForMatch::Swap(CMsgPartyQueueForMatch* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(final_options_, other->final_options_);
    std::swap(match_group_, other->match_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyQueueForMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyQueueForMatch_descriptor_;
  metadata.reflection = CMsgPartyQueueForMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyQueueForMatchResponse::CMsgPartyQueueForMatchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyQueueForMatchResponse::InitAsDefaultInstance() {
}

CMsgPartyQueueForMatchResponse::CMsgPartyQueueForMatchResponse(const CMsgPartyQueueForMatchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyQueueForMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyQueueForMatchResponse::~CMsgPartyQueueForMatchResponse() {
  SharedDtor();
}

void CMsgPartyQueueForMatchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyQueueForMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyQueueForMatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyQueueForMatchResponse_descriptor_;
}

const CMsgPartyQueueForMatchResponse& CMsgPartyQueueForMatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyQueueForMatchResponse* CMsgPartyQueueForMatchResponse::default_instance_ = NULL;

CMsgPartyQueueForMatchResponse* CMsgPartyQueueForMatchResponse::New() const {
  return new CMsgPartyQueueForMatchResponse;
}

void CMsgPartyQueueForMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyQueueForMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyQueueForMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyQueueForMatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyQueueForMatchResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyQueueForMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyQueueForMatchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyQueueForMatchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForMatchResponse::MergeFrom(const CMsgPartyQueueForMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyQueueForMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForMatchResponse::CopyFrom(const CMsgPartyQueueForMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForMatchResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyQueueForMatchResponse::Swap(CMsgPartyQueueForMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyQueueForMatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyQueueForMatchResponse_descriptor_;
  metadata.reflection = CMsgPartyQueueForMatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyQueueForStandby::kPartyIdFieldNumber;
const int CMsgPartyQueueForStandby::kPartyLobbyIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyQueueForStandby::CMsgPartyQueueForStandby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyQueueForStandby::InitAsDefaultInstance() {
}

CMsgPartyQueueForStandby::CMsgPartyQueueForStandby(const CMsgPartyQueueForStandby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyQueueForStandby::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  party_lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyQueueForStandby::~CMsgPartyQueueForStandby() {
  SharedDtor();
}

void CMsgPartyQueueForStandby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyQueueForStandby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyQueueForStandby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyQueueForStandby_descriptor_;
}

const CMsgPartyQueueForStandby& CMsgPartyQueueForStandby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyQueueForStandby* CMsgPartyQueueForStandby::default_instance_ = NULL;

CMsgPartyQueueForStandby* CMsgPartyQueueForStandby::New() const {
  return new CMsgPartyQueueForStandby;
}

void CMsgPartyQueueForStandby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    party_lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyQueueForStandby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_party_lobby_id;
        break;
      }
      
      // optional fixed64 party_lobby_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_party_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_lobby_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyQueueForStandby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional fixed64 party_lobby_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->party_lobby_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyQueueForStandby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 party_lobby_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->party_lobby_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyQueueForStandby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 party_lobby_id = 2;
    if (has_party_lobby_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyQueueForStandby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyQueueForStandby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyQueueForStandby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForStandby::MergeFrom(const CMsgPartyQueueForStandby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_party_lobby_id(from.party_lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyQueueForStandby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForStandby::CopyFrom(const CMsgPartyQueueForStandby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForStandby::IsInitialized() const {
  
  return true;
}

void CMsgPartyQueueForStandby::Swap(CMsgPartyQueueForStandby* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(party_lobby_id_, other->party_lobby_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyQueueForStandby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyQueueForStandby_descriptor_;
  metadata.reflection = CMsgPartyQueueForStandby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyQueueForStandbyResponse::CMsgPartyQueueForStandbyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyQueueForStandbyResponse::InitAsDefaultInstance() {
}

CMsgPartyQueueForStandbyResponse::CMsgPartyQueueForStandbyResponse(const CMsgPartyQueueForStandbyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyQueueForStandbyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyQueueForStandbyResponse::~CMsgPartyQueueForStandbyResponse() {
  SharedDtor();
}

void CMsgPartyQueueForStandbyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyQueueForStandbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyQueueForStandbyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyQueueForStandbyResponse_descriptor_;
}

const CMsgPartyQueueForStandbyResponse& CMsgPartyQueueForStandbyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyQueueForStandbyResponse* CMsgPartyQueueForStandbyResponse::default_instance_ = NULL;

CMsgPartyQueueForStandbyResponse* CMsgPartyQueueForStandbyResponse::New() const {
  return new CMsgPartyQueueForStandbyResponse;
}

void CMsgPartyQueueForStandbyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyQueueForStandbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyQueueForStandbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyQueueForStandbyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyQueueForStandbyResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyQueueForStandbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyQueueForStandbyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyQueueForStandbyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForStandbyResponse::MergeFrom(const CMsgPartyQueueForStandbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyQueueForStandbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForStandbyResponse::CopyFrom(const CMsgPartyQueueForStandbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForStandbyResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyQueueForStandbyResponse::Swap(CMsgPartyQueueForStandbyResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyQueueForStandbyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyQueueForStandbyResponse_descriptor_;
  metadata.reflection = CMsgPartyQueueForStandbyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyRemoveFromQueue::kPartyIdFieldNumber;
const int CMsgPartyRemoveFromQueue::kMatchGroupFieldNumber;
#endif  // !_MSC_VER

CMsgPartyRemoveFromQueue::CMsgPartyRemoveFromQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyRemoveFromQueue::InitAsDefaultInstance() {
}

CMsgPartyRemoveFromQueue::CMsgPartyRemoveFromQueue(const CMsgPartyRemoveFromQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueue::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  match_group_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyRemoveFromQueue::~CMsgPartyRemoveFromQueue() {
  SharedDtor();
}

void CMsgPartyRemoveFromQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyRemoveFromQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyRemoveFromQueue_descriptor_;
}

const CMsgPartyRemoveFromQueue& CMsgPartyRemoveFromQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyRemoveFromQueue* CMsgPartyRemoveFromQueue::default_instance_ = NULL;

CMsgPartyRemoveFromQueue* CMsgPartyRemoveFromQueue::New() const {
  return new CMsgPartyRemoveFromQueue;
}

void CMsgPartyRemoveFromQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    match_group_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyRemoveFromQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_group;
        break;
      }
      
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyRemoveFromQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyRemoveFromQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyRemoveFromQueue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyRemoveFromQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyRemoveFromQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyRemoveFromQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromQueue::MergeFrom(const CMsgPartyRemoveFromQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_match_group(from.match_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyRemoveFromQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueue::CopyFrom(const CMsgPartyRemoveFromQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromQueue::IsInitialized() const {
  
  return true;
}

void CMsgPartyRemoveFromQueue::Swap(CMsgPartyRemoveFromQueue* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(match_group_, other->match_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyRemoveFromQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyRemoveFromQueue_descriptor_;
  metadata.reflection = CMsgPartyRemoveFromQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyRemoveFromQueueResponse::CMsgPartyRemoveFromQueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyRemoveFromQueueResponse::InitAsDefaultInstance() {
}

CMsgPartyRemoveFromQueueResponse::CMsgPartyRemoveFromQueueResponse(const CMsgPartyRemoveFromQueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueueResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyRemoveFromQueueResponse::~CMsgPartyRemoveFromQueueResponse() {
  SharedDtor();
}

void CMsgPartyRemoveFromQueueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyRemoveFromQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyRemoveFromQueueResponse_descriptor_;
}

const CMsgPartyRemoveFromQueueResponse& CMsgPartyRemoveFromQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyRemoveFromQueueResponse* CMsgPartyRemoveFromQueueResponse::default_instance_ = NULL;

CMsgPartyRemoveFromQueueResponse* CMsgPartyRemoveFromQueueResponse::New() const {
  return new CMsgPartyRemoveFromQueueResponse;
}

void CMsgPartyRemoveFromQueueResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyRemoveFromQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyRemoveFromQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyRemoveFromQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyRemoveFromQueueResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyRemoveFromQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyRemoveFromQueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyRemoveFromQueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromQueueResponse::MergeFrom(const CMsgPartyRemoveFromQueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyRemoveFromQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueueResponse::CopyFrom(const CMsgPartyRemoveFromQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromQueueResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyRemoveFromQueueResponse::Swap(CMsgPartyRemoveFromQueueResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyRemoveFromQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyRemoveFromQueueResponse_descriptor_;
  metadata.reflection = CMsgPartyRemoveFromQueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyRemoveFromStandbyQueue::kPartyIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyRemoveFromStandbyQueue::CMsgPartyRemoveFromStandbyQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyRemoveFromStandbyQueue::InitAsDefaultInstance() {
}

CMsgPartyRemoveFromStandbyQueue::CMsgPartyRemoveFromStandbyQueue(const CMsgPartyRemoveFromStandbyQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueue::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyRemoveFromStandbyQueue::~CMsgPartyRemoveFromStandbyQueue() {
  SharedDtor();
}

void CMsgPartyRemoveFromStandbyQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyRemoveFromStandbyQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromStandbyQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyRemoveFromStandbyQueue_descriptor_;
}

const CMsgPartyRemoveFromStandbyQueue& CMsgPartyRemoveFromStandbyQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyRemoveFromStandbyQueue* CMsgPartyRemoveFromStandbyQueue::default_instance_ = NULL;

CMsgPartyRemoveFromStandbyQueue* CMsgPartyRemoveFromStandbyQueue::New() const {
  return new CMsgPartyRemoveFromStandbyQueue;
}

void CMsgPartyRemoveFromStandbyQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyRemoveFromStandbyQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyRemoveFromStandbyQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyRemoveFromStandbyQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyRemoveFromStandbyQueue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyRemoveFromStandbyQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyRemoveFromStandbyQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyRemoveFromStandbyQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromStandbyQueue::MergeFrom(const CMsgPartyRemoveFromStandbyQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyRemoveFromStandbyQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueue::CopyFrom(const CMsgPartyRemoveFromStandbyQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromStandbyQueue::IsInitialized() const {
  
  return true;
}

void CMsgPartyRemoveFromStandbyQueue::Swap(CMsgPartyRemoveFromStandbyQueue* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyRemoveFromStandbyQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyRemoveFromStandbyQueue_descriptor_;
  metadata.reflection = CMsgPartyRemoveFromStandbyQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyRemoveFromStandbyQueueResponse::CMsgPartyRemoveFromStandbyQueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyRemoveFromStandbyQueueResponse::InitAsDefaultInstance() {
}

CMsgPartyRemoveFromStandbyQueueResponse::CMsgPartyRemoveFromStandbyQueueResponse(const CMsgPartyRemoveFromStandbyQueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueueResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyRemoveFromStandbyQueueResponse::~CMsgPartyRemoveFromStandbyQueueResponse() {
  SharedDtor();
}

void CMsgPartyRemoveFromStandbyQueueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyRemoveFromStandbyQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyRemoveFromStandbyQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyRemoveFromStandbyQueueResponse_descriptor_;
}

const CMsgPartyRemoveFromStandbyQueueResponse& CMsgPartyRemoveFromStandbyQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyRemoveFromStandbyQueueResponse* CMsgPartyRemoveFromStandbyQueueResponse::default_instance_ = NULL;

CMsgPartyRemoveFromStandbyQueueResponse* CMsgPartyRemoveFromStandbyQueueResponse::New() const {
  return new CMsgPartyRemoveFromStandbyQueueResponse;
}

void CMsgPartyRemoveFromStandbyQueueResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyRemoveFromStandbyQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyRemoveFromStandbyQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyRemoveFromStandbyQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyRemoveFromStandbyQueueResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyRemoveFromStandbyQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyRemoveFromStandbyQueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyRemoveFromStandbyQueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromStandbyQueueResponse::MergeFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyRemoveFromStandbyQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueueResponse::CopyFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromStandbyQueueResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyRemoveFromStandbyQueueResponse::Swap(CMsgPartyRemoveFromStandbyQueueResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyRemoveFromStandbyQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyRemoveFromStandbyQueueResponse_descriptor_;
  metadata.reflection = CMsgPartyRemoveFromStandbyQueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyInvitePlayer::kPartyIdFieldNumber;
const int CMsgPartyInvitePlayer::kPlayerIdFieldNumber;
const int CMsgPartyInvitePlayer::kExpectingRequestToJoinFieldNumber;
#endif  // !_MSC_VER

CMsgPartyInvitePlayer::CMsgPartyInvitePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyInvitePlayer::InitAsDefaultInstance() {
}

CMsgPartyInvitePlayer::CMsgPartyInvitePlayer(const CMsgPartyInvitePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyInvitePlayer::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = GOOGLE_ULONGLONG(0);
  expecting_request_to_join_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyInvitePlayer::~CMsgPartyInvitePlayer() {
  SharedDtor();
}

void CMsgPartyInvitePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyInvitePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyInvitePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyInvitePlayer_descriptor_;
}

const CMsgPartyInvitePlayer& CMsgPartyInvitePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyInvitePlayer* CMsgPartyInvitePlayer::default_instance_ = NULL;

CMsgPartyInvitePlayer* CMsgPartyInvitePlayer::New() const {
  return new CMsgPartyInvitePlayer;
}

void CMsgPartyInvitePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = GOOGLE_ULONGLONG(0);
    expecting_request_to_join_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyInvitePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_id;
        break;
      }
      
      // optional fixed64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expecting_request_to_join;
        break;
      }
      
      // optional bool expecting_request_to_join = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expecting_request_to_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expecting_request_to_join_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyInvitePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional fixed64 player_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_id(), output);
  }
  
  // optional bool expecting_request_to_join = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->expecting_request_to_join(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyInvitePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 player_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_id(), target);
  }
  
  // optional bool expecting_request_to_join = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->expecting_request_to_join(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyInvitePlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool expecting_request_to_join = 3;
    if (has_expecting_request_to_join()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyInvitePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyInvitePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyInvitePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyInvitePlayer::MergeFrom(const CMsgPartyInvitePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_player_id(from.player_id());
    }
    if (from._has_bit(2)) {
      set_expecting_request_to_join(from.expecting_request_to_join());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyInvitePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInvitePlayer::CopyFrom(const CMsgPartyInvitePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInvitePlayer::IsInitialized() const {
  
  return true;
}

void CMsgPartyInvitePlayer::Swap(CMsgPartyInvitePlayer* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(expecting_request_to_join_, other->expecting_request_to_join_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyInvitePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyInvitePlayer_descriptor_;
  metadata.reflection = CMsgPartyInvitePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyRequestJoinPlayer::kCurrentPartyIdFieldNumber;
const int CMsgPartyRequestJoinPlayer::kJoinPlayerIdFieldNumber;
const int CMsgPartyRequestJoinPlayer::kJoinPartyIdFieldNumber;
const int CMsgPartyRequestJoinPlayer::kExpectingInviteFieldNumber;
#endif  // !_MSC_VER

CMsgPartyRequestJoinPlayer::CMsgPartyRequestJoinPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyRequestJoinPlayer::InitAsDefaultInstance() {
}

CMsgPartyRequestJoinPlayer::CMsgPartyRequestJoinPlayer(const CMsgPartyRequestJoinPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyRequestJoinPlayer::SharedCtor() {
  _cached_size_ = 0;
  current_party_id_ = GOOGLE_ULONGLONG(0);
  join_player_id_ = GOOGLE_ULONGLONG(0);
  join_party_id_ = GOOGLE_ULONGLONG(0);
  expecting_invite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyRequestJoinPlayer::~CMsgPartyRequestJoinPlayer() {
  SharedDtor();
}

void CMsgPartyRequestJoinPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyRequestJoinPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyRequestJoinPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyRequestJoinPlayer_descriptor_;
}

const CMsgPartyRequestJoinPlayer& CMsgPartyRequestJoinPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyRequestJoinPlayer* CMsgPartyRequestJoinPlayer::default_instance_ = NULL;

CMsgPartyRequestJoinPlayer* CMsgPartyRequestJoinPlayer::New() const {
  return new CMsgPartyRequestJoinPlayer;
}

void CMsgPartyRequestJoinPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_party_id_ = GOOGLE_ULONGLONG(0);
    join_player_id_ = GOOGLE_ULONGLONG(0);
    join_party_id_ = GOOGLE_ULONGLONG(0);
    expecting_invite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyRequestJoinPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 current_party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &current_party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_join_player_id;
        break;
      }
      
      // optional fixed64 join_player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_join_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &join_player_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_join_party_id;
        break;
      }
      
      // optional fixed64 join_party_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_join_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &join_party_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expecting_invite;
        break;
      }
      
      // optional bool expecting_invite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expecting_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expecting_invite_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyRequestJoinPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 current_party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->current_party_id(), output);
  }
  
  // optional fixed64 join_player_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->join_player_id(), output);
  }
  
  // optional fixed64 join_party_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->join_party_id(), output);
  }
  
  // optional bool expecting_invite = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->expecting_invite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyRequestJoinPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 current_party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->current_party_id(), target);
  }
  
  // optional fixed64 join_player_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->join_player_id(), target);
  }
  
  // optional fixed64 join_party_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->join_party_id(), target);
  }
  
  // optional bool expecting_invite = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->expecting_invite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyRequestJoinPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 current_party_id = 1;
    if (has_current_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 join_player_id = 2;
    if (has_join_player_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 join_party_id = 3;
    if (has_join_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool expecting_invite = 4;
    if (has_expecting_invite()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyRequestJoinPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyRequestJoinPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyRequestJoinPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyRequestJoinPlayer::MergeFrom(const CMsgPartyRequestJoinPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_party_id(from.current_party_id());
    }
    if (from._has_bit(1)) {
      set_join_player_id(from.join_player_id());
    }
    if (from._has_bit(2)) {
      set_join_party_id(from.join_party_id());
    }
    if (from._has_bit(3)) {
      set_expecting_invite(from.expecting_invite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyRequestJoinPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRequestJoinPlayer::CopyFrom(const CMsgPartyRequestJoinPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRequestJoinPlayer::IsInitialized() const {
  
  return true;
}

void CMsgPartyRequestJoinPlayer::Swap(CMsgPartyRequestJoinPlayer* other) {
  if (other != this) {
    std::swap(current_party_id_, other->current_party_id_);
    std::swap(join_player_id_, other->join_player_id_);
    std::swap(join_party_id_, other->join_party_id_);
    std::swap(expecting_invite_, other->expecting_invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyRequestJoinPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyRequestJoinPlayer_descriptor_;
  metadata.reflection = CMsgPartyRequestJoinPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyClearPendingPlayer::kPartyIdFieldNumber;
const int CMsgPartyClearPendingPlayer::kPendingPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyClearPendingPlayer::CMsgPartyClearPendingPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyClearPendingPlayer::InitAsDefaultInstance() {
}

CMsgPartyClearPendingPlayer::CMsgPartyClearPendingPlayer(const CMsgPartyClearPendingPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayer::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  pending_player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyClearPendingPlayer::~CMsgPartyClearPendingPlayer() {
  SharedDtor();
}

void CMsgPartyClearPendingPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyClearPendingPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyClearPendingPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyClearPendingPlayer_descriptor_;
}

const CMsgPartyClearPendingPlayer& CMsgPartyClearPendingPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyClearPendingPlayer* CMsgPartyClearPendingPlayer::default_instance_ = NULL;

CMsgPartyClearPendingPlayer* CMsgPartyClearPendingPlayer::New() const {
  return new CMsgPartyClearPendingPlayer;
}

void CMsgPartyClearPendingPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    pending_player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyClearPendingPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_pending_player_id;
        break;
      }
      
      // optional fixed64 pending_player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pending_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &pending_player_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyClearPendingPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional fixed64 pending_player_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->pending_player_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyClearPendingPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 pending_player_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->pending_player_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyClearPendingPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 pending_player_id = 2;
    if (has_pending_player_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyClearPendingPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyClearPendingPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyClearPendingPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyClearPendingPlayer::MergeFrom(const CMsgPartyClearPendingPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_pending_player_id(from.pending_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyClearPendingPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayer::CopyFrom(const CMsgPartyClearPendingPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearPendingPlayer::IsInitialized() const {
  
  return true;
}

void CMsgPartyClearPendingPlayer::Swap(CMsgPartyClearPendingPlayer* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(pending_player_id_, other->pending_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyClearPendingPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyClearPendingPlayer_descriptor_;
  metadata.reflection = CMsgPartyClearPendingPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyClearPendingPlayerResponse::CMsgPartyClearPendingPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyClearPendingPlayerResponse::InitAsDefaultInstance() {
}

CMsgPartyClearPendingPlayerResponse::CMsgPartyClearPendingPlayerResponse(const CMsgPartyClearPendingPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyClearPendingPlayerResponse::~CMsgPartyClearPendingPlayerResponse() {
  SharedDtor();
}

void CMsgPartyClearPendingPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyClearPendingPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyClearPendingPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyClearPendingPlayerResponse_descriptor_;
}

const CMsgPartyClearPendingPlayerResponse& CMsgPartyClearPendingPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyClearPendingPlayerResponse* CMsgPartyClearPendingPlayerResponse::default_instance_ = NULL;

CMsgPartyClearPendingPlayerResponse* CMsgPartyClearPendingPlayerResponse::New() const {
  return new CMsgPartyClearPendingPlayerResponse;
}

void CMsgPartyClearPendingPlayerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyClearPendingPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyClearPendingPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyClearPendingPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyClearPendingPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyClearPendingPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyClearPendingPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyClearPendingPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyClearPendingPlayerResponse::MergeFrom(const CMsgPartyClearPendingPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyClearPendingPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayerResponse::CopyFrom(const CMsgPartyClearPendingPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearPendingPlayerResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyClearPendingPlayerResponse::Swap(CMsgPartyClearPendingPlayerResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyClearPendingPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyClearPendingPlayerResponse_descriptor_;
  metadata.reflection = CMsgPartyClearPendingPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyClearOtherPartyRequest::kOtherPartyIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyClearOtherPartyRequest::CMsgPartyClearOtherPartyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyClearOtherPartyRequest::InitAsDefaultInstance() {
}

CMsgPartyClearOtherPartyRequest::CMsgPartyClearOtherPartyRequest(const CMsgPartyClearOtherPartyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  other_party_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyClearOtherPartyRequest::~CMsgPartyClearOtherPartyRequest() {
  SharedDtor();
}

void CMsgPartyClearOtherPartyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyClearOtherPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyClearOtherPartyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyClearOtherPartyRequest_descriptor_;
}

const CMsgPartyClearOtherPartyRequest& CMsgPartyClearOtherPartyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyClearOtherPartyRequest* CMsgPartyClearOtherPartyRequest::default_instance_ = NULL;

CMsgPartyClearOtherPartyRequest* CMsgPartyClearOtherPartyRequest::New() const {
  return new CMsgPartyClearOtherPartyRequest;
}

void CMsgPartyClearOtherPartyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    other_party_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyClearOtherPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 other_party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &other_party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyClearOtherPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 other_party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->other_party_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyClearOtherPartyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 other_party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->other_party_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyClearOtherPartyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 other_party_id = 1;
    if (has_other_party_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyClearOtherPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyClearOtherPartyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyClearOtherPartyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyClearOtherPartyRequest::MergeFrom(const CMsgPartyClearOtherPartyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_other_party_id(from.other_party_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyClearOtherPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequest::CopyFrom(const CMsgPartyClearOtherPartyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearOtherPartyRequest::IsInitialized() const {
  
  return true;
}

void CMsgPartyClearOtherPartyRequest::Swap(CMsgPartyClearOtherPartyRequest* other) {
  if (other != this) {
    std::swap(other_party_id_, other->other_party_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyClearOtherPartyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyClearOtherPartyRequest_descriptor_;
  metadata.reflection = CMsgPartyClearOtherPartyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPartyClearOtherPartyRequestResponse::CMsgPartyClearOtherPartyRequestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyClearOtherPartyRequestResponse::InitAsDefaultInstance() {
}

CMsgPartyClearOtherPartyRequestResponse::CMsgPartyClearOtherPartyRequestResponse(const CMsgPartyClearOtherPartyRequestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequestResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyClearOtherPartyRequestResponse::~CMsgPartyClearOtherPartyRequestResponse() {
  SharedDtor();
}

void CMsgPartyClearOtherPartyRequestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyClearOtherPartyRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyClearOtherPartyRequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyClearOtherPartyRequestResponse_descriptor_;
}

const CMsgPartyClearOtherPartyRequestResponse& CMsgPartyClearOtherPartyRequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyClearOtherPartyRequestResponse* CMsgPartyClearOtherPartyRequestResponse::default_instance_ = NULL;

CMsgPartyClearOtherPartyRequestResponse* CMsgPartyClearOtherPartyRequestResponse::New() const {
  return new CMsgPartyClearOtherPartyRequestResponse;
}

void CMsgPartyClearOtherPartyRequestResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyClearOtherPartyRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPartyClearOtherPartyRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyClearOtherPartyRequestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyClearOtherPartyRequestResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyClearOtherPartyRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyClearOtherPartyRequestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyClearOtherPartyRequestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyClearOtherPartyRequestResponse::MergeFrom(const CMsgPartyClearOtherPartyRequestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyClearOtherPartyRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequestResponse::CopyFrom(const CMsgPartyClearOtherPartyRequestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearOtherPartyRequestResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyClearOtherPartyRequestResponse::Swap(CMsgPartyClearOtherPartyRequestResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyClearOtherPartyRequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyClearOtherPartyRequestResponse_descriptor_;
  metadata.reflection = CMsgPartyClearOtherPartyRequestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyPromoteToLeader::kPartyIdFieldNumber;
const int CMsgPartyPromoteToLeader::kNewLeaderIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyPromoteToLeader::CMsgPartyPromoteToLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyPromoteToLeader::InitAsDefaultInstance() {
}

CMsgPartyPromoteToLeader::CMsgPartyPromoteToLeader(const CMsgPartyPromoteToLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyPromoteToLeader::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  new_leader_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyPromoteToLeader::~CMsgPartyPromoteToLeader() {
  SharedDtor();
}

void CMsgPartyPromoteToLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyPromoteToLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyPromoteToLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyPromoteToLeader_descriptor_;
}

const CMsgPartyPromoteToLeader& CMsgPartyPromoteToLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyPromoteToLeader* CMsgPartyPromoteToLeader::default_instance_ = NULL;

CMsgPartyPromoteToLeader* CMsgPartyPromoteToLeader::New() const {
  return new CMsgPartyPromoteToLeader;
}

void CMsgPartyPromoteToLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    new_leader_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyPromoteToLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_new_leader_id;
        break;
      }
      
      // optional fixed64 new_leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_leader_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyPromoteToLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional fixed64 new_leader_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->new_leader_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyPromoteToLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 new_leader_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->new_leader_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyPromoteToLeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 new_leader_id = 2;
    if (has_new_leader_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyPromoteToLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyPromoteToLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyPromoteToLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyPromoteToLeader::MergeFrom(const CMsgPartyPromoteToLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_new_leader_id(from.new_leader_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyPromoteToLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyPromoteToLeader::CopyFrom(const CMsgPartyPromoteToLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyPromoteToLeader::IsInitialized() const {
  
  return true;
}

void CMsgPartyPromoteToLeader::Swap(CMsgPartyPromoteToLeader* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(new_leader_id_, other->new_leader_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyPromoteToLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyPromoteToLeader_descriptor_;
  metadata.reflection = CMsgPartyPromoteToLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyKickMember::kPartyIdFieldNumber;
const int CMsgPartyKickMember::kTargetIdFieldNumber;
#endif  // !_MSC_VER

CMsgPartyKickMember::CMsgPartyKickMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyKickMember::InitAsDefaultInstance() {
}

CMsgPartyKickMember::CMsgPartyKickMember(const CMsgPartyKickMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyKickMember::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyKickMember::~CMsgPartyKickMember() {
  SharedDtor();
}

void CMsgPartyKickMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyKickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyKickMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyKickMember_descriptor_;
}

const CMsgPartyKickMember& CMsgPartyKickMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyKickMember* CMsgPartyKickMember::default_instance_ = NULL;

CMsgPartyKickMember* CMsgPartyKickMember::New() const {
  return new CMsgPartyKickMember;
}

void CMsgPartyKickMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyKickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_id;
        break;
      }
      
      // optional fixed64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyKickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional fixed64 target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyKickMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyKickMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyKickMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyKickMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyKickMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyKickMember::MergeFrom(const CMsgPartyKickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyKickMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyKickMember::CopyFrom(const CMsgPartyKickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyKickMember::IsInitialized() const {
  
  return true;
}

void CMsgPartyKickMember::Swap(CMsgPartyKickMember* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyKickMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyKickMember_descriptor_;
  metadata.reflection = CMsgPartyKickMember_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgPartySendChat::_default_msg_;
#ifndef _MSC_VER
const int CMsgPartySendChat::kPartyIdFieldNumber;
const int CMsgPartySendChat::kMsgFieldNumber;
#endif  // !_MSC_VER

CMsgPartySendChat::CMsgPartySendChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartySendChat::InitAsDefaultInstance() {
}

CMsgPartySendChat::CMsgPartySendChat(const CMsgPartySendChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartySendChat::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartySendChat::~CMsgPartySendChat() {
  SharedDtor();
}

void CMsgPartySendChat::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPartySendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartySendChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartySendChat_descriptor_;
}

const CMsgPartySendChat& CMsgPartySendChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartySendChat* CMsgPartySendChat::default_instance_ = NULL;

CMsgPartySendChat* CMsgPartySendChat::New() const {
  return new CMsgPartySendChat;
}

void CMsgPartySendChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartySendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartySendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  // optional string msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartySendChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  // optional string msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartySendChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartySendChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartySendChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartySendChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartySendChat::MergeFrom(const CMsgPartySendChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartySendChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySendChat::CopyFrom(const CMsgPartySendChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySendChat::IsInitialized() const {
  
  return true;
}

void CMsgPartySendChat::Swap(CMsgPartySendChat* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartySendChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartySendChat_descriptor_;
  metadata.reflection = CMsgPartySendChat_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgPartyChatMsg::_default_msg_;
#ifndef _MSC_VER
const int CMsgPartyChatMsg::kTypeFieldNumber;
const int CMsgPartyChatMsg::kActorIdFieldNumber;
const int CMsgPartyChatMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

CMsgPartyChatMsg::CMsgPartyChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyChatMsg::InitAsDefaultInstance() {
}

CMsgPartyChatMsg::CMsgPartyChatMsg(const CMsgPartyChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyChatMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  actor_id_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyChatMsg::~CMsgPartyChatMsg() {
  SharedDtor();
}

void CMsgPartyChatMsg::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPartyChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyChatMsg_descriptor_;
}

const CMsgPartyChatMsg& CMsgPartyChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyChatMsg* CMsgPartyChatMsg::default_instance_ = NULL;

CMsgPartyChatMsg* CMsgPartyChatMsg::New() const {
  return new CMsgPartyChatMsg;
}

void CMsgPartyChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    actor_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFPartyChatType_IsValid(value)) {
            set_type(static_cast< ETFPartyChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_actor_id;
        break;
      }
      
      // optional fixed64 actor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional fixed64 actor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->actor_id(), output);
  }
  
  // optional string msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional fixed64 actor_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->actor_id(), target);
  }
  
  // optional string msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyChatMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional fixed64 actor_id = 2;
    if (has_actor_id()) {
      total_size += 1 + 8;
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyChatMsg::MergeFrom(const CMsgPartyChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_actor_id(from.actor_id());
    }
    if (from._has_bit(2)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyChatMsg::CopyFrom(const CMsgPartyChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyChatMsg::IsInitialized() const {
  
  return true;
}

void CMsgPartyChatMsg::Swap(CMsgPartyChatMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(actor_id_, other->actor_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyChatMsg_descriptor_;
  metadata.reflection = CMsgPartyChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFParty_QueueEntry::kMatchGroupFieldNumber;
const int CSOTFParty_QueueEntry::kQueuedTimeFieldNumber;
#endif  // !_MSC_VER

CSOTFParty_QueueEntry::CSOTFParty_QueueEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFParty_QueueEntry::InitAsDefaultInstance() {
}

CSOTFParty_QueueEntry::CSOTFParty_QueueEntry(const CSOTFParty_QueueEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFParty_QueueEntry::SharedCtor() {
  _cached_size_ = 0;
  match_group_ = -1;
  queued_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFParty_QueueEntry::~CSOTFParty_QueueEntry() {
  SharedDtor();
}

void CSOTFParty_QueueEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFParty_QueueEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFParty_QueueEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFParty_QueueEntry_descriptor_;
}

const CSOTFParty_QueueEntry& CSOTFParty_QueueEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFParty_QueueEntry* CSOTFParty_QueueEntry::default_instance_ = NULL;

CSOTFParty_QueueEntry* CSOTFParty_QueueEntry::New() const {
  return new CSOTFParty_QueueEntry;
}

void CSOTFParty_QueueEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_group_ = -1;
    queued_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFParty_QueueEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_queued_time;
        break;
      }
      
      // optional fixed32 queued_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_queued_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &queued_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFParty_QueueEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_group(), output);
  }
  
  // optional fixed32 queued_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->queued_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFParty_QueueEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_group(), target);
  }
  
  // optional fixed32 queued_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->queued_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFParty_QueueEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_group());
    }
    
    // optional fixed32 queued_time = 2;
    if (has_queued_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFParty_QueueEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFParty_QueueEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFParty_QueueEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFParty_QueueEntry::MergeFrom(const CSOTFParty_QueueEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(1)) {
      set_queued_time(from.queued_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFParty_QueueEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFParty_QueueEntry::CopyFrom(const CSOTFParty_QueueEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFParty_QueueEntry::IsInitialized() const {
  
  return true;
}

void CSOTFParty_QueueEntry::Swap(CSOTFParty_QueueEntry* other) {
  if (other != this) {
    std::swap(match_group_, other->match_group_);
    std::swap(queued_time_, other->queued_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFParty_QueueEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFParty_QueueEntry_descriptor_;
  metadata.reflection = CSOTFParty_QueueEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSOTFParty::kPartyIdFieldNumber;
const int CSOTFParty::kLeaderIdFieldNumber;
const int CSOTFParty::kMemberIdsFieldNumber;
const int CSOTFParty::kMembersFieldNumber;
const int CSOTFParty::kAssociatedLobbyIdFieldNumber;
const int CSOTFParty::kAssociatedLobbyMatchGroupFieldNumber;
const int CSOTFParty::kMatchmakingQueuesFieldNumber;
const int CSOTFParty::kGroupCriteriaFieldNumber;
const int CSOTFParty::kCasualBannedTimeFieldNumber;
const int CSOTFParty::kCasualLowPriorityTimeFieldNumber;
const int CSOTFParty::kRankedBannedTimeFieldNumber;
const int CSOTFParty::kRankedLowPriorityTimeFieldNumber;
const int CSOTFParty::kLeaderUiStateFieldNumber;
const int CSOTFParty::kPendingMembersFieldNumber;
#endif  // !_MSC_VER

CSOTFParty::CSOTFParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFParty::InitAsDefaultInstance() {
  group_criteria_ = const_cast< ::CTFGroupMatchCriteriaProto*>(&::CTFGroupMatchCriteriaProto::default_instance());
  leader_ui_state_ = const_cast< ::TFSyncedMMUIState*>(&::TFSyncedMMUIState::default_instance());
}

CSOTFParty::CSOTFParty(const CSOTFParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFParty::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  associated_lobby_id_ = GOOGLE_ULONGLONG(0);
  associated_lobby_match_group_ = -1;
  group_criteria_ = NULL;
  casual_banned_time_ = 0u;
  casual_low_priority_time_ = 0u;
  ranked_banned_time_ = 0u;
  ranked_low_priority_time_ = 0u;
  leader_ui_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFParty::~CSOTFParty() {
  SharedDtor();
}

void CSOTFParty::SharedDtor() {
  if (this != default_instance_) {
    delete group_criteria_;
    delete leader_ui_state_;
  }
}

void CSOTFParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFParty_descriptor_;
}

const CSOTFParty& CSOTFParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFParty* CSOTFParty::default_instance_ = NULL;

CSOTFParty* CSOTFParty::New() const {
  return new CSOTFParty;
}

void CSOTFParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    leader_id_ = GOOGLE_ULONGLONG(0);
    associated_lobby_id_ = GOOGLE_ULONGLONG(0);
    associated_lobby_match_group_ = -1;
    if (_has_bit(7)) {
      if (group_criteria_ != NULL) group_criteria_->::CTFGroupMatchCriteriaProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    casual_banned_time_ = 0u;
    casual_low_priority_time_ = 0u;
    ranked_banned_time_ = 0u;
    ranked_low_priority_time_ = 0u;
    if (_has_bit(12)) {
      if (leader_ui_state_ != NULL) leader_ui_state_->::TFSyncedMMUIState::Clear();
    }
  }
  member_ids_.Clear();
  members_.Clear();
  matchmaking_queues_.Clear();
  pending_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_leader_id;
        break;
      }
      
      // optional fixed64 leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        break;
      }
      
      // repeated fixed64 member_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_member_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_member_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        if (input->ExpectTag(106)) goto parse_members;
        break;
      }
      
      // repeated .CSOTFPartyMember members = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_members;
        if (input->ExpectTag(144)) goto parse_casual_banned_time;
        break;
      }
      
      // optional uint32 casual_banned_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casual_banned_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_banned_time_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_casual_low_priority_time;
        break;
      }
      
      // optional uint32 casual_low_priority_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casual_low_priority_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_low_priority_time_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_associated_lobby_id;
        break;
      }
      
      // optional uint64 associated_lobby_id = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associated_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &associated_lobby_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_group_criteria;
        break;
      }
      
      // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_pending_members;
        break;
      }
      
      // repeated .TFPendingPartyMember pending_members = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pending_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pending_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_pending_members;
        if (input->ExpectTag(320)) goto parse_associated_lobby_match_group;
        break;
      }
      
      // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associated_lobby_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_associated_lobby_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_ranked_banned_time;
        break;
      }
      
      // optional uint32 ranked_banned_time = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranked_banned_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranked_banned_time_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_ranked_low_priority_time;
        break;
      }
      
      // optional uint32 ranked_low_priority_time = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranked_low_priority_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranked_low_priority_time_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_matchmaking_queues;
        break;
      }
      
      // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchmaking_queues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchmaking_queues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_matchmaking_queues;
        if (input->ExpectTag(354)) goto parse_leader_ui_state;
        break;
      }
      
      // optional .TFSyncedMMUIState leader_ui_state = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_ui_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader_ui_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }
  
  // optional fixed64 leader_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }
  
  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }
  
  // repeated .CSOTFPartyMember members = 13;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->members(i), output);
  }
  
  // optional uint32 casual_banned_time = 18;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->casual_banned_time(), output);
  }
  
  // optional uint32 casual_low_priority_time = 20;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->casual_low_priority_time(), output);
  }
  
  // optional uint64 associated_lobby_id = 35;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->associated_lobby_id(), output);
  }
  
  // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->group_criteria(), output);
  }
  
  // repeated .TFPendingPartyMember pending_members = 39;
  for (int i = 0; i < this->pending_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->pending_members(i), output);
  }
  
  // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->associated_lobby_match_group(), output);
  }
  
  // optional uint32 ranked_banned_time = 41;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ranked_banned_time(), output);
  }
  
  // optional uint32 ranked_low_priority_time = 42;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ranked_low_priority_time(), output);
  }
  
  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  for (int i = 0; i < this->matchmaking_queues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->matchmaking_queues(i), output);
  }
  
  // optional .TFSyncedMMUIState leader_ui_state = 44;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->leader_ui_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 leader_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }
  
  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->member_ids(i), target);
  }
  
  // repeated .CSOTFPartyMember members = 13;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->members(i), target);
  }
  
  // optional uint32 casual_banned_time = 18;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->casual_banned_time(), target);
  }
  
  // optional uint32 casual_low_priority_time = 20;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->casual_low_priority_time(), target);
  }
  
  // optional uint64 associated_lobby_id = 35;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->associated_lobby_id(), target);
  }
  
  // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->group_criteria(), target);
  }
  
  // repeated .TFPendingPartyMember pending_members = 39;
  for (int i = 0; i < this->pending_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->pending_members(i), target);
  }
  
  // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->associated_lobby_match_group(), target);
  }
  
  // optional uint32 ranked_banned_time = 41;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ranked_banned_time(), target);
  }
  
  // optional uint32 ranked_low_priority_time = 42;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ranked_low_priority_time(), target);
  }
  
  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  for (int i = 0; i < this->matchmaking_queues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->matchmaking_queues(i), target);
  }
  
  // optional .TFSyncedMMUIState leader_ui_state = 44;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->leader_ui_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 associated_lobby_id = 35;
    if (has_associated_lobby_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->associated_lobby_id());
    }
    
    // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
    if (has_associated_lobby_match_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->associated_lobby_match_group());
    }
    
    // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
    if (has_group_criteria()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_criteria());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 casual_banned_time = 18;
    if (has_casual_banned_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_banned_time());
    }
    
    // optional uint32 casual_low_priority_time = 20;
    if (has_casual_low_priority_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_low_priority_time());
    }
    
    // optional uint32 ranked_banned_time = 41;
    if (has_ranked_banned_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranked_banned_time());
    }
    
    // optional uint32 ranked_low_priority_time = 42;
    if (has_ranked_low_priority_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranked_low_priority_time());
    }
    
    // optional .TFSyncedMMUIState leader_ui_state = 44;
    if (has_leader_ui_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader_ui_state());
    }
    
  }
  // repeated fixed64 member_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->member_ids_size();
    total_size += 1 * this->member_ids_size() + data_size;
  }
  
  // repeated .CSOTFPartyMember members = 13;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  total_size += 2 * this->matchmaking_queues_size();
  for (int i = 0; i < this->matchmaking_queues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchmaking_queues(i));
  }
  
  // repeated .TFPendingPartyMember pending_members = 39;
  total_size += 2 * this->pending_members_size();
  for (int i = 0; i < this->pending_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pending_members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFParty::MergeFrom(const CSOTFParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  matchmaking_queues_.MergeFrom(from.matchmaking_queues_);
  pending_members_.MergeFrom(from.pending_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_leader_id(from.leader_id());
    }
    if (from._has_bit(4)) {
      set_associated_lobby_id(from.associated_lobby_id());
    }
    if (from._has_bit(5)) {
      set_associated_lobby_match_group(from.associated_lobby_match_group());
    }
    if (from._has_bit(7)) {
      mutable_group_criteria()->::CTFGroupMatchCriteriaProto::MergeFrom(from.group_criteria());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_casual_banned_time(from.casual_banned_time());
    }
    if (from._has_bit(9)) {
      set_casual_low_priority_time(from.casual_low_priority_time());
    }
    if (from._has_bit(10)) {
      set_ranked_banned_time(from.ranked_banned_time());
    }
    if (from._has_bit(11)) {
      set_ranked_low_priority_time(from.ranked_low_priority_time());
    }
    if (from._has_bit(12)) {
      mutable_leader_ui_state()->::TFSyncedMMUIState::MergeFrom(from.leader_ui_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFParty::CopyFrom(const CSOTFParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFParty::IsInitialized() const {
  
  return true;
}

void CSOTFParty::Swap(CSOTFParty* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(leader_id_, other->leader_id_);
    member_ids_.Swap(&other->member_ids_);
    members_.Swap(&other->members_);
    std::swap(associated_lobby_id_, other->associated_lobby_id_);
    std::swap(associated_lobby_match_group_, other->associated_lobby_match_group_);
    matchmaking_queues_.Swap(&other->matchmaking_queues_);
    std::swap(group_criteria_, other->group_criteria_);
    std::swap(casual_banned_time_, other->casual_banned_time_);
    std::swap(casual_low_priority_time_, other->casual_low_priority_time_);
    std::swap(ranked_banned_time_, other->ranked_banned_time_);
    std::swap(ranked_low_priority_time_, other->ranked_low_priority_time_);
    std::swap(leader_ui_state_, other->leader_ui_state_);
    pending_members_.Swap(&other->pending_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFParty_descriptor_;
  metadata.reflection = CSOTFParty_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSOTFPartyInvite_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPartyInvite_Type_descriptor_;
}
bool CSOTFPartyInvite_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSOTFPartyInvite_Type CSOTFPartyInvite::PENDING_INVITE;
const CSOTFPartyInvite_Type CSOTFPartyInvite::PENDING_JOIN_REQUEST;
const CSOTFPartyInvite_Type CSOTFPartyInvite::Type_MIN;
const CSOTFPartyInvite_Type CSOTFPartyInvite::Type_MAX;
const int CSOTFPartyInvite::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSOTFPartyInvite_PartyMember::kSteamidFieldNumber;
#endif  // !_MSC_VER

CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPartyInvite_PartyMember::InitAsDefaultInstance() {
}

CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember(const CSOTFPartyInvite_PartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPartyInvite_PartyMember::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPartyInvite_PartyMember::~CSOTFPartyInvite_PartyMember() {
  SharedDtor();
}

void CSOTFPartyInvite_PartyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyInvite_PartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPartyInvite_PartyMember_descriptor_;
}

const CSOTFPartyInvite_PartyMember& CSOTFPartyInvite_PartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPartyInvite_PartyMember* CSOTFPartyInvite_PartyMember::default_instance_ = NULL;

CSOTFPartyInvite_PartyMember* CSOTFPartyInvite_PartyMember::New() const {
  return new CSOTFPartyInvite_PartyMember;
}

void CSOTFPartyInvite_PartyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPartyInvite_PartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPartyInvite_PartyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPartyInvite_PartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPartyInvite_PartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const CSOTFPartyInvite_PartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const CSOTFPartyInvite_PartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite_PartyMember::IsInitialized() const {
  
  return true;
}

void CSOTFPartyInvite_PartyMember::Swap(CSOTFPartyInvite_PartyMember* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPartyInvite_PartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPartyInvite_PartyMember_descriptor_;
  metadata.reflection = CSOTFPartyInvite_PartyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSOTFPartyInvite::kGroupIdFieldNumber;
const int CSOTFPartyInvite::kInviterFieldNumber;
const int CSOTFPartyInvite::kMembersFieldNumber;
const int CSOTFPartyInvite::kTypeFieldNumber;
#endif  // !_MSC_VER

CSOTFPartyInvite::CSOTFPartyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPartyInvite::InitAsDefaultInstance() {
}

CSOTFPartyInvite::CSOTFPartyInvite(const CSOTFPartyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  inviter_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPartyInvite::~CSOTFPartyInvite() {
  SharedDtor();
}

void CSOTFPartyInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPartyInvite_descriptor_;
}

const CSOTFPartyInvite& CSOTFPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPartyInvite* CSOTFPartyInvite::default_instance_ = NULL;

CSOTFPartyInvite* CSOTFPartyInvite::New() const {
  return new CSOTFPartyInvite;
}

void CSOTFPartyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    inviter_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_inviter;
        break;
      }
      
      // optional fixed64 inviter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &inviter_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }
      
      // repeated .CSOTFPartyInvite.PartyMember members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFPartyInvite_Type_IsValid(value)) {
            set_type(static_cast< ::CSOTFPartyInvite_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 inviter = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->inviter(), output);
  }
  
  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }
  
  // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 inviter = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->inviter(), target);
  }
  
  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }
  
  // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPartyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 inviter = 2;
    if (has_inviter()) {
      total_size += 1 + 8;
    }
    
    // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPartyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPartyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite::MergeFrom(const CSOTFPartyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_group_id(from.group_id());
    }
    if (from._has_bit(1)) {
      set_inviter(from.inviter());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite::CopyFrom(const CSOTFPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite::IsInitialized() const {
  
  return true;
}

void CSOTFPartyInvite::Swap(CSOTFPartyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(inviter_, other->inviter_);
    members_.Swap(&other->members_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPartyInvite_descriptor_;
  metadata.reflection = CSOTFPartyInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CTFLobbyPlayerProto_ConnectState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFLobbyPlayerProto_ConnectState_descriptor_;
}
bool CTFLobbyPlayerProto_ConnectState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::INVALID;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::RESERVATION_PENDING;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::RESERVED;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::CONNECTED;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::DISCONNECTED;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::ConnectState_MIN;
const CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::ConnectState_MAX;
const int CTFLobbyPlayerProto::ConnectState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CTFLobbyPlayerProto_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFLobbyPlayerProto_Type_descriptor_;
}
bool CTFLobbyPlayerProto_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::INVALID_PLAYER;
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::MATCH_PLAYER;
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::STANDBY_PLAYER;
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::OBSERVING_PLAYER;
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::Type_MIN;
const CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::Type_MAX;
const int CTFLobbyPlayerProto::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CTFLobbyPlayerProto::_default_name_;
#ifndef _MSC_VER
const int CTFLobbyPlayerProto::kIdFieldNumber;
const int CTFLobbyPlayerProto::kTeamFieldNumber;
const int CTFLobbyPlayerProto::kConnectStateFieldNumber;
const int CTFLobbyPlayerProto::kNameFieldNumber;
const int CTFLobbyPlayerProto::kOriginalPartyIdFieldNumber;
const int CTFLobbyPlayerProto::kSquadSurplusFieldNumber;
const int CTFLobbyPlayerProto::kBadgeLevelFieldNumber;
const int CTFLobbyPlayerProto::kLastConnectTimeFieldNumber;
const int CTFLobbyPlayerProto::kTypeFieldNumber;
const int CTFLobbyPlayerProto::kNormalizedRatingFieldNumber;
const int CTFLobbyPlayerProto::kNormalizedUncertaintyFieldNumber;
const int CTFLobbyPlayerProto::kRankFieldNumber;
#endif  // !_MSC_VER

CTFLobbyPlayerProto::CTFLobbyPlayerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFLobbyPlayerProto::InitAsDefaultInstance() {
}

CTFLobbyPlayerProto::CTFLobbyPlayerProto(const CTFLobbyPlayerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFLobbyPlayerProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  team_ = 0;
  connect_state_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  original_party_id_ = GOOGLE_ULONGLONG(0);
  squad_surplus_ = false;
  badge_level_ = 0u;
  last_connect_time_ = 0u;
  type_ = 0;
  normalized_rating_ = 0;
  normalized_uncertainty_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFLobbyPlayerProto::~CTFLobbyPlayerProto() {
  SharedDtor();
}

void CTFLobbyPlayerProto::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CTFLobbyPlayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFLobbyPlayerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFLobbyPlayerProto_descriptor_;
}

const CTFLobbyPlayerProto& CTFLobbyPlayerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFLobbyPlayerProto* CTFLobbyPlayerProto::default_instance_ = NULL;

CTFLobbyPlayerProto* CTFLobbyPlayerProto::New() const {
  return new CTFLobbyPlayerProto;
}

void CTFLobbyPlayerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    team_ = 0;
    connect_state_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    original_party_id_ = GOOGLE_ULONGLONG(0);
    squad_surplus_ = false;
    badge_level_ = 0u;
    last_connect_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0;
    normalized_rating_ = 0;
    normalized_uncertainty_ = 0;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFLobbyPlayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }
      
      // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TF_GC_TEAM_IsValid(value)) {
            set_team(static_cast< TF_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_original_party_id;
        break;
      }
      
      // optional uint64 original_party_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_party_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_connect_state;
        break;
      }
      
      // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CTFLobbyPlayerProto_ConnectState_IsValid(value)) {
            set_connect_state(static_cast< ::CTFLobbyPlayerProto_ConnectState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_squad_surplus;
        break;
      }
      
      // optional bool squad_surplus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_squad_surplus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_badge_level;
        break;
      }
      
      // optional uint32 badge_level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_last_connect_time;
        break;
      }
      
      // optional uint32 last_connect_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_connect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_connect_time_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_type;
        break;
      }
      
      // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CTFLobbyPlayerProto_Type_IsValid(value)) {
            set_type(static_cast< ::CTFLobbyPlayerProto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_normalized_rating;
        break;
      }
      
      // optional double normalized_rating = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normalized_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalized_rating_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_normalized_uncertainty;
        break;
      }
      
      // optional double normalized_uncertainty = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normalized_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalized_uncertainty_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFLobbyPlayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }
  
  // optional string name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional uint64 original_party_id = 12;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->original_party_id(), output);
  }
  
  // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->connect_state(), output);
  }
  
  // optional bool squad_surplus = 14;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->squad_surplus(), output);
  }
  
  // optional uint32 badge_level = 15;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->badge_level(), output);
  }
  
  // optional uint32 last_connect_time = 17;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->last_connect_time(), output);
  }
  
  // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->type(), output);
  }
  
  // optional double normalized_rating = 20;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->normalized_rating(), output);
  }
  
  // optional uint32 rank = 21;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->rank(), output);
  }
  
  // optional double normalized_uncertainty = 22;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->normalized_uncertainty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFLobbyPlayerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }
  
  // optional string name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional uint64 original_party_id = 12;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->original_party_id(), target);
  }
  
  // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->connect_state(), target);
  }
  
  // optional bool squad_surplus = 14;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->squad_surplus(), target);
  }
  
  // optional uint32 badge_level = 15;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->badge_level(), target);
  }
  
  // optional uint32 last_connect_time = 17;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->last_connect_time(), target);
  }
  
  // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->type(), target);
  }
  
  // optional double normalized_rating = 20;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->normalized_rating(), target);
  }
  
  // optional uint32 rank = 21;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->rank(), target);
  }
  
  // optional double normalized_uncertainty = 22;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->normalized_uncertainty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFLobbyPlayerProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }
    
    // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
    if (has_connect_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_state());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint64 original_party_id = 12;
    if (has_original_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_party_id());
    }
    
    // optional bool squad_surplus = 14;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 badge_level = 15;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }
    
    // optional uint32 last_connect_time = 17;
    if (has_last_connect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_connect_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double normalized_rating = 20;
    if (has_normalized_rating()) {
      total_size += 2 + 8;
    }
    
    // optional double normalized_uncertainty = 22;
    if (has_normalized_uncertainty()) {
      total_size += 2 + 8;
    }
    
    // optional uint32 rank = 21;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFLobbyPlayerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFLobbyPlayerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFLobbyPlayerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFLobbyPlayerProto::MergeFrom(const CTFLobbyPlayerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
    if (from._has_bit(2)) {
      set_connect_state(from.connect_state());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_original_party_id(from.original_party_id());
    }
    if (from._has_bit(5)) {
      set_squad_surplus(from.squad_surplus());
    }
    if (from._has_bit(6)) {
      set_badge_level(from.badge_level());
    }
    if (from._has_bit(7)) {
      set_last_connect_time(from.last_connect_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_type(from.type());
    }
    if (from._has_bit(9)) {
      set_normalized_rating(from.normalized_rating());
    }
    if (from._has_bit(10)) {
      set_normalized_uncertainty(from.normalized_uncertainty());
    }
    if (from._has_bit(11)) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFLobbyPlayerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFLobbyPlayerProto::CopyFrom(const CTFLobbyPlayerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFLobbyPlayerProto::IsInitialized() const {
  
  return true;
}

void CTFLobbyPlayerProto::Swap(CTFLobbyPlayerProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(team_, other->team_);
    std::swap(connect_state_, other->connect_state_);
    std::swap(name_, other->name_);
    std::swap(original_party_id_, other->original_party_id_);
    std::swap(squad_surplus_, other->squad_surplus_);
    std::swap(badge_level_, other->badge_level_);
    std::swap(last_connect_time_, other->last_connect_time_);
    std::swap(type_, other->type_);
    std::swap(normalized_rating_, other->normalized_rating_);
    std::swap(normalized_uncertainty_, other->normalized_uncertainty_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFLobbyPlayerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFLobbyPlayerProto_descriptor_;
  metadata.reflection = CTFLobbyPlayerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTFLobbyInviteProto::kLobbyIdFieldNumber;
const int CTFLobbyInviteProto::kMatchGroupFieldNumber;
#endif  // !_MSC_VER

CTFLobbyInviteProto::CTFLobbyInviteProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTFLobbyInviteProto::InitAsDefaultInstance() {
}

CTFLobbyInviteProto::CTFLobbyInviteProto(const CTFLobbyInviteProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTFLobbyInviteProto::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_group_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTFLobbyInviteProto::~CTFLobbyInviteProto() {
  SharedDtor();
}

void CTFLobbyInviteProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTFLobbyInviteProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFLobbyInviteProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTFLobbyInviteProto_descriptor_;
}

const CTFLobbyInviteProto& CTFLobbyInviteProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CTFLobbyInviteProto* CTFLobbyInviteProto::default_instance_ = NULL;

CTFLobbyInviteProto* CTFLobbyInviteProto::New() const {
  return new CTFLobbyInviteProto;
}

void CTFLobbyInviteProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    match_group_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTFLobbyInviteProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_group;
        break;
      }
      
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ETFMatchGroup_IsValid(value)) {
            set_match_group(static_cast< ETFMatchGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTFLobbyInviteProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTFLobbyInviteProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }
  
  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTFLobbyInviteProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFLobbyInviteProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTFLobbyInviteProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTFLobbyInviteProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTFLobbyInviteProto::MergeFrom(const CTFLobbyInviteProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(1)) {
      set_match_group(from.match_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTFLobbyInviteProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFLobbyInviteProto::CopyFrom(const CTFLobbyInviteProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFLobbyInviteProto::IsInitialized() const {
  
  return true;
}

void CTFLobbyInviteProto::Swap(CTFLobbyInviteProto* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(match_group_, other->match_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTFLobbyInviteProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTFLobbyInviteProto_descriptor_;
  metadata.reflection = CTFLobbyInviteProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFGameServerLobby_State_descriptor_;
}
bool CSOTFGameServerLobby_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSOTFGameServerLobby_State CSOTFGameServerLobby::UNKNOWN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::SERVERSETUP;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::RUN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MIN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MAX;
const int CSOTFGameServerLobby::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_WarMatch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFGameServerLobby_WarMatch_descriptor_;
}
bool CSOTFGameServerLobby_WarMatch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::NOPE;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_PYRO;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_HEAVY;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MIN;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MAX;
const int CSOTFGameServerLobby::WarMatch_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CSOTFGameServerLobby::_default_connect_;
const ::std::string CSOTFGameServerLobby::_default_mannup_tour_name_;
const ::std::string CSOTFGameServerLobby::_default_map_name_;
const ::std::string CSOTFGameServerLobby::_default_mission_name_;
#ifndef _MSC_VER
const int CSOTFGameServerLobby::kLobbyIdFieldNumber;
const int CSOTFGameServerLobby::kMembersFieldNumber;
const int CSOTFGameServerLobby::kServerIdFieldNumber;
const int CSOTFGameServerLobby::kStateFieldNumber;
const int CSOTFGameServerLobby::kConnectFieldNumber;
const int CSOTFGameServerLobby::kGameStateFieldNumber;
const int CSOTFGameServerLobby::kInitialAverageMmRatingFieldNumber;
const int CSOTFGameServerLobby::kMannupTourNameFieldNumber;
const int CSOTFGameServerLobby::kMapNameFieldNumber;
const int CSOTFGameServerLobby::kMissionNameFieldNumber;
const int CSOTFGameServerLobby::kMatchGroupFieldNumber;
const int CSOTFGameServerLobby::kMatchIdFieldNumber;
const int CSOTFGameServerLobby::kFormedTimeFieldNumber;
const int CSOTFGameServerLobby::kFlagsFieldNumber;
const int CSOTFGameServerLobby::kLateJoinEligibleFieldNumber;
const int CSOTFGameServerLobby::kFixedMatchSizeFieldNumber;
const int CSOTFGameServerLobby::kIsWarMatchFieldNumber;
const int CSOTFGameServerLobby::kNextMapsForVoteFieldNumber;
const int CSOTFGameServerLobby::kLobbyMmVersionFieldNumber;
const int CSOTFGameServerLobby::kPendingMembersFieldNumber;
#endif  // !_MSC_VER

CSOTFGameServerLobby::CSOTFGameServerLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFGameServerLobby::InitAsDefaultInstance() {
}

CSOTFGameServerLobby::CSOTFGameServerLobby(const CSOTFGameServerLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFGameServerLobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  connect_ = const_cast< ::std::string*>(&_default_connect_);
  game_state_ = 0;
  initial_average_mm_rating_ = 0;
  mannup_tour_name_ = const_cast< ::std::string*>(&_default_mannup_tour_name_);
  map_name_ = const_cast< ::std::string*>(&_default_map_name_);
  mission_name_ = const_cast< ::std::string*>(&_default_mission_name_);
  match_group_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  formed_time_ = 0u;
  flags_ = 0u;
  late_join_eligible_ = false;
  fixed_match_size_ = 0u;
  is_war_match_ = 0;
  lobby_mm_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFGameServerLobby::~CSOTFGameServerLobby() {
  SharedDtor();
}

void CSOTFGameServerLobby::SharedDtor() {
  if (connect_ != &_default_connect_) {
    delete connect_;
  }
  if (mannup_tour_name_ != &_default_mannup_tour_name_) {
    delete mannup_tour_name_;
  }
  if (map_name_ != &_default_map_name_) {
    delete map_name_;
  }
  if (mission_name_ != &_default_mission_name_) {
    delete mission_name_;
  }
  if (this != default_instance_) {
  }
}

void CSOTFGameServerLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFGameServerLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFGameServerLobby_descriptor_;
}

const CSOTFGameServerLobby& CSOTFGameServerLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFGameServerLobby* CSOTFGameServerLobby::default_instance_ = NULL;

CSOTFGameServerLobby* CSOTFGameServerLobby::New() const {
  return new CSOTFGameServerLobby;
}

void CSOTFGameServerLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    server_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    if (_has_bit(4)) {
      if (connect_ != &_default_connect_) {
        connect_->clear();
      }
    }
    game_state_ = 0;
    initial_average_mm_rating_ = 0;
    if (_has_bit(7)) {
      if (mannup_tour_name_ != &_default_mannup_tour_name_) {
        mannup_tour_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (map_name_ != &_default_map_name_) {
        map_name_->clear();
      }
    }
    if (_has_bit(9)) {
      if (mission_name_ != &_default_mission_name_) {
        mission_name_->clear();
      }
    }
    match_group_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    formed_time_ = 0u;
    flags_ = 0u;
    late_join_eligible_ = false;
    fixed_match_size_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_war_match_ = 0;
    lobby_mm_version_ = 0u;
  }
  members_.Clear();
  next_maps_for_vote_.Clear();
  pending_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFGameServerLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }
      
      // repeated .CTFLobbyPlayerProto members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFGameServerLobby_State_IsValid(value)) {
            set_state(static_cast< ::CSOTFGameServerLobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connect;
        break;
      }
      
      // optional string connect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_server_id;
        break;
      }
      
      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_game_state;
        break;
      }
      
      // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TF_GC_GameState_IsValid(value)) {
            set_game_state(static_cast< TF_GC_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_initial_average_mm_rating;
        break;
      }
      
      // optional double initial_average_mm_rating = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_initial_average_mm_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_average_mm_rating_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_formed_time;
        break;
      }
      
      // optional uint32 formed_time = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formed_time_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_map_name;
        break;
      }
      
      // optional string map_name = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_mission_name;
        break;
      }
      
      // optional string mission_name = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission_name().data(), this->mission_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_match_group;
        break;
      }
      
      // optional uint32 match_group = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_group_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_mannup_tour_name;
        break;
      }
      
      // optional string mannup_tour_name = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mannup_tour_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mannup_tour_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mannup_tour_name().data(), this->mannup_tour_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_late_join_eligible;
        break;
      }
      
      // optional bool late_join_eligible = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_late_join_eligible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &late_join_eligible_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_fixed_match_size;
        break;
      }
      
      // optional uint32 fixed_match_size = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_match_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixed_match_size_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_is_war_match;
        break;
      }
      
      // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_war_match:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFGameServerLobby_WarMatch_IsValid(value)) {
            set_is_war_match(static_cast< ::CSOTFGameServerLobby_WarMatch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_next_maps_for_vote;
        break;
      }
      
      // repeated uint32 next_maps_for_vote = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_maps_for_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 376, input, this->mutable_next_maps_for_vote())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_next_maps_for_vote())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_next_maps_for_vote;
        if (input->ExpectTag(384)) goto parse_lobby_mm_version;
        break;
      }
      
      // optional uint32 lobby_mm_version = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_mm_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mm_version_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_pending_members;
        break;
      }
      
      // repeated .CTFLobbyPlayerProto pending_members = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pending_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pending_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_pending_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFGameServerLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lobby_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }
  
  // repeated .CTFLobbyPlayerProto members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }
  
  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }
  
  // optional string connect = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->connect(), output);
  }
  
  // optional fixed64 server_id = 6 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }
  
  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }
  
  // optional uint64 match_id = 30 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }
  
  // optional double initial_average_mm_rating = 32;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->initial_average_mm_rating(), output);
  }
  
  // optional uint32 formed_time = 36;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->formed_time(), output);
  }
  
  // optional string map_name = 38;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->map_name(), output);
  }
  
  // optional string mission_name = 39;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->mission_name(), output);
  }
  
  // optional uint32 match_group = 41;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_group(), output);
  }
  
  // optional string mannup_tour_name = 42;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mannup_tour_name().data(), this->mannup_tour_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->mannup_tour_name(), output);
  }
  
  // optional uint32 flags = 43;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->flags(), output);
  }
  
  // optional bool late_join_eligible = 44;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->late_join_eligible(), output);
  }
  
  // optional uint32 fixed_match_size = 45;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->fixed_match_size(), output);
  }
  
  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->is_war_match(), output);
  }
  
  // repeated uint32 next_maps_for_vote = 47;
  for (int i = 0; i < this->next_maps_for_vote_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      47, this->next_maps_for_vote(i), output);
  }
  
  // optional uint32 lobby_mm_version = 48;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->lobby_mm_version(), output);
  }
  
  // repeated .CTFLobbyPlayerProto pending_members = 49;
  for (int i = 0; i < this->pending_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->pending_members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFGameServerLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lobby_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }
  
  // repeated .CTFLobbyPlayerProto members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }
  
  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }
  
  // optional string connect = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }
  
  // optional fixed64 server_id = 6 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }
  
  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }
  
  // optional uint64 match_id = 30 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }
  
  // optional double initial_average_mm_rating = 32;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->initial_average_mm_rating(), target);
  }
  
  // optional uint32 formed_time = 36;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->formed_time(), target);
  }
  
  // optional string map_name = 38;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->map_name(), target);
  }
  
  // optional string mission_name = 39;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->mission_name(), target);
  }
  
  // optional uint32 match_group = 41;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_group(), target);
  }
  
  // optional string mannup_tour_name = 42;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mannup_tour_name().data(), this->mannup_tour_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->mannup_tour_name(), target);
  }
  
  // optional uint32 flags = 43;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->flags(), target);
  }
  
  // optional bool late_join_eligible = 44;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->late_join_eligible(), target);
  }
  
  // optional uint32 fixed_match_size = 45;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->fixed_match_size(), target);
  }
  
  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->is_war_match(), target);
  }
  
  // repeated uint32 next_maps_for_vote = 47;
  for (int i = 0; i < this->next_maps_for_vote_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(47, this->next_maps_for_vote(i), target);
  }
  
  // optional uint32 lobby_mm_version = 48;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->lobby_mm_version(), target);
  }
  
  // repeated .CTFLobbyPlayerProto pending_members = 49;
  for (int i = 0; i < this->pending_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->pending_members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFGameServerLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }
    
    // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }
    
    // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }
    
    // optional double initial_average_mm_rating = 32;
    if (has_initial_average_mm_rating()) {
      total_size += 2 + 8;
    }
    
    // optional string mannup_tour_name = 42;
    if (has_mannup_tour_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mannup_tour_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string map_name = 38;
    if (has_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }
    
    // optional string mission_name = 39;
    if (has_mission_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }
    
    // optional uint32 match_group = 41;
    if (has_match_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_group());
    }
    
    // optional uint64 match_id = 30 [default = 0];
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional uint32 formed_time = 36;
    if (has_formed_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formed_time());
    }
    
    // optional uint32 flags = 43;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional bool late_join_eligible = 44;
    if (has_late_join_eligible()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 fixed_match_size = 45;
    if (has_fixed_match_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixed_match_size());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
    if (has_is_war_match()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->is_war_match());
    }
    
    // optional uint32 lobby_mm_version = 48;
    if (has_lobby_mm_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mm_version());
    }
    
  }
  // repeated .CTFLobbyPlayerProto members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated uint32 next_maps_for_vote = 47;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_maps_for_vote_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->next_maps_for_vote(i));
    }
    total_size += 2 * this->next_maps_for_vote_size() + data_size;
  }
  
  // repeated .CTFLobbyPlayerProto pending_members = 49;
  total_size += 2 * this->pending_members_size();
  for (int i = 0; i < this->pending_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pending_members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFGameServerLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFGameServerLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFGameServerLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFGameServerLobby::MergeFrom(const CSOTFGameServerLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  next_maps_for_vote_.MergeFrom(from.next_maps_for_vote_);
  pending_members_.MergeFrom(from.pending_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(2)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(3)) {
      set_state(from.state());
    }
    if (from._has_bit(4)) {
      set_connect(from.connect());
    }
    if (from._has_bit(5)) {
      set_game_state(from.game_state());
    }
    if (from._has_bit(6)) {
      set_initial_average_mm_rating(from.initial_average_mm_rating());
    }
    if (from._has_bit(7)) {
      set_mannup_tour_name(from.mannup_tour_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_map_name(from.map_name());
    }
    if (from._has_bit(9)) {
      set_mission_name(from.mission_name());
    }
    if (from._has_bit(10)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(11)) {
      set_match_id(from.match_id());
    }
    if (from._has_bit(12)) {
      set_formed_time(from.formed_time());
    }
    if (from._has_bit(13)) {
      set_flags(from.flags());
    }
    if (from._has_bit(14)) {
      set_late_join_eligible(from.late_join_eligible());
    }
    if (from._has_bit(15)) {
      set_fixed_match_size(from.fixed_match_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_is_war_match(from.is_war_match());
    }
    if (from._has_bit(18)) {
      set_lobby_mm_version(from.lobby_mm_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFGameServerLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFGameServerLobby::CopyFrom(const CSOTFGameServerLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFGameServerLobby::IsInitialized() const {
  
  return true;
}

void CSOTFGameServerLobby::Swap(CSOTFGameServerLobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    members_.Swap(&other->members_);
    std::swap(server_id_, other->server_id_);
    std::swap(state_, other->state_);
    std::swap(connect_, other->connect_);
    std::swap(game_state_, other->game_state_);
    std::swap(initial_average_mm_rating_, other->initial_average_mm_rating_);
    std::swap(mannup_tour_name_, other->mannup_tour_name_);
    std::swap(map_name_, other->map_name_);
    std::swap(mission_name_, other->mission_name_);
    std::swap(match_group_, other->match_group_);
    std::swap(match_id_, other->match_id_);
    std::swap(formed_time_, other->formed_time_);
    std::swap(flags_, other->flags_);
    std::swap(late_join_eligible_, other->late_join_eligible_);
    std::swap(fixed_match_size_, other->fixed_match_size_);
    std::swap(is_war_match_, other->is_war_match_);
    next_maps_for_vote_.Swap(&other->next_maps_for_vote_);
    std::swap(lobby_mm_version_, other->lobby_mm_version_);
    pending_members_.Swap(&other->pending_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFGameServerLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFGameServerLobby_descriptor_;
  metadata.reflection = CSOTFGameServerLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgExitMatchmaking::kExplicitAbandonFieldNumber;
const int CMsgExitMatchmaking::kPartyIdFieldNumber;
const int CMsgExitMatchmaking::kLobbyIdFieldNumber;
#endif  // !_MSC_VER

CMsgExitMatchmaking::CMsgExitMatchmaking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgExitMatchmaking::InitAsDefaultInstance() {
}

CMsgExitMatchmaking::CMsgExitMatchmaking(const CMsgExitMatchmaking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgExitMatchmaking::SharedCtor() {
  _cached_size_ = 0;
  explicit_abandon_ = false;
  party_id_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgExitMatchmaking::~CMsgExitMatchmaking() {
  SharedDtor();
}

void CMsgExitMatchmaking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgExitMatchmaking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExitMatchmaking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExitMatchmaking_descriptor_;
}

const CMsgExitMatchmaking& CMsgExitMatchmaking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgExitMatchmaking* CMsgExitMatchmaking::default_instance_ = NULL;

CMsgExitMatchmaking* CMsgExitMatchmaking::New() const {
  return new CMsgExitMatchmaking;
}

void CMsgExitMatchmaking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    explicit_abandon_ = false;
    party_id_ = GOOGLE_ULONGLONG(0);
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgExitMatchmaking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool explicit_abandon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_abandon_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_party_id;
        break;
      }
      
      // optional uint64 party_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgExitMatchmaking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool explicit_abandon = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->explicit_abandon(), output);
  }
  
  // optional uint64 party_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->party_id(), output);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgExitMatchmaking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool explicit_abandon = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->explicit_abandon(), target);
  }
  
  // optional uint64 party_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->party_id(), target);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgExitMatchmaking::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool explicit_abandon = 1;
    if (has_explicit_abandon()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 party_id = 2;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExitMatchmaking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgExitMatchmaking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgExitMatchmaking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgExitMatchmaking::MergeFrom(const CMsgExitMatchmaking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_explicit_abandon(from.explicit_abandon());
    }
    if (from._has_bit(1)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(2)) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgExitMatchmaking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitMatchmaking::CopyFrom(const CMsgExitMatchmaking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitMatchmaking::IsInitialized() const {
  
  return true;
}

void CMsgExitMatchmaking::Swap(CMsgExitMatchmaking* other) {
  if (other != this) {
    std::swap(explicit_abandon_, other->explicit_abandon_);
    std::swap(party_id_, other->party_id_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgExitMatchmaking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgExitMatchmaking_descriptor_;
  metadata.reflection = CMsgExitMatchmaking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAcceptLobbyInvite::kInvitedLobbyIdFieldNumber;
const int CMsgAcceptLobbyInvite::kAbandoningMatchIdFieldNumber;
const int CMsgAcceptLobbyInvite::kAbandoningInviteLobbyIdsFieldNumber;
#endif  // !_MSC_VER

CMsgAcceptLobbyInvite::CMsgAcceptLobbyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAcceptLobbyInvite::InitAsDefaultInstance() {
}

CMsgAcceptLobbyInvite::CMsgAcceptLobbyInvite(const CMsgAcceptLobbyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAcceptLobbyInvite::SharedCtor() {
  _cached_size_ = 0;
  invited_lobby_id_ = GOOGLE_ULONGLONG(0);
  abandoning_match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAcceptLobbyInvite::~CMsgAcceptLobbyInvite() {
  SharedDtor();
}

void CMsgAcceptLobbyInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAcceptLobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcceptLobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAcceptLobbyInvite_descriptor_;
}

const CMsgAcceptLobbyInvite& CMsgAcceptLobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgAcceptLobbyInvite* CMsgAcceptLobbyInvite::default_instance_ = NULL;

CMsgAcceptLobbyInvite* CMsgAcceptLobbyInvite::New() const {
  return new CMsgAcceptLobbyInvite;
}

void CMsgAcceptLobbyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invited_lobby_id_ = GOOGLE_ULONGLONG(0);
    abandoning_match_id_ = GOOGLE_ULONGLONG(0);
  }
  abandoning_invite_lobby_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAcceptLobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invited_lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invited_lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_abandoning_match_id;
        break;
      }
      
      // optional uint64 abandoning_match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandoning_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &abandoning_match_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_abandoning_invite_lobby_ids;
        break;
      }
      
      // repeated uint64 abandoning_invite_lobby_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandoning_invite_lobby_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_abandoning_invite_lobby_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_abandoning_invite_lobby_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_abandoning_invite_lobby_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAcceptLobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 invited_lobby_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invited_lobby_id(), output);
  }
  
  // optional uint64 abandoning_match_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->abandoning_match_id(), output);
  }
  
  // repeated uint64 abandoning_invite_lobby_ids = 3;
  for (int i = 0; i < this->abandoning_invite_lobby_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->abandoning_invite_lobby_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAcceptLobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 invited_lobby_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invited_lobby_id(), target);
  }
  
  // optional uint64 abandoning_match_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->abandoning_match_id(), target);
  }
  
  // repeated uint64 abandoning_invite_lobby_ids = 3;
  for (int i = 0; i < this->abandoning_invite_lobby_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->abandoning_invite_lobby_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAcceptLobbyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invited_lobby_id = 1;
    if (has_invited_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invited_lobby_id());
    }
    
    // optional uint64 abandoning_match_id = 2;
    if (has_abandoning_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->abandoning_match_id());
    }
    
  }
  // repeated uint64 abandoning_invite_lobby_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->abandoning_invite_lobby_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->abandoning_invite_lobby_ids(i));
    }
    total_size += 1 * this->abandoning_invite_lobby_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcceptLobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAcceptLobbyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAcceptLobbyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAcceptLobbyInvite::MergeFrom(const CMsgAcceptLobbyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  abandoning_invite_lobby_ids_.MergeFrom(from.abandoning_invite_lobby_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_invited_lobby_id(from.invited_lobby_id());
    }
    if (from._has_bit(1)) {
      set_abandoning_match_id(from.abandoning_match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAcceptLobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptLobbyInvite::CopyFrom(const CMsgAcceptLobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptLobbyInvite::IsInitialized() const {
  
  return true;
}

void CMsgAcceptLobbyInvite::Swap(CMsgAcceptLobbyInvite* other) {
  if (other != this) {
    std::swap(invited_lobby_id_, other->invited_lobby_id_);
    std::swap(abandoning_match_id_, other->abandoning_match_id_);
    abandoning_invite_lobby_ids_.Swap(&other->abandoning_invite_lobby_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAcceptLobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAcceptLobbyInvite_descriptor_;
  metadata.reflection = CMsgAcceptLobbyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgAcceptLobbyInviteReply::CMsgAcceptLobbyInviteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAcceptLobbyInviteReply::InitAsDefaultInstance() {
}

CMsgAcceptLobbyInviteReply::CMsgAcceptLobbyInviteReply(const CMsgAcceptLobbyInviteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAcceptLobbyInviteReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAcceptLobbyInviteReply::~CMsgAcceptLobbyInviteReply() {
  SharedDtor();
}

void CMsgAcceptLobbyInviteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAcceptLobbyInviteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcceptLobbyInviteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAcceptLobbyInviteReply_descriptor_;
}

const CMsgAcceptLobbyInviteReply& CMsgAcceptLobbyInviteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgAcceptLobbyInviteReply* CMsgAcceptLobbyInviteReply::default_instance_ = NULL;

CMsgAcceptLobbyInviteReply* CMsgAcceptLobbyInviteReply::New() const {
  return new CMsgAcceptLobbyInviteReply;
}

void CMsgAcceptLobbyInviteReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAcceptLobbyInviteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgAcceptLobbyInviteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAcceptLobbyInviteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAcceptLobbyInviteReply::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcceptLobbyInviteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAcceptLobbyInviteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAcceptLobbyInviteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAcceptLobbyInviteReply::MergeFrom(const CMsgAcceptLobbyInviteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAcceptLobbyInviteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptLobbyInviteReply::CopyFrom(const CMsgAcceptLobbyInviteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptLobbyInviteReply::IsInitialized() const {
  
  return true;
}

void CMsgAcceptLobbyInviteReply::Swap(CMsgAcceptLobbyInviteReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAcceptLobbyInviteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAcceptLobbyInviteReply_descriptor_;
  metadata.reflection = CMsgAcceptLobbyInviteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMatchmakingSearchCountRequest::InitAsDefaultInstance() {
}

CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest(const CMsgMatchmakingSearchCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMatchmakingSearchCountRequest::~CMsgMatchmakingSearchCountRequest() {
  SharedDtor();
}

void CMsgMatchmakingSearchCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMatchmakingSearchCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMatchmakingSearchCountRequest_descriptor_;
}

const CMsgMatchmakingSearchCountRequest& CMsgMatchmakingSearchCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMatchmakingSearchCountRequest* CMsgMatchmakingSearchCountRequest::default_instance_ = NULL;

CMsgMatchmakingSearchCountRequest* CMsgMatchmakingSearchCountRequest::New() const {
  return new CMsgMatchmakingSearchCountRequest;
}

void CMsgMatchmakingSearchCountRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMatchmakingSearchCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgMatchmakingSearchCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMatchmakingSearchCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMatchmakingSearchCountRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMatchmakingSearchCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const CMsgMatchmakingSearchCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const CMsgMatchmakingSearchCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountRequest::IsInitialized() const {
  
  return true;
}

void CMsgMatchmakingSearchCountRequest::Swap(CMsgMatchmakingSearchCountRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMatchmakingSearchCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMatchmakingSearchCountRequest_descriptor_;
  metadata.reflection = CMsgMatchmakingSearchCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMatchmakingSearchCountResponse::kSearchingPlayersByGroupFieldNumber;
#endif  // !_MSC_VER

CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMatchmakingSearchCountResponse::InitAsDefaultInstance() {
}

CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse(const CMsgMatchmakingSearchCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMatchmakingSearchCountResponse::~CMsgMatchmakingSearchCountResponse() {
  SharedDtor();
}

void CMsgMatchmakingSearchCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMatchmakingSearchCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMatchmakingSearchCountResponse_descriptor_;
}

const CMsgMatchmakingSearchCountResponse& CMsgMatchmakingSearchCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMatchmakingSearchCountResponse* CMsgMatchmakingSearchCountResponse::default_instance_ = NULL;

CMsgMatchmakingSearchCountResponse* CMsgMatchmakingSearchCountResponse::New() const {
  return new CMsgMatchmakingSearchCountResponse;
}

void CMsgMatchmakingSearchCountResponse::Clear() {
  searching_players_by_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMatchmakingSearchCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 searching_players_by_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searching_players_by_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_searching_players_by_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_searching_players_by_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_searching_players_by_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMatchmakingSearchCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 searching_players_by_group = 1;
  for (int i = 0; i < this->searching_players_by_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->searching_players_by_group(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMatchmakingSearchCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 searching_players_by_group = 1;
  for (int i = 0; i < this->searching_players_by_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->searching_players_by_group(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMatchmakingSearchCountResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 searching_players_by_group = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->searching_players_by_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->searching_players_by_group(i));
    }
    total_size += 1 * this->searching_players_by_group_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMatchmakingSearchCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const CMsgMatchmakingSearchCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  searching_players_by_group_.MergeFrom(from.searching_players_by_group_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const CMsgMatchmakingSearchCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountResponse::IsInitialized() const {
  
  return true;
}

void CMsgMatchmakingSearchCountResponse::Swap(CMsgMatchmakingSearchCountResponse* other) {
  if (other != this) {
    searching_players_by_group_.Swap(&other->searching_players_by_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMatchmakingSearchCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMatchmakingSearchCountResponse_descriptor_;
  metadata.reflection = CMsgMatchmakingSearchCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKickedFromMatchmakingQueue::InitAsDefaultInstance() {
}

CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue(const CMsgKickedFromMatchmakingQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKickedFromMatchmakingQueue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKickedFromMatchmakingQueue::~CMsgKickedFromMatchmakingQueue() {
  SharedDtor();
}

void CMsgKickedFromMatchmakingQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKickedFromMatchmakingQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKickedFromMatchmakingQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKickedFromMatchmakingQueue_descriptor_;
}

const CMsgKickedFromMatchmakingQueue& CMsgKickedFromMatchmakingQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgKickedFromMatchmakingQueue* CMsgKickedFromMatchmakingQueue::default_instance_ = NULL;

CMsgKickedFromMatchmakingQueue* CMsgKickedFromMatchmakingQueue::New() const {
  return new CMsgKickedFromMatchmakingQueue;
}

void CMsgKickedFromMatchmakingQueue::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKickedFromMatchmakingQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgKickedFromMatchmakingQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKickedFromMatchmakingQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKickedFromMatchmakingQueue::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKickedFromMatchmakingQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKickedFromMatchmakingQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const CMsgKickedFromMatchmakingQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const CMsgKickedFromMatchmakingQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickedFromMatchmakingQueue::IsInitialized() const {
  
  return true;
}

void CMsgKickedFromMatchmakingQueue::Swap(CMsgKickedFromMatchmakingQueue* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKickedFromMatchmakingQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKickedFromMatchmakingQueue_descriptor_;
  metadata.reflection = CMsgKickedFromMatchmakingQueue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor_;
}
bool CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::INVALID;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::CONNECTED;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::RESERVED;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MIN;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MAX;
const int CMsgGameServerMatchmakingStatus::PlayerConnectState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_Event_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerMatchmakingStatus_Event_descriptor_;
}
bool CMsgGameServerMatchmakingStatus_Event_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::None;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMVictory;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMDefeat;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::AcknowledgePlayers;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MIN;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MAX;
const int CMsgGameServerMatchmakingStatus::Event_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerMatchmakingStatus_Player::kSteamIdFieldNumber;
const int CMsgGameServerMatchmakingStatus_Player::kConnectStateFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerMatchmakingStatus_Player::InitAsDefaultInstance() {
}

CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player(const CMsgGameServerMatchmakingStatus_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  connect_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerMatchmakingStatus_Player::~CMsgGameServerMatchmakingStatus_Player() {
  SharedDtor();
}

void CMsgGameServerMatchmakingStatus_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerMatchmakingStatus_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerMatchmakingStatus_Player_descriptor_;
}

const CMsgGameServerMatchmakingStatus_Player& CMsgGameServerMatchmakingStatus_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus_Player::default_instance_ = NULL;

CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus_Player::New() const {
  return new CMsgGameServerMatchmakingStatus_Player;
}

void CMsgGameServerMatchmakingStatus_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    connect_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerMatchmakingStatus_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect_state;
        break;
      }
      
      // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(value)) {
            set_connect_state(static_cast< ::CMsgGameServerMatchmakingStatus_PlayerConnectState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerMatchmakingStatus_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connect_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerMatchmakingStatus_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connect_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerMatchmakingStatus_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
    if (has_connect_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerMatchmakingStatus_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_connect_state(from.connect_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus_Player::IsInitialized() const {
  
  return true;
}

void CMsgGameServerMatchmakingStatus_Player::Swap(CMsgGameServerMatchmakingStatus_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(connect_state_, other->connect_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerMatchmakingStatus_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerMatchmakingStatus_Player_descriptor_;
  metadata.reflection = CMsgGameServerMatchmakingStatus_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CMsgGameServerMatchmakingStatus::_default_map_;
const ::std::string CMsgGameServerMatchmakingStatus::_default_tags_;
#ifndef _MSC_VER
const int CMsgGameServerMatchmakingStatus::kServerVersionFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMatchmakingStateFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMapFieldNumber;
const int CMsgGameServerMatchmakingStatus::kTagsFieldNumber;
const int CMsgGameServerMatchmakingStatus::kBotCountFieldNumber;
const int CMsgGameServerMatchmakingStatus::kNumSpectatorsFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMaxPlayersFieldNumber;
const int CMsgGameServerMatchmakingStatus::kSlotsFreeFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerRegionFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerLoadavgFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerTrustedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerDedicatedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kStrictFieldNumber;
const int CMsgGameServerMatchmakingStatus::kPlayersFieldNumber;
const int CMsgGameServerMatchmakingStatus::kGameStateFieldNumber;
const int CMsgGameServerMatchmakingStatus::kEventFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmWaveFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmCreditsAcquiredFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmCreditsDroppedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMatchGroupFieldNumber;
const int CMsgGameServerMatchmakingStatus::kLobbyMmVersionFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerMatchmakingStatus::InitAsDefaultInstance() {
}

CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus(const CMsgGameServerMatchmakingStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus::SharedCtor() {
  _cached_size_ = 0;
  server_version_ = 1225u;
  matchmaking_state_ = 0;
  map_ = const_cast< ::std::string*>(&_default_map_);
  tags_ = const_cast< ::std::string*>(&_default_tags_);
  bot_count_ = 0u;
  num_spectators_ = 0u;
  max_players_ = 0u;
  slots_free_ = 0u;
  server_region_ = 0u;
  server_loadavg_ = 0;
  server_trusted_ = false;
  server_dedicated_ = false;
  strict_ = 0u;
  game_state_ = 0;
  event_ = 0;
  mvm_wave_ = 0u;
  mvm_credits_acquired_ = 0u;
  mvm_credits_dropped_ = 0u;
  match_group_ = -1;
  lobby_mm_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerMatchmakingStatus::~CMsgGameServerMatchmakingStatus() {
  SharedDtor();
}

void CMsgGameServerMatchmakingStatus::SharedDtor() {
  if (map_ != &_default_map_) {
    delete map_;
  }
  if (tags_ != &_default_tags_) {
    delete tags_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerMatchmakingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerMatchmakingStatus_descriptor_;
}

const CMsgGameServerMatchmakingStatus& CMsgGameServerMatchmakingStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGameServerMatchmakingStatus* CMsgGameServerMatchmakingStatus::default_instance_ = NULL;

CMsgGameServerMatchmakingStatus* CMsgGameServerMatchmakingStatus::New() const {
  return new CMsgGameServerMatchmakingStatus;
}

void CMsgGameServerMatchmakingStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_version_ = 1225u;
    matchmaking_state_ = 0;
    if (_has_bit(2)) {
      if (map_ != &_default_map_) {
        map_->clear();
      }
    }
    if (_has_bit(3)) {
      if (tags_ != &_default_tags_) {
        tags_->clear();
      }
    }
    bot_count_ = 0u;
    num_spectators_ = 0u;
    max_players_ = 0u;
    slots_free_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_region_ = 0u;
    server_loadavg_ = 0;
    server_trusted_ = false;
    server_dedicated_ = false;
    strict_ = 0u;
    game_state_ = 0;
    event_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mvm_wave_ = 0u;
    mvm_credits_acquired_ = 0u;
    mvm_credits_dropped_ = 0u;
    match_group_ = -1;
    lobby_mm_version_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerMatchmakingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ServerMatchmakingState_IsValid(value)) {
            set_matchmaking_state(static_cast< ServerMatchmakingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }
      
      // optional string map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }
      
      // optional string tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bot_count;
        break;
      }
      
      // optional uint32 bot_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_count_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_spectators;
        break;
      }
      
      // optional uint32 num_spectators = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_players;
        break;
      }
      
      // optional uint32 max_players = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_players_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slots_free;
        break;
      }
      
      // optional uint32 slots_free = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slots_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_free_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_server_region;
        break;
      }
      
      // optional uint32 server_region = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_server_loadavg;
        break;
      }
      
      // optional float server_loadavg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_loadavg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_trusted;
        break;
      }
      
      // optional bool server_trusted = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_trusted_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_server_dedicated;
        break;
      }
      
      // optional bool server_dedicated = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_dedicated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_dedicated_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_players;
        break;
      }
      
      // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_players;
        if (input->ExpectTag(112)) goto parse_game_state;
        break;
      }
      
      // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TF_GC_GameState_IsValid(value)) {
            set_game_state(static_cast< TF_GC_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_event;
        break;
      }
      
      // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerMatchmakingStatus_Event_IsValid(value)) {
            set_event(static_cast< ::CMsgGameServerMatchmakingStatus_Event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_server_version;
        break;
      }
      
      // optional uint32 server_version = 16 [default = 1225];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_strict;
        break;
      }
      
      // optional uint32 strict = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strict_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_mvm_wave;
        break;
      }
      
      // optional uint32 mvm_wave = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvm_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_wave_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_mvm_credits_acquired;
        break;
      }
      
      // optional uint32 mvm_credits_acquired = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvm_credits_acquired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_credits_acquired_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mvm_credits_dropped;
        break;
      }
      
      // optional uint32 mvm_credits_dropped = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvm_credits_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_credits_dropped_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_match_group;
        break;
      }
      
      // optional sint32 match_group = 23 [default = -1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &match_group_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_lobby_mm_version;
        break;
      }
      
      // optional uint32 lobby_mm_version = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_mm_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mm_version_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerMatchmakingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->matchmaking_state(), output);
  }
  
  // optional string map = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->map(), output);
  }
  
  // optional string tags = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(), output);
  }
  
  // optional uint32 bot_count = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bot_count(), output);
  }
  
  // optional uint32 num_spectators = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_spectators(), output);
  }
  
  // optional uint32 max_players = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_players(), output);
  }
  
  // optional uint32 slots_free = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slots_free(), output);
  }
  
  // optional uint32 server_region = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_region(), output);
  }
  
  // optional float server_loadavg = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_loadavg(), output);
  }
  
  // optional bool server_trusted = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->server_trusted(), output);
  }
  
  // optional bool server_dedicated = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->server_dedicated(), output);
  }
  
  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->players(i), output);
  }
  
  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->game_state(), output);
  }
  
  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->event(), output);
  }
  
  // optional uint32 server_version = 16 [default = 1225];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->server_version(), output);
  }
  
  // optional uint32 strict = 17;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->strict(), output);
  }
  
  // optional uint32 mvm_wave = 18;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->mvm_wave(), output);
  }
  
  // optional uint32 mvm_credits_acquired = 19;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mvm_credits_acquired(), output);
  }
  
  // optional uint32 mvm_credits_dropped = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mvm_credits_dropped(), output);
  }
  
  // optional sint32 match_group = 23 [default = -1];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->match_group(), output);
  }
  
  // optional uint32 lobby_mm_version = 24;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->lobby_mm_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerMatchmakingStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->matchmaking_state(), target);
  }
  
  // optional string map = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }
  
  // optional string tags = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tags(), target);
  }
  
  // optional uint32 bot_count = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bot_count(), target);
  }
  
  // optional uint32 num_spectators = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_spectators(), target);
  }
  
  // optional uint32 max_players = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_players(), target);
  }
  
  // optional uint32 slots_free = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slots_free(), target);
  }
  
  // optional uint32 server_region = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_region(), target);
  }
  
  // optional float server_loadavg = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_loadavg(), target);
  }
  
  // optional bool server_trusted = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->server_trusted(), target);
  }
  
  // optional bool server_dedicated = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->server_dedicated(), target);
  }
  
  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->players(i), target);
  }
  
  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->game_state(), target);
  }
  
  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->event(), target);
  }
  
  // optional uint32 server_version = 16 [default = 1225];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->server_version(), target);
  }
  
  // optional uint32 strict = 17;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->strict(), target);
  }
  
  // optional uint32 mvm_wave = 18;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->mvm_wave(), target);
  }
  
  // optional uint32 mvm_credits_acquired = 19;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mvm_credits_acquired(), target);
  }
  
  // optional uint32 mvm_credits_dropped = 20;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mvm_credits_dropped(), target);
  }
  
  // optional sint32 match_group = 23 [default = -1];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->match_group(), target);
  }
  
  // optional uint32 lobby_mm_version = 24;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->lobby_mm_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerMatchmakingStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_version = 16 [default = 1225];
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }
    
    // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
    if (has_matchmaking_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchmaking_state());
    }
    
    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }
    
    // optional string tags = 4;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional uint32 bot_count = 5;
    if (has_bot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_count());
    }
    
    // optional uint32 num_spectators = 6;
    if (has_num_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }
    
    // optional uint32 max_players = 7;
    if (has_max_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_players());
    }
    
    // optional uint32 slots_free = 8;
    if (has_slots_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slots_free());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 server_region = 9;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }
    
    // optional float server_loadavg = 10;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }
    
    // optional bool server_trusted = 11;
    if (has_server_trusted()) {
      total_size += 1 + 1;
    }
    
    // optional bool server_dedicated = 12;
    if (has_server_dedicated()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 strict = 17;
    if (has_strict()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strict());
    }
    
    // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }
    
    // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 mvm_wave = 18;
    if (has_mvm_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_wave());
    }
    
    // optional uint32 mvm_credits_acquired = 19;
    if (has_mvm_credits_acquired()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_credits_acquired());
    }
    
    // optional uint32 mvm_credits_dropped = 20;
    if (has_mvm_credits_dropped()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_credits_dropped());
    }
    
    // optional sint32 match_group = 23 [default = -1];
    if (has_match_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->match_group());
    }
    
    // optional uint32 lobby_mm_version = 24;
    if (has_lobby_mm_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mm_version());
    }
    
  }
  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerMatchmakingStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const CMsgGameServerMatchmakingStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_server_version(from.server_version());
    }
    if (from._has_bit(1)) {
      set_matchmaking_state(from.matchmaking_state());
    }
    if (from._has_bit(2)) {
      set_map(from.map());
    }
    if (from._has_bit(3)) {
      set_tags(from.tags());
    }
    if (from._has_bit(4)) {
      set_bot_count(from.bot_count());
    }
    if (from._has_bit(5)) {
      set_num_spectators(from.num_spectators());
    }
    if (from._has_bit(6)) {
      set_max_players(from.max_players());
    }
    if (from._has_bit(7)) {
      set_slots_free(from.slots_free());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_server_region(from.server_region());
    }
    if (from._has_bit(9)) {
      set_server_loadavg(from.server_loadavg());
    }
    if (from._has_bit(10)) {
      set_server_trusted(from.server_trusted());
    }
    if (from._has_bit(11)) {
      set_server_dedicated(from.server_dedicated());
    }
    if (from._has_bit(12)) {
      set_strict(from.strict());
    }
    if (from._has_bit(14)) {
      set_game_state(from.game_state());
    }
    if (from._has_bit(15)) {
      set_event(from.event());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_mvm_wave(from.mvm_wave());
    }
    if (from._has_bit(17)) {
      set_mvm_credits_acquired(from.mvm_credits_acquired());
    }
    if (from._has_bit(18)) {
      set_mvm_credits_dropped(from.mvm_credits_dropped());
    }
    if (from._has_bit(19)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(20)) {
      set_lobby_mm_version(from.lobby_mm_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const CMsgGameServerMatchmakingStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus::IsInitialized() const {
  
  return true;
}

void CMsgGameServerMatchmakingStatus::Swap(CMsgGameServerMatchmakingStatus* other) {
  if (other != this) {
    std::swap(server_version_, other->server_version_);
    std::swap(matchmaking_state_, other->matchmaking_state_);
    std::swap(map_, other->map_);
    std::swap(tags_, other->tags_);
    std::swap(bot_count_, other->bot_count_);
    std::swap(num_spectators_, other->num_spectators_);
    std::swap(max_players_, other->max_players_);
    std::swap(slots_free_, other->slots_free_);
    std::swap(server_region_, other->server_region_);
    std::swap(server_loadavg_, other->server_loadavg_);
    std::swap(server_trusted_, other->server_trusted_);
    std::swap(server_dedicated_, other->server_dedicated_);
    std::swap(strict_, other->strict_);
    players_.Swap(&other->players_);
    std::swap(game_state_, other->game_state_);
    std::swap(event_, other->event_);
    std::swap(mvm_wave_, other->mvm_wave_);
    std::swap(mvm_credits_acquired_, other->mvm_credits_acquired_);
    std::swap(mvm_credits_dropped_, other->mvm_credits_dropped_);
    std::swap(match_group_, other->match_group_);
    std::swap(lobby_mm_version_, other->lobby_mm_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerMatchmakingStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerMatchmakingStatus_descriptor_;
  metadata.reflection = CMsgGameServerMatchmakingStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMatchmakingProgress::kAvgWaitTimeNewFieldNumber;
const int CMsgMatchmakingProgress::kAvgWaitTimeJoinLateFieldNumber;
const int CMsgMatchmakingProgress::kYourWaitTimeFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kUrgencyPctFieldNumber;
#endif  // !_MSC_VER

CMsgMatchmakingProgress::CMsgMatchmakingProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMatchmakingProgress::InitAsDefaultInstance() {
}

CMsgMatchmakingProgress::CMsgMatchmakingProgress(const CMsgMatchmakingProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMatchmakingProgress::SharedCtor() {
  _cached_size_ = 0;
  avg_wait_time_new_ = 0u;
  avg_wait_time_join_late_ = 0u;
  your_wait_time_ = 0u;
  matching_worldwide_searching_players_ = 0u;
  matching_near_you_searching_players_ = 0u;
  total_worldwide_searching_players_ = 0u;
  total_near_you_searching_players_ = 0u;
  matching_worldwide_active_players_ = 0u;
  matching_near_you_active_players_ = 0u;
  total_worldwide_active_players_ = 0u;
  total_near_you_active_players_ = 0u;
  matching_worldwide_empty_gameservers_ = 0u;
  matching_near_you_empty_gameservers_ = 0u;
  total_worldwide_empty_gameservers_ = 0u;
  total_near_you_empty_gameservers_ = 0u;
  urgency_pct_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMatchmakingProgress::~CMsgMatchmakingProgress() {
  SharedDtor();
}

void CMsgMatchmakingProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMatchmakingProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMatchmakingProgress_descriptor_;
}

const CMsgMatchmakingProgress& CMsgMatchmakingProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMatchmakingProgress* CMsgMatchmakingProgress::default_instance_ = NULL;

CMsgMatchmakingProgress* CMsgMatchmakingProgress::New() const {
  return new CMsgMatchmakingProgress;
}

void CMsgMatchmakingProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avg_wait_time_new_ = 0u;
    avg_wait_time_join_late_ = 0u;
    your_wait_time_ = 0u;
    matching_worldwide_searching_players_ = 0u;
    matching_near_you_searching_players_ = 0u;
    total_worldwide_searching_players_ = 0u;
    total_near_you_searching_players_ = 0u;
    matching_worldwide_active_players_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matching_near_you_active_players_ = 0u;
    total_worldwide_active_players_ = 0u;
    total_near_you_active_players_ = 0u;
    matching_worldwide_empty_gameservers_ = 0u;
    matching_near_you_empty_gameservers_ = 0u;
    total_worldwide_empty_gameservers_ = 0u;
    total_near_you_empty_gameservers_ = 0u;
    urgency_pct_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMatchmakingProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 urgency_pct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urgency_pct_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_avg_wait_time_new;
        break;
      }
      
      // optional uint32 avg_wait_time_new = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_wait_time_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_wait_time_new_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_avg_wait_time_join_late;
        break;
      }
      
      // optional uint32 avg_wait_time_join_late = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_wait_time_join_late:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_wait_time_join_late_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_your_wait_time;
        break;
      }
      
      // optional uint32 your_wait_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &your_wait_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_matching_worldwide_searching_players;
        break;
      }
      
      // optional uint32 matching_worldwide_searching_players = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_worldwide_searching_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_searching_players_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_matching_near_you_searching_players;
        break;
      }
      
      // optional uint32 matching_near_you_searching_players = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_near_you_searching_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_searching_players_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_worldwide_searching_players;
        break;
      }
      
      // optional uint32 total_worldwide_searching_players = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_worldwide_searching_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_searching_players_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_near_you_searching_players;
        break;
      }
      
      // optional uint32 total_near_you_searching_players = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_near_you_searching_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_searching_players_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_matching_worldwide_active_players;
        break;
      }
      
      // optional uint32 matching_worldwide_active_players = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_worldwide_active_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_active_players_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_matching_near_you_active_players;
        break;
      }
      
      // optional uint32 matching_near_you_active_players = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_near_you_active_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_active_players_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_total_worldwide_active_players;
        break;
      }
      
      // optional uint32 total_worldwide_active_players = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_worldwide_active_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_active_players_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_total_near_you_active_players;
        break;
      }
      
      // optional uint32 total_near_you_active_players = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_near_you_active_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_active_players_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_matching_worldwide_empty_gameservers;
        break;
      }
      
      // optional uint32 matching_worldwide_empty_gameservers = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_worldwide_empty_gameservers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_empty_gameservers_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_matching_near_you_empty_gameservers;
        break;
      }
      
      // optional uint32 matching_near_you_empty_gameservers = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_near_you_empty_gameservers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_empty_gameservers_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_total_worldwide_empty_gameservers;
        break;
      }
      
      // optional uint32 total_worldwide_empty_gameservers = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_worldwide_empty_gameservers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_empty_gameservers_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_total_near_you_empty_gameservers;
        break;
      }
      
      // optional uint32 total_near_you_empty_gameservers = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_near_you_empty_gameservers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_empty_gameservers_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMatchmakingProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 urgency_pct = 1;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->urgency_pct(), output);
  }
  
  // optional uint32 avg_wait_time_new = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avg_wait_time_new(), output);
  }
  
  // optional uint32 avg_wait_time_join_late = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_wait_time_join_late(), output);
  }
  
  // optional uint32 your_wait_time = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->your_wait_time(), output);
  }
  
  // optional uint32 matching_worldwide_searching_players = 8;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->matching_worldwide_searching_players(), output);
  }
  
  // optional uint32 matching_near_you_searching_players = 9;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->matching_near_you_searching_players(), output);
  }
  
  // optional uint32 total_worldwide_searching_players = 13;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_worldwide_searching_players(), output);
  }
  
  // optional uint32 total_near_you_searching_players = 14;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_near_you_searching_players(), output);
  }
  
  // optional uint32 matching_worldwide_active_players = 15;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->matching_worldwide_active_players(), output);
  }
  
  // optional uint32 matching_near_you_active_players = 16;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->matching_near_you_active_players(), output);
  }
  
  // optional uint32 total_worldwide_active_players = 17;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->total_worldwide_active_players(), output);
  }
  
  // optional uint32 total_near_you_active_players = 18;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_near_you_active_players(), output);
  }
  
  // optional uint32 matching_worldwide_empty_gameservers = 19;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->matching_worldwide_empty_gameservers(), output);
  }
  
  // optional uint32 matching_near_you_empty_gameservers = 20;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->matching_near_you_empty_gameservers(), output);
  }
  
  // optional uint32 total_worldwide_empty_gameservers = 21;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->total_worldwide_empty_gameservers(), output);
  }
  
  // optional uint32 total_near_you_empty_gameservers = 22;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->total_near_you_empty_gameservers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMatchmakingProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 urgency_pct = 1;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->urgency_pct(), target);
  }
  
  // optional uint32 avg_wait_time_new = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avg_wait_time_new(), target);
  }
  
  // optional uint32 avg_wait_time_join_late = 5;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_wait_time_join_late(), target);
  }
  
  // optional uint32 your_wait_time = 6;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->your_wait_time(), target);
  }
  
  // optional uint32 matching_worldwide_searching_players = 8;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->matching_worldwide_searching_players(), target);
  }
  
  // optional uint32 matching_near_you_searching_players = 9;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->matching_near_you_searching_players(), target);
  }
  
  // optional uint32 total_worldwide_searching_players = 13;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_worldwide_searching_players(), target);
  }
  
  // optional uint32 total_near_you_searching_players = 14;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_near_you_searching_players(), target);
  }
  
  // optional uint32 matching_worldwide_active_players = 15;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->matching_worldwide_active_players(), target);
  }
  
  // optional uint32 matching_near_you_active_players = 16;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->matching_near_you_active_players(), target);
  }
  
  // optional uint32 total_worldwide_active_players = 17;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->total_worldwide_active_players(), target);
  }
  
  // optional uint32 total_near_you_active_players = 18;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_near_you_active_players(), target);
  }
  
  // optional uint32 matching_worldwide_empty_gameservers = 19;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->matching_worldwide_empty_gameservers(), target);
  }
  
  // optional uint32 matching_near_you_empty_gameservers = 20;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->matching_near_you_empty_gameservers(), target);
  }
  
  // optional uint32 total_worldwide_empty_gameservers = 21;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->total_worldwide_empty_gameservers(), target);
  }
  
  // optional uint32 total_near_you_empty_gameservers = 22;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->total_near_you_empty_gameservers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMatchmakingProgress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 avg_wait_time_new = 4;
    if (has_avg_wait_time_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_wait_time_new());
    }
    
    // optional uint32 avg_wait_time_join_late = 5;
    if (has_avg_wait_time_join_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_wait_time_join_late());
    }
    
    // optional uint32 your_wait_time = 6;
    if (has_your_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->your_wait_time());
    }
    
    // optional uint32 matching_worldwide_searching_players = 8;
    if (has_matching_worldwide_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_searching_players());
    }
    
    // optional uint32 matching_near_you_searching_players = 9;
    if (has_matching_near_you_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_searching_players());
    }
    
    // optional uint32 total_worldwide_searching_players = 13;
    if (has_total_worldwide_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_searching_players());
    }
    
    // optional uint32 total_near_you_searching_players = 14;
    if (has_total_near_you_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_searching_players());
    }
    
    // optional uint32 matching_worldwide_active_players = 15;
    if (has_matching_worldwide_active_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_active_players());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 matching_near_you_active_players = 16;
    if (has_matching_near_you_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_active_players());
    }
    
    // optional uint32 total_worldwide_active_players = 17;
    if (has_total_worldwide_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_active_players());
    }
    
    // optional uint32 total_near_you_active_players = 18;
    if (has_total_near_you_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_active_players());
    }
    
    // optional uint32 matching_worldwide_empty_gameservers = 19;
    if (has_matching_worldwide_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_empty_gameservers());
    }
    
    // optional uint32 matching_near_you_empty_gameservers = 20;
    if (has_matching_near_you_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_empty_gameservers());
    }
    
    // optional uint32 total_worldwide_empty_gameservers = 21;
    if (has_total_worldwide_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_empty_gameservers());
    }
    
    // optional uint32 total_near_you_empty_gameservers = 22;
    if (has_total_near_you_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_empty_gameservers());
    }
    
    // optional uint32 urgency_pct = 1;
    if (has_urgency_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urgency_pct());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMatchmakingProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMatchmakingProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMatchmakingProgress::MergeFrom(const CMsgMatchmakingProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_avg_wait_time_new(from.avg_wait_time_new());
    }
    if (from._has_bit(1)) {
      set_avg_wait_time_join_late(from.avg_wait_time_join_late());
    }
    if (from._has_bit(2)) {
      set_your_wait_time(from.your_wait_time());
    }
    if (from._has_bit(3)) {
      set_matching_worldwide_searching_players(from.matching_worldwide_searching_players());
    }
    if (from._has_bit(4)) {
      set_matching_near_you_searching_players(from.matching_near_you_searching_players());
    }
    if (from._has_bit(5)) {
      set_total_worldwide_searching_players(from.total_worldwide_searching_players());
    }
    if (from._has_bit(6)) {
      set_total_near_you_searching_players(from.total_near_you_searching_players());
    }
    if (from._has_bit(7)) {
      set_matching_worldwide_active_players(from.matching_worldwide_active_players());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_matching_near_you_active_players(from.matching_near_you_active_players());
    }
    if (from._has_bit(9)) {
      set_total_worldwide_active_players(from.total_worldwide_active_players());
    }
    if (from._has_bit(10)) {
      set_total_near_you_active_players(from.total_near_you_active_players());
    }
    if (from._has_bit(11)) {
      set_matching_worldwide_empty_gameservers(from.matching_worldwide_empty_gameservers());
    }
    if (from._has_bit(12)) {
      set_matching_near_you_empty_gameservers(from.matching_near_you_empty_gameservers());
    }
    if (from._has_bit(13)) {
      set_total_worldwide_empty_gameservers(from.total_worldwide_empty_gameservers());
    }
    if (from._has_bit(14)) {
      set_total_near_you_empty_gameservers(from.total_near_you_empty_gameservers());
    }
    if (from._has_bit(15)) {
      set_urgency_pct(from.urgency_pct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMatchmakingProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingProgress::CopyFrom(const CMsgMatchmakingProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingProgress::IsInitialized() const {
  
  return true;
}

void CMsgMatchmakingProgress::Swap(CMsgMatchmakingProgress* other) {
  if (other != this) {
    std::swap(avg_wait_time_new_, other->avg_wait_time_new_);
    std::swap(avg_wait_time_join_late_, other->avg_wait_time_join_late_);
    std::swap(your_wait_time_, other->your_wait_time_);
    std::swap(matching_worldwide_searching_players_, other->matching_worldwide_searching_players_);
    std::swap(matching_near_you_searching_players_, other->matching_near_you_searching_players_);
    std::swap(total_worldwide_searching_players_, other->total_worldwide_searching_players_);
    std::swap(total_near_you_searching_players_, other->total_near_you_searching_players_);
    std::swap(matching_worldwide_active_players_, other->matching_worldwide_active_players_);
    std::swap(matching_near_you_active_players_, other->matching_near_you_active_players_);
    std::swap(total_worldwide_active_players_, other->total_worldwide_active_players_);
    std::swap(total_near_you_active_players_, other->total_near_you_active_players_);
    std::swap(matching_worldwide_empty_gameservers_, other->matching_worldwide_empty_gameservers_);
    std::swap(matching_near_you_empty_gameservers_, other->matching_near_you_empty_gameservers_);
    std::swap(total_worldwide_empty_gameservers_, other->total_worldwide_empty_gameservers_);
    std::swap(total_near_you_empty_gameservers_, other->total_near_you_empty_gameservers_);
    std::swap(urgency_pct_, other->urgency_pct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMatchmakingProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMatchmakingProgress_descriptor_;
  metadata.reflection = CMsgMatchmakingProgress_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgMvMVictoryInfo_GrantReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictoryInfo_GrantReason_descriptor_;
}
bool CMsgMvMVictoryInfo_GrantReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::INVALID;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::BADGE_LEVELED;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::SQUAD_SURPLUS;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::MANN_UP;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::HELP_A_NOOB;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MIN;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MAX;
const int CMsgMvMVictoryInfo::GrantReason_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CMsgMvMVictoryInfo_Item::_default_item_data_;
#ifndef _MSC_VER
const int CMsgMvMVictoryInfo_Item::kGrantReasonFieldNumber;
const int CMsgMvMVictoryInfo_Item::kItemDataFieldNumber;
const int CMsgMvMVictoryInfo_Item::kSquadSurplusClaimerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMVictoryInfo_Item::InitAsDefaultInstance() {
}

CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item(const CMsgMvMVictoryInfo_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Item::SharedCtor() {
  _cached_size_ = 0;
  grant_reason_ = 0;
  item_data_ = const_cast< ::std::string*>(&_default_item_data_);
  squad_surplus_claimer_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMVictoryInfo_Item::~CMsgMvMVictoryInfo_Item() {
  SharedDtor();
}

void CMsgMvMVictoryInfo_Item::SharedDtor() {
  if (item_data_ != &_default_item_data_) {
    delete item_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMvMVictoryInfo_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictoryInfo_Item_descriptor_;
}

const CMsgMvMVictoryInfo_Item& CMsgMvMVictoryInfo_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Item::default_instance_ = NULL;

CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Item::New() const {
  return new CMsgMvMVictoryInfo_Item;
}

void CMsgMvMVictoryInfo_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grant_reason_ = 0;
    if (_has_bit(1)) {
      if (item_data_ != &_default_item_data_) {
        item_data_->clear();
      }
    }
    squad_surplus_claimer_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMVictoryInfo_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgMvMVictoryInfo_GrantReason_IsValid(value)) {
            set_grant_reason(static_cast< ::CMsgMvMVictoryInfo_GrantReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_data;
        break;
      }
      
      // optional bytes item_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_squad_surplus_claimer_steam_id;
        break;
      }
      
      // optional fixed64 squad_surplus_claimer_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_squad_surplus_claimer_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &squad_surplus_claimer_steam_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMvMVictoryInfo_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->grant_reason(), output);
  }
  
  // optional bytes item_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->item_data(), output);
  }
  
  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->squad_surplus_claimer_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMVictoryInfo_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->grant_reason(), target);
  }
  
  // optional bytes item_data = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->item_data(), target);
  }
  
  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->squad_surplus_claimer_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMVictoryInfo_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
    if (has_grant_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grant_reason());
    }
    
    // optional bytes item_data = 2;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_data());
    }
    
    // optional fixed64 squad_surplus_claimer_steam_id = 3;
    if (has_squad_surplus_claimer_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMVictoryInfo_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const CMsgMvMVictoryInfo_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_grant_reason(from.grant_reason());
    }
    if (from._has_bit(1)) {
      set_item_data(from.item_data());
    }
    if (from._has_bit(2)) {
      set_squad_surplus_claimer_steam_id(from.squad_surplus_claimer_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const CMsgMvMVictoryInfo_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Item::IsInitialized() const {
  
  return true;
}

void CMsgMvMVictoryInfo_Item::Swap(CMsgMvMVictoryInfo_Item* other) {
  if (other != this) {
    std::swap(grant_reason_, other->grant_reason_);
    std::swap(item_data_, other->item_data_);
    std::swap(squad_surplus_claimer_steam_id_, other->squad_surplus_claimer_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMVictoryInfo_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMVictoryInfo_Item_descriptor_;
  metadata.reflection = CMsgMvMVictoryInfo_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgMvMVictoryInfo_Player::kSteamIdFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeGrantedFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeProgressUpdatedFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeLeveledFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeLevelFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeProgressBitsFieldNumber;
const int CMsgMvMVictoryInfo_Player::kItemsFieldNumber;
const int CMsgMvMVictoryInfo_Player::kVoucherMissingFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgePointsFieldNumber;
#endif  // !_MSC_VER

CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMVictoryInfo_Player::InitAsDefaultInstance() {
}

CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player(const CMsgMvMVictoryInfo_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  badge_granted_ = false;
  badge_progress_updated_ = false;
  badge_leveled_ = false;
  badge_level_ = 0u;
  badge_progress_bits_ = 0u;
  voucher_missing_ = false;
  badge_points_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMVictoryInfo_Player::~CMsgMvMVictoryInfo_Player() {
  SharedDtor();
}

void CMsgMvMVictoryInfo_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMvMVictoryInfo_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictoryInfo_Player_descriptor_;
}

const CMsgMvMVictoryInfo_Player& CMsgMvMVictoryInfo_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo_Player::default_instance_ = NULL;

CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo_Player::New() const {
  return new CMsgMvMVictoryInfo_Player;
}

void CMsgMvMVictoryInfo_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    badge_granted_ = false;
    badge_progress_updated_ = false;
    badge_leveled_ = false;
    badge_level_ = 0u;
    badge_progress_bits_ = 0u;
    voucher_missing_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    badge_points_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMVictoryInfo_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_badge_granted;
        break;
      }
      
      // optional bool badge_granted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_granted_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_badge_progress_updated;
        break;
      }
      
      // optional bool badge_progress_updated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_progress_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_progress_updated_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_badge_leveled;
        break;
      }
      
      // optional bool badge_leveled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_leveled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_leveled_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_badge_level;
        break;
      }
      
      // optional uint32 badge_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_badge_progress_bits;
        break;
      }
      
      // optional uint32 badge_progress_bits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_progress_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_progress_bits_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }
      
      // repeated .CMsgMvMVictoryInfo.Item items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectTag(72)) goto parse_voucher_missing;
        break;
      }
      
      // optional bool voucher_missing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voucher_missing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voucher_missing_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_badge_points;
        break;
      }
      
      // optional uint32 badge_points = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMvMVictoryInfo_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional bool badge_granted = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->badge_granted(), output);
  }
  
  // optional bool badge_progress_updated = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->badge_progress_updated(), output);
  }
  
  // optional bool badge_leveled = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->badge_leveled(), output);
  }
  
  // optional uint32 badge_level = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->badge_level(), output);
  }
  
  // optional uint32 badge_progress_bits = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->badge_progress_bits(), output);
  }
  
  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }
  
  // optional bool voucher_missing = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->voucher_missing(), output);
  }
  
  // optional uint32 badge_points = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->badge_points(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMVictoryInfo_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional bool badge_granted = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->badge_granted(), target);
  }
  
  // optional bool badge_progress_updated = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->badge_progress_updated(), target);
  }
  
  // optional bool badge_leveled = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->badge_leveled(), target);
  }
  
  // optional uint32 badge_level = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->badge_level(), target);
  }
  
  // optional uint32 badge_progress_bits = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->badge_progress_bits(), target);
  }
  
  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }
  
  // optional bool voucher_missing = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->voucher_missing(), target);
  }
  
  // optional uint32 badge_points = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->badge_points(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMVictoryInfo_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool badge_granted = 3;
    if (has_badge_granted()) {
      total_size += 1 + 1;
    }
    
    // optional bool badge_progress_updated = 4;
    if (has_badge_progress_updated()) {
      total_size += 1 + 1;
    }
    
    // optional bool badge_leveled = 5;
    if (has_badge_leveled()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 badge_level = 6;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }
    
    // optional uint32 badge_progress_bits = 7;
    if (has_badge_progress_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_progress_bits());
    }
    
    // optional bool voucher_missing = 9;
    if (has_voucher_missing()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 badge_points = 10;
    if (has_badge_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }
    
  }
  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMVictoryInfo_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const CMsgMvMVictoryInfo_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_badge_granted(from.badge_granted());
    }
    if (from._has_bit(2)) {
      set_badge_progress_updated(from.badge_progress_updated());
    }
    if (from._has_bit(3)) {
      set_badge_leveled(from.badge_leveled());
    }
    if (from._has_bit(4)) {
      set_badge_level(from.badge_level());
    }
    if (from._has_bit(5)) {
      set_badge_progress_bits(from.badge_progress_bits());
    }
    if (from._has_bit(7)) {
      set_voucher_missing(from.voucher_missing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_badge_points(from.badge_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const CMsgMvMVictoryInfo_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Player::IsInitialized() const {
  
  return true;
}

void CMsgMvMVictoryInfo_Player::Swap(CMsgMvMVictoryInfo_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(badge_granted_, other->badge_granted_);
    std::swap(badge_progress_updated_, other->badge_progress_updated_);
    std::swap(badge_leveled_, other->badge_leveled_);
    std::swap(badge_level_, other->badge_level_);
    std::swap(badge_progress_bits_, other->badge_progress_bits_);
    items_.Swap(&other->items_);
    std::swap(voucher_missing_, other->voucher_missing_);
    std::swap(badge_points_, other->badge_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMVictoryInfo_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMVictoryInfo_Player_descriptor_;
  metadata.reflection = CMsgMvMVictoryInfo_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CMsgMvMVictoryInfo::_default_tour_name_;
const ::std::string CMsgMvMVictoryInfo::_default_mission_name_;
#ifndef _MSC_VER
const int CMsgMvMVictoryInfo::kPlayersFieldNumber;
const int CMsgMvMVictoryInfo::kTourNameFieldNumber;
const int CMsgMvMVictoryInfo::kMissionNameFieldNumber;
#endif  // !_MSC_VER

CMsgMvMVictoryInfo::CMsgMvMVictoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMVictoryInfo::InitAsDefaultInstance() {
}

CMsgMvMVictoryInfo::CMsgMvMVictoryInfo(const CMsgMvMVictoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo::SharedCtor() {
  _cached_size_ = 0;
  tour_name_ = const_cast< ::std::string*>(&_default_tour_name_);
  mission_name_ = const_cast< ::std::string*>(&_default_mission_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMVictoryInfo::~CMsgMvMVictoryInfo() {
  SharedDtor();
}

void CMsgMvMVictoryInfo::SharedDtor() {
  if (tour_name_ != &_default_tour_name_) {
    delete tour_name_;
  }
  if (mission_name_ != &_default_mission_name_) {
    delete mission_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMvMVictoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictoryInfo_descriptor_;
}

const CMsgMvMVictoryInfo& CMsgMvMVictoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMVictoryInfo* CMsgMvMVictoryInfo::default_instance_ = NULL;

CMsgMvMVictoryInfo* CMsgMvMVictoryInfo::New() const {
  return new CMsgMvMVictoryInfo;
}

void CMsgMvMVictoryInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (tour_name_ != &_default_tour_name_) {
        tour_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (mission_name_ != &_default_mission_name_) {
        mission_name_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMVictoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgMvMVictoryInfo.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_tour_name;
        break;
      }
      
      // optional string tour_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tour_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tour_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tour_name().data(), this->tour_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mission_name;
        break;
      }
      
      // optional string mission_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission_name().data(), this->mission_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMvMVictoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // optional string tour_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tour_name().data(), this->tour_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tour_name(), output);
  }
  
  // optional string mission_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mission_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMVictoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // optional string tour_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tour_name().data(), this->tour_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tour_name(), target);
  }
  
  // optional string mission_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mission_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMVictoryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string tour_name = 2;
    if (has_tour_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tour_name());
    }
    
    // optional string mission_name = 3;
    if (has_mission_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }
    
  }
  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMVictoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMVictoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo::MergeFrom(const CMsgMvMVictoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_tour_name(from.tour_name());
    }
    if (from._has_bit(2)) {
      set_mission_name(from.mission_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMVictoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo::CopyFrom(const CMsgMvMVictoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo::IsInitialized() const {
  
  return true;
}

void CMsgMvMVictoryInfo::Swap(CMsgMvMVictoryInfo* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(tour_name_, other->tour_name_);
    std::swap(mission_name_, other->mission_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMVictoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMVictoryInfo_descriptor_;
  metadata.reflection = CMsgMvMVictoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgTFHelloResponse::kVersionCheckFieldNumber;
const int CGCMsgTFHelloResponse::kVersionChecksumFieldNumber;
const int CGCMsgTFHelloResponse::kVersionVerboseFieldNumber;
#endif  // !_MSC_VER

CGCMsgTFHelloResponse::CGCMsgTFHelloResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgTFHelloResponse::InitAsDefaultInstance() {
}

CGCMsgTFHelloResponse::CGCMsgTFHelloResponse(const CGCMsgTFHelloResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgTFHelloResponse::SharedCtor() {
  _cached_size_ = 0;
  version_check_ = 0u;
  version_verbose_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgTFHelloResponse::~CGCMsgTFHelloResponse() {
  SharedDtor();
}

void CGCMsgTFHelloResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgTFHelloResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFHelloResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgTFHelloResponse_descriptor_;
}

const CGCMsgTFHelloResponse& CGCMsgTFHelloResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgTFHelloResponse* CGCMsgTFHelloResponse::default_instance_ = NULL;

CGCMsgTFHelloResponse* CGCMsgTFHelloResponse::New() const {
  return new CGCMsgTFHelloResponse;
}

void CGCMsgTFHelloResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_check_ = 0u;
    version_verbose_ = 0u;
  }
  version_checksum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgTFHelloResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_check = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_checksum;
        break;
      }
      
      // repeated uint64 version_checksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_version_checksum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_version_checksum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_checksum;
        if (input->ExpectTag(24)) goto parse_version_verbose;
        break;
      }
      
      // optional uint32 version_verbose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_verbose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_verbose_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgTFHelloResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version_check = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_check(), output);
  }
  
  // repeated uint64 version_checksum = 2;
  for (int i = 0; i < this->version_checksum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->version_checksum(i), output);
  }
  
  // optional uint32 version_verbose = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_verbose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgTFHelloResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version_check = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version_check(), target);
  }
  
  // repeated uint64 version_checksum = 2;
  for (int i = 0; i < this->version_checksum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->version_checksum(i), target);
  }
  
  // optional uint32 version_verbose = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_verbose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgTFHelloResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version_check = 1;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }
    
    // optional uint32 version_verbose = 3;
    if (has_version_verbose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_verbose());
    }
    
  }
  // repeated uint64 version_checksum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->version_checksum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->version_checksum(i));
    }
    total_size += 1 * this->version_checksum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFHelloResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgTFHelloResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgTFHelloResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgTFHelloResponse::MergeFrom(const CGCMsgTFHelloResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_checksum_.MergeFrom(from.version_checksum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version_check(from.version_check());
    }
    if (from._has_bit(2)) {
      set_version_verbose(from.version_verbose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgTFHelloResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFHelloResponse::CopyFrom(const CGCMsgTFHelloResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFHelloResponse::IsInitialized() const {
  
  return true;
}

void CGCMsgTFHelloResponse::Swap(CGCMsgTFHelloResponse* other) {
  if (other != this) {
    std::swap(version_check_, other->version_check_);
    version_checksum_.Swap(&other->version_checksum_);
    std::swap(version_verbose_, other->version_verbose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgTFHelloResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgTFHelloResponse_descriptor_;
  metadata.reflection = CGCMsgTFHelloResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CGCMsgTFSync::_default_version_checksum_;
const ::std::string CGCMsgTFSync::_default_version_checksum_ex_;
#ifndef _MSC_VER
const int CGCMsgTFSync::kVersionChecksumFieldNumber;
const int CGCMsgTFSync::kVersionCheckFieldNumber;
const int CGCMsgTFSync::kVersionCheckExFieldNumber;
const int CGCMsgTFSync::kVersionCheckEx2FieldNumber;
const int CGCMsgTFSync::kVersionChecksumExFieldNumber;
#endif  // !_MSC_VER

CGCMsgTFSync::CGCMsgTFSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgTFSync::InitAsDefaultInstance() {
}

CGCMsgTFSync::CGCMsgTFSync(const CGCMsgTFSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgTFSync::SharedCtor() {
  _cached_size_ = 0;
  version_checksum_ = const_cast< ::std::string*>(&_default_version_checksum_);
  version_check_ = 0u;
  version_check_ex_ = 0u;
  version_check_ex2_ = 0u;
  version_checksum_ex_ = const_cast< ::std::string*>(&_default_version_checksum_ex_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgTFSync::~CGCMsgTFSync() {
  SharedDtor();
}

void CGCMsgTFSync::SharedDtor() {
  if (version_checksum_ != &_default_version_checksum_) {
    delete version_checksum_;
  }
  if (version_checksum_ex_ != &_default_version_checksum_ex_) {
    delete version_checksum_ex_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgTFSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgTFSync_descriptor_;
}

const CGCMsgTFSync& CGCMsgTFSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgTFSync* CGCMsgTFSync::default_instance_ = NULL;

CGCMsgTFSync* CGCMsgTFSync::New() const {
  return new CGCMsgTFSync;
}

void CGCMsgTFSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (version_checksum_ != &_default_version_checksum_) {
        version_checksum_->clear();
      }
    }
    version_check_ = 0u;
    version_check_ex_ = 0u;
    version_check_ex2_ = 0u;
    if (_has_bit(4)) {
      if (version_checksum_ex_ != &_default_version_checksum_ex_) {
        version_checksum_ex_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgTFSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version_checksum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_check;
        break;
      }
      
      // optional uint32 version_check = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version_check_ex;
        break;
      }
      
      // optional uint32 version_check_ex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_check_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_ex_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version_check_ex2;
        break;
      }
      
      // optional uint32 version_check_ex2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_check_ex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_ex2_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version_checksum_ex;
        break;
      }
      
      // optional bytes version_checksum_ex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_checksum_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum_ex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgTFSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes version_checksum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->version_checksum(), output);
  }
  
  // optional uint32 version_check = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_check(), output);
  }
  
  // optional uint32 version_check_ex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_check_ex(), output);
  }
  
  // optional uint32 version_check_ex2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version_check_ex2(), output);
  }
  
  // optional bytes version_checksum_ex = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->version_checksum_ex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgTFSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes version_checksum = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version_checksum(), target);
  }
  
  // optional uint32 version_check = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_check(), target);
  }
  
  // optional uint32 version_check_ex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_check_ex(), target);
  }
  
  // optional uint32 version_check_ex2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version_check_ex2(), target);
  }
  
  // optional bytes version_checksum_ex = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version_checksum_ex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgTFSync::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes version_checksum = 1;
    if (has_version_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum());
    }
    
    // optional uint32 version_check = 2;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }
    
    // optional uint32 version_check_ex = 3;
    if (has_version_check_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check_ex());
    }
    
    // optional uint32 version_check_ex2 = 4;
    if (has_version_check_ex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check_ex2());
    }
    
    // optional bytes version_checksum_ex = 5;
    if (has_version_checksum_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum_ex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgTFSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgTFSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgTFSync::MergeFrom(const CGCMsgTFSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version_checksum(from.version_checksum());
    }
    if (from._has_bit(1)) {
      set_version_check(from.version_check());
    }
    if (from._has_bit(2)) {
      set_version_check_ex(from.version_check_ex());
    }
    if (from._has_bit(3)) {
      set_version_check_ex2(from.version_check_ex2());
    }
    if (from._has_bit(4)) {
      set_version_checksum_ex(from.version_checksum_ex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgTFSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSync::CopyFrom(const CGCMsgTFSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSync::IsInitialized() const {
  
  return true;
}

void CGCMsgTFSync::Swap(CGCMsgTFSync* other) {
  if (other != this) {
    std::swap(version_checksum_, other->version_checksum_);
    std::swap(version_check_, other->version_check_);
    std::swap(version_check_ex_, other->version_check_ex_);
    std::swap(version_check_ex2_, other->version_check_ex2_);
    std::swap(version_checksum_ex_, other->version_checksum_ex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgTFSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgTFSync_descriptor_;
  metadata.reflection = CGCMsgTFSync_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CGCMsgTFSyncEx::_default_version_checksum_;
const ::std::string CGCMsgTFSyncEx::_default_version_checksum_ex_;
#ifndef _MSC_VER
const int CGCMsgTFSyncEx::kVersionChecksumFieldNumber;
const int CGCMsgTFSyncEx::kVersionChecksumExFieldNumber;
const int CGCMsgTFSyncEx::kVersionCheckFieldNumber;
#endif  // !_MSC_VER

CGCMsgTFSyncEx::CGCMsgTFSyncEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgTFSyncEx::InitAsDefaultInstance() {
}

CGCMsgTFSyncEx::CGCMsgTFSyncEx(const CGCMsgTFSyncEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgTFSyncEx::SharedCtor() {
  _cached_size_ = 0;
  version_checksum_ = const_cast< ::std::string*>(&_default_version_checksum_);
  version_checksum_ex_ = const_cast< ::std::string*>(&_default_version_checksum_ex_);
  version_check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgTFSyncEx::~CGCMsgTFSyncEx() {
  SharedDtor();
}

void CGCMsgTFSyncEx::SharedDtor() {
  if (version_checksum_ != &_default_version_checksum_) {
    delete version_checksum_;
  }
  if (version_checksum_ex_ != &_default_version_checksum_ex_) {
    delete version_checksum_ex_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgTFSyncEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFSyncEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgTFSyncEx_descriptor_;
}

const CGCMsgTFSyncEx& CGCMsgTFSyncEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgTFSyncEx* CGCMsgTFSyncEx::default_instance_ = NULL;

CGCMsgTFSyncEx* CGCMsgTFSyncEx::New() const {
  return new CGCMsgTFSyncEx;
}

void CGCMsgTFSyncEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (version_checksum_ != &_default_version_checksum_) {
        version_checksum_->clear();
      }
    }
    if (_has_bit(1)) {
      if (version_checksum_ex_ != &_default_version_checksum_ex_) {
        version_checksum_ex_->clear();
      }
    }
    version_check_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgTFSyncEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version_checksum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version_checksum().data(), this->version_checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version_checksum_ex;
        break;
      }
      
      // optional bytes version_checksum_ex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_checksum_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum_ex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version_check;
        break;
      }
      
      // optional uint32 version_check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgTFSyncEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version_checksum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_checksum().data(), this->version_checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version_checksum(), output);
  }
  
  // optional bytes version_checksum_ex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->version_checksum_ex(), output);
  }
  
  // optional uint32 version_check = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_check(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgTFSyncEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version_checksum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_checksum().data(), this->version_checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version_checksum(), target);
  }
  
  // optional bytes version_checksum_ex = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->version_checksum_ex(), target);
  }
  
  // optional uint32 version_check = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_check(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgTFSyncEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version_checksum = 1;
    if (has_version_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_checksum());
    }
    
    // optional bytes version_checksum_ex = 2;
    if (has_version_checksum_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum_ex());
    }
    
    // optional uint32 version_check = 3;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFSyncEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgTFSyncEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgTFSyncEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgTFSyncEx::MergeFrom(const CGCMsgTFSyncEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version_checksum(from.version_checksum());
    }
    if (from._has_bit(1)) {
      set_version_checksum_ex(from.version_checksum_ex());
    }
    if (from._has_bit(2)) {
      set_version_check(from.version_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgTFSyncEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSyncEx::CopyFrom(const CGCMsgTFSyncEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSyncEx::IsInitialized() const {
  
  return true;
}

void CGCMsgTFSyncEx::Swap(CGCMsgTFSyncEx* other) {
  if (other != this) {
    std::swap(version_checksum_, other->version_checksum_);
    std::swap(version_checksum_ex_, other->version_checksum_ex_);
    std::swap(version_check_, other->version_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgTFSyncEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgTFSyncEx_descriptor_;
  metadata.reflection = CGCMsgTFSyncEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMvMVictory_Player::kSteamIdFieldNumber;
const int CMsgMvMVictory_Player::kSquadSurplusFieldNumber;
#endif  // !_MSC_VER

CMsgMvMVictory_Player::CMsgMvMVictory_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMVictory_Player::InitAsDefaultInstance() {
}

CMsgMvMVictory_Player::CMsgMvMVictory_Player(const CMsgMvMVictory_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMVictory_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  squad_surplus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMVictory_Player::~CMsgMvMVictory_Player() {
  SharedDtor();
}

void CMsgMvMVictory_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMvMVictory_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictory_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictory_Player_descriptor_;
}

const CMsgMvMVictory_Player& CMsgMvMVictory_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMVictory_Player* CMsgMvMVictory_Player::default_instance_ = NULL;

CMsgMvMVictory_Player* CMsgMvMVictory_Player::New() const {
  return new CMsgMvMVictory_Player;
}

void CMsgMvMVictory_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    squad_surplus_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMVictory_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_squad_surplus;
        break;
      }
      
      // optional bool squad_surplus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_squad_surplus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMvMVictory_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional bool squad_surplus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->squad_surplus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMVictory_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional bool squad_surplus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->squad_surplus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMVictory_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool squad_surplus = 2;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictory_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMVictory_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMVictory_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMVictory_Player::MergeFrom(const CMsgMvMVictory_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_squad_surplus(from.squad_surplus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMVictory_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory_Player::CopyFrom(const CMsgMvMVictory_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory_Player::IsInitialized() const {
  
  return true;
}

void CMsgMvMVictory_Player::Swap(CMsgMvMVictory_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(squad_surplus_, other->squad_surplus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMVictory_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMVictory_Player_descriptor_;
  metadata.reflection = CMsgMvMVictory_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CMsgMvMVictory::_default_tour_name_mannup_;
const ::std::string CMsgMvMVictory::_default_mission_name_;
#ifndef _MSC_VER
const int CMsgMvMVictory::kLegacyMissionIndexFieldNumber;
const int CMsgMvMVictory::kTourNameMannupFieldNumber;
const int CMsgMvMVictory::kMissionNameFieldNumber;
const int CMsgMvMVictory::kPlayersFieldNumber;
const int CMsgMvMVictory::kLobbyIdFieldNumber;
const int CMsgMvMVictory::kEventTimeFieldNumber;
#endif  // !_MSC_VER

CMsgMvMVictory::CMsgMvMVictory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMVictory::InitAsDefaultInstance() {
}

CMsgMvMVictory::CMsgMvMVictory(const CMsgMvMVictory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMVictory::SharedCtor() {
  _cached_size_ = 0;
  legacy_mission_index_ = 0u;
  tour_name_mannup_ = const_cast< ::std::string*>(&_default_tour_name_mannup_);
  mission_name_ = const_cast< ::std::string*>(&_default_mission_name_);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  event_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMVictory::~CMsgMvMVictory() {
  SharedDtor();
}

void CMsgMvMVictory::SharedDtor() {
  if (tour_name_mannup_ != &_default_tour_name_mannup_) {
    delete tour_name_mannup_;
  }
  if (mission_name_ != &_default_mission_name_) {
    delete mission_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMvMVictory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMVictory_descriptor_;
}

const CMsgMvMVictory& CMsgMvMVictory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMVictory* CMsgMvMVictory::default_instance_ = NULL;

CMsgMvMVictory* CMsgMvMVictory::New() const {
  return new CMsgMvMVictory;
}

void CMsgMvMVictory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    legacy_mission_index_ = 0u;
    if (_has_bit(1)) {
      if (tour_name_mannup_ != &_default_tour_name_mannup_) {
        tour_name_mannup_->clear();
      }
    }
    if (_has_bit(2)) {
      if (mission_name_ != &_default_mission_name_) {
        mission_name_->clear();
      }
    }
    lobby_id_ = GOOGLE_ULONGLONG(0);
    event_time_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMVictory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_mission_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_mission_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }
      
      // repeated .CMsgMvMVictory.Player players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(24)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_event_time;
        break;
      }
      
      // optional fixed32 event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &event_time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tour_name_mannup;
        break;
      }
      
      // optional string tour_name_mannup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tour_name_mannup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tour_name_mannup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tour_name_mannup().data(), this->tour_name_mannup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mission_name;
        break;
      }
      
      // optional string mission_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission_name().data(), this->mission_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMvMVictory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 legacy_mission_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_mission_index(), output);
  }
  
  // repeated .CMsgMvMVictory.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }
  
  // optional fixed32 event_time = 4;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->event_time(), output);
  }
  
  // optional string tour_name_mannup = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tour_name_mannup().data(), this->tour_name_mannup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tour_name_mannup(), output);
  }
  
  // optional string mission_name = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mission_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMVictory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 legacy_mission_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_mission_index(), target);
  }
  
  // repeated .CMsgMvMVictory.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }
  
  // optional fixed32 event_time = 4;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->event_time(), target);
  }
  
  // optional string tour_name_mannup = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tour_name_mannup().data(), this->tour_name_mannup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tour_name_mannup(), target);
  }
  
  // optional string mission_name = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_name().data(), this->mission_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mission_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMVictory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 legacy_mission_index = 1;
    if (has_legacy_mission_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_mission_index());
    }
    
    // optional string tour_name_mannup = 5;
    if (has_tour_name_mannup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tour_name_mannup());
    }
    
    // optional string mission_name = 6;
    if (has_mission_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }
    
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
    // optional fixed32 event_time = 4;
    if (has_event_time()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .CMsgMvMVictory.Player players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMVictory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMVictory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMVictory::MergeFrom(const CMsgMvMVictory& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_legacy_mission_index(from.legacy_mission_index());
    }
    if (from._has_bit(1)) {
      set_tour_name_mannup(from.tour_name_mannup());
    }
    if (from._has_bit(2)) {
      set_mission_name(from.mission_name());
    }
    if (from._has_bit(4)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(5)) {
      set_event_time(from.event_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMVictory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory::CopyFrom(const CMsgMvMVictory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory::IsInitialized() const {
  
  return true;
}

void CMsgMvMVictory::Swap(CMsgMvMVictory* other) {
  if (other != this) {
    std::swap(legacy_mission_index_, other->legacy_mission_index_);
    std::swap(tour_name_mannup_, other->tour_name_mannup_);
    std::swap(mission_name_, other->mission_name_);
    players_.Swap(&other->players_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMVictory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMVictory_descriptor_;
  metadata.reflection = CMsgMvMVictory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMvMMannUpVictoryReply::InitAsDefaultInstance() {
}

CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply(const CMsgMvMMannUpVictoryReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMvMMannUpVictoryReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMvMMannUpVictoryReply::~CMsgMvMMannUpVictoryReply() {
  SharedDtor();
}

void CMsgMvMMannUpVictoryReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMvMMannUpVictoryReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMMannUpVictoryReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMvMMannUpVictoryReply_descriptor_;
}

const CMsgMvMMannUpVictoryReply& CMsgMvMMannUpVictoryReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgMvMMannUpVictoryReply* CMsgMvMMannUpVictoryReply::default_instance_ = NULL;

CMsgMvMMannUpVictoryReply* CMsgMvMMannUpVictoryReply::New() const {
  return new CMsgMvMMannUpVictoryReply;
}

void CMsgMvMMannUpVictoryReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMvMMannUpVictoryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgMvMMannUpVictoryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMvMMannUpVictoryReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMvMMannUpVictoryReply::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMvMMannUpVictoryReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMvMMannUpVictoryReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const CMsgMvMMannUpVictoryReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMvMMannUpVictoryReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMMannUpVictoryReply::CopyFrom(const CMsgMvMMannUpVictoryReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMMannUpVictoryReply::IsInitialized() const {
  
  return true;
}

void CMsgMvMMannUpVictoryReply::Swap(CMsgMvMMannUpVictoryReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMvMMannUpVictoryReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMvMMannUpVictoryReply_descriptor_;
  metadata.reflection = CMsgMvMMannUpVictoryReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerKickingLobby::kLobbyIdFieldNumber;
const int CMsgGameServerKickingLobby::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerKickingLobby::CMsgGameServerKickingLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerKickingLobby::InitAsDefaultInstance() {
}

CMsgGameServerKickingLobby::CMsgGameServerKickingLobby(const CMsgGameServerKickingLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerKickingLobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerKickingLobby::~CMsgGameServerKickingLobby() {
  SharedDtor();
}

void CMsgGameServerKickingLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerKickingLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerKickingLobby_descriptor_;
}

const CMsgGameServerKickingLobby& CMsgGameServerKickingLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGameServerKickingLobby* CMsgGameServerKickingLobby::default_instance_ = NULL;

CMsgGameServerKickingLobby* CMsgGameServerKickingLobby::New() const {
  return new CMsgGameServerKickingLobby;
}

void CMsgGameServerKickingLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerKickingLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerKickingLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lobby_id = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }
  
  // optional uint64 match_id = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerKickingLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lobby_id = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }
  
  // optional uint64 match_id = 4;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerKickingLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
    // optional uint64 match_id = 4;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerKickingLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerKickingLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerKickingLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobby::MergeFrom(const CMsgGameServerKickingLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(1)) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerKickingLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobby::CopyFrom(const CMsgGameServerKickingLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobby::IsInitialized() const {
  
  return true;
}

void CMsgGameServerKickingLobby::Swap(CMsgGameServerKickingLobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerKickingLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerKickingLobby_descriptor_;
  metadata.reflection = CMsgGameServerKickingLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerKickingLobbyResponse::InitAsDefaultInstance() {
}

CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse(const CMsgGameServerKickingLobbyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerKickingLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerKickingLobbyResponse::~CMsgGameServerKickingLobbyResponse() {
  SharedDtor();
}

void CMsgGameServerKickingLobbyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerKickingLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobbyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerKickingLobbyResponse_descriptor_;
}

const CMsgGameServerKickingLobbyResponse& CMsgGameServerKickingLobbyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGameServerKickingLobbyResponse* CMsgGameServerKickingLobbyResponse::default_instance_ = NULL;

CMsgGameServerKickingLobbyResponse* CMsgGameServerKickingLobbyResponse::New() const {
  return new CMsgGameServerKickingLobbyResponse;
}

void CMsgGameServerKickingLobbyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerKickingLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGameServerKickingLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerKickingLobbyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerKickingLobbyResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerKickingLobbyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerKickingLobbyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const CMsgGameServerKickingLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const CMsgGameServerKickingLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobbyResponse::IsInitialized() const {
  
  return true;
}

void CMsgGameServerKickingLobbyResponse::Swap(CMsgGameServerKickingLobbyResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerKickingLobbyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerKickingLobbyResponse_descriptor_;
  metadata.reflection = CMsgGameServerKickingLobbyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaveGameAndPrepareToJoinParty::kPartyIdFieldNumber;
#endif  // !_MSC_VER

CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaveGameAndPrepareToJoinParty::InitAsDefaultInstance() {
}

CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty(const CMsgLeaveGameAndPrepareToJoinParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaveGameAndPrepareToJoinParty::~CMsgLeaveGameAndPrepareToJoinParty() {
  SharedDtor();
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveGameAndPrepareToJoinParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaveGameAndPrepareToJoinParty_descriptor_;
}

const CMsgLeaveGameAndPrepareToJoinParty& CMsgLeaveGameAndPrepareToJoinParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLeaveGameAndPrepareToJoinParty* CMsgLeaveGameAndPrepareToJoinParty::default_instance_ = NULL;

CMsgLeaveGameAndPrepareToJoinParty* CMsgLeaveGameAndPrepareToJoinParty::New() const {
  return new CMsgLeaveGameAndPrepareToJoinParty;
}

void CMsgLeaveGameAndPrepareToJoinParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaveGameAndPrepareToJoinParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeaveGameAndPrepareToJoinParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaveGameAndPrepareToJoinParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaveGameAndPrepareToJoinParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaveGameAndPrepareToJoinParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaveGameAndPrepareToJoinParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveGameAndPrepareToJoinParty::IsInitialized() const {
  
  return true;
}

void CMsgLeaveGameAndPrepareToJoinParty::Swap(CMsgLeaveGameAndPrepareToJoinParty* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaveGameAndPrepareToJoinParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaveGameAndPrepareToJoinParty_descriptor_;
  metadata.reflection = CMsgLeaveGameAndPrepareToJoinParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPlayerLeftMatch::kSteamIdFieldNumber;
const int CMsgPlayerLeftMatch::kLeaveReasonFieldNumber;
const int CMsgPlayerLeftMatch::kWasAbandonFieldNumber;
const int CMsgPlayerLeftMatch::kLobbyIdFieldNumber;
const int CMsgPlayerLeftMatch::kMatchIdFieldNumber;
const int CMsgPlayerLeftMatch::kXpBreakdownFieldNumber;
#endif  // !_MSC_VER

CMsgPlayerLeftMatch::CMsgPlayerLeftMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPlayerLeftMatch::InitAsDefaultInstance() {
}

CMsgPlayerLeftMatch::CMsgPlayerLeftMatch(const CMsgPlayerLeftMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPlayerLeftMatch::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  leave_reason_ = 0;
  was_abandon_ = false;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerLeftMatch::~CMsgPlayerLeftMatch() {
  SharedDtor();
}

void CMsgPlayerLeftMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerLeftMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerLeftMatch_descriptor_;
}

const CMsgPlayerLeftMatch& CMsgPlayerLeftMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPlayerLeftMatch* CMsgPlayerLeftMatch::default_instance_ = NULL;

CMsgPlayerLeftMatch* CMsgPlayerLeftMatch::New() const {
  return new CMsgPlayerLeftMatch;
}

void CMsgPlayerLeftMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    leave_reason_ = 0;
    was_abandon_ = false;
    lobby_id_ = GOOGLE_ULONGLONG(0);
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  xp_breakdown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerLeftMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leave_reason;
        break;
      }
      
      // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TFMatchLeaveReason_IsValid(value)) {
            set_leave_reason(static_cast< TFMatchLeaveReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_was_abandon;
        break;
      }
      
      // optional bool was_abandon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_abandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_abandon_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xp_breakdown;
        break;
      }
      
      // repeated .CMsgTFXPSource xp_breakdown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_breakdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_breakdown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xp_breakdown;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPlayerLeftMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leave_reason(), output);
  }
  
  // optional bool was_abandon = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->was_abandon(), output);
  }
  
  // optional uint64 lobby_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }
  
  // optional uint64 match_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }
  
  // repeated .CMsgTFXPSource xp_breakdown = 6;
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xp_breakdown(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPlayerLeftMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leave_reason(), target);
  }
  
  // optional bool was_abandon = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->was_abandon(), target);
  }
  
  // optional uint64 lobby_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }
  
  // optional uint64 match_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }
  
  // repeated .CMsgTFXPSource xp_breakdown = 6;
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->xp_breakdown(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPlayerLeftMatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (has_leave_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_reason());
    }
    
    // optional bool was_abandon = 3;
    if (has_was_abandon()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
  }
  // repeated .CMsgTFXPSource xp_breakdown = 6;
  total_size += 1 * this->xp_breakdown_size();
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_breakdown(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerLeftMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerLeftMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerLeftMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatch::MergeFrom(const CMsgPlayerLeftMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_leave_reason(from.leave_reason());
    }
    if (from._has_bit(2)) {
      set_was_abandon(from.was_abandon());
    }
    if (from._has_bit(3)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(4)) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerLeftMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatch::CopyFrom(const CMsgPlayerLeftMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatch::IsInitialized() const {
  
  return true;
}

void CMsgPlayerLeftMatch::Swap(CMsgPlayerLeftMatch* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(leave_reason_, other->leave_reason_);
    std::swap(was_abandon_, other->was_abandon_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(match_id_, other->match_id_);
    xp_breakdown_.Swap(&other->xp_breakdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerLeftMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerLeftMatch_descriptor_;
  metadata.reflection = CMsgPlayerLeftMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPlayerLeftMatchResponse::InitAsDefaultInstance() {
}

CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse(const CMsgPlayerLeftMatchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPlayerLeftMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerLeftMatchResponse::~CMsgPlayerLeftMatchResponse() {
  SharedDtor();
}

void CMsgPlayerLeftMatchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerLeftMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerLeftMatchResponse_descriptor_;
}

const CMsgPlayerLeftMatchResponse& CMsgPlayerLeftMatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPlayerLeftMatchResponse* CMsgPlayerLeftMatchResponse::default_instance_ = NULL;

CMsgPlayerLeftMatchResponse* CMsgPlayerLeftMatchResponse::New() const {
  return new CMsgPlayerLeftMatchResponse;
}

void CMsgPlayerLeftMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerLeftMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPlayerLeftMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPlayerLeftMatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPlayerLeftMatchResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerLeftMatchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerLeftMatchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const CMsgPlayerLeftMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerLeftMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatchResponse::CopyFrom(const CMsgPlayerLeftMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatchResponse::IsInitialized() const {
  
  return true;
}

void CMsgPlayerLeftMatchResponse::Swap(CMsgPlayerLeftMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerLeftMatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerLeftMatchResponse_descriptor_;
  metadata.reflection = CMsgPlayerLeftMatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPlayerVoteKickedAfterLeavingMatch::kSteamIdFieldNumber;
const int CMsgPlayerVoteKickedAfterLeavingMatch::kLobbyIdFieldNumber;
const int CMsgPlayerVoteKickedAfterLeavingMatch::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgPlayerVoteKickedAfterLeavingMatch::CMsgPlayerVoteKickedAfterLeavingMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatch::InitAsDefaultInstance() {
}

CMsgPlayerVoteKickedAfterLeavingMatch::CMsgPlayerVoteKickedAfterLeavingMatch(const CMsgPlayerVoteKickedAfterLeavingMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerVoteKickedAfterLeavingMatch::~CMsgPlayerVoteKickedAfterLeavingMatch() {
  SharedDtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_;
}

const CMsgPlayerVoteKickedAfterLeavingMatch& CMsgPlayerVoteKickedAfterLeavingMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPlayerVoteKickedAfterLeavingMatch* CMsgPlayerVoteKickedAfterLeavingMatch::default_instance_ = NULL;

CMsgPlayerVoteKickedAfterLeavingMatch* CMsgPlayerVoteKickedAfterLeavingMatch::New() const {
  return new CMsgPlayerVoteKickedAfterLeavingMatch;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    lobby_id_ = GOOGLE_ULONGLONG(0);
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerVoteKickedAfterLeavingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lobby_id;
        break;
      }
      
      // optional fixed64 lobby_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_match_id;
        break;
      }
      
      // optional fixed64 match_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &match_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional fixed64 lobby_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }
  
  // optional fixed64 match_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPlayerVoteKickedAfterLeavingMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional fixed64 lobby_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }
  
  // optional fixed64 match_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPlayerVoteKickedAfterLeavingMatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerVoteKickedAfterLeavingMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerVoteKickedAfterLeavingMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatch::MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_lobby_id(from.lobby_id());
    }
    if (from._has_bit(2)) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerVoteKickedAfterLeavingMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatch::CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerVoteKickedAfterLeavingMatch::IsInitialized() const {
  
  return true;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::Swap(CMsgPlayerVoteKickedAfterLeavingMatch* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerVoteKickedAfterLeavingMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerVoteKickedAfterLeavingMatch_descriptor_;
  metadata.reflection = CMsgPlayerVoteKickedAfterLeavingMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::InitAsDefaultInstance() {
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse::~CMsgPlayerVoteKickedAfterLeavingMatchResponse() {
  SharedDtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_;
}

const CMsgPlayerVoteKickedAfterLeavingMatchResponse& CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse* CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance_ = NULL;

CMsgPlayerVoteKickedAfterLeavingMatchResponse* CMsgPlayerVoteKickedAfterLeavingMatchResponse::New() const {
  return new CMsgPlayerVoteKickedAfterLeavingMatchResponse;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPlayerVoteKickedAfterLeavingMatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPlayerVoteKickedAfterLeavingMatchResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerVoteKickedAfterLeavingMatchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerVoteKickedAfterLeavingMatchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerVoteKickedAfterLeavingMatchResponse::IsInitialized() const {
  
  return true;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::Swap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerVoteKickedAfterLeavingMatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerVoteKickedAfterLeavingMatchResponse_descriptor_;
  metadata.reflection = CMsgPlayerVoteKickedAfterLeavingMatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHalloween_ServerBossEvent::kEventCounterFieldNumber;
const int CMsgHalloween_ServerBossEvent::kTimestampFieldNumber;
const int CMsgHalloween_ServerBossEvent::kBossTypeFieldNumber;
const int CMsgHalloween_ServerBossEvent::kBossLevelFieldNumber;
const int CMsgHalloween_ServerBossEvent::kEventTypeFieldNumber;
const int CMsgHalloween_ServerBossEvent::kPlayersInvolvedFieldNumber;
const int CMsgHalloween_ServerBossEvent::kElapsedTimeFieldNumber;
#endif  // !_MSC_VER

CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHalloween_ServerBossEvent::InitAsDefaultInstance() {
}

CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent(const CMsgHalloween_ServerBossEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHalloween_ServerBossEvent::SharedCtor() {
  _cached_size_ = 0;
  event_counter_ = 0u;
  timestamp_ = 0u;
  boss_type_ = 0u;
  boss_level_ = 0u;
  event_type_ = 0u;
  players_involved_ = 0u;
  elapsed_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHalloween_ServerBossEvent::~CMsgHalloween_ServerBossEvent() {
  SharedDtor();
}

void CMsgHalloween_ServerBossEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHalloween_ServerBossEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHalloween_ServerBossEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHalloween_ServerBossEvent_descriptor_;
}

const CMsgHalloween_ServerBossEvent& CMsgHalloween_ServerBossEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgHalloween_ServerBossEvent* CMsgHalloween_ServerBossEvent::default_instance_ = NULL;

CMsgHalloween_ServerBossEvent* CMsgHalloween_ServerBossEvent::New() const {
  return new CMsgHalloween_ServerBossEvent;
}

void CMsgHalloween_ServerBossEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_counter_ = 0u;
    timestamp_ = 0u;
    boss_type_ = 0u;
    boss_level_ = 0u;
    event_type_ = 0u;
    players_involved_ = 0u;
    elapsed_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHalloween_ServerBossEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_counter_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_type;
        break;
      }
      
      // optional uint32 boss_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_type_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss_level;
        break;
      }
      
      // optional uint32 boss_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_level_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }
      
      // optional uint32 event_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_players_involved;
        break;
      }
      
      // optional uint32 players_involved = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players_involved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_involved_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_elapsed_time;
        break;
      }
      
      // optional float elapsed_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elapsed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elapsed_time_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHalloween_ServerBossEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_counter = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_counter(), output);
  }
  
  // optional uint32 timestamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }
  
  // optional uint32 boss_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss_type(), output);
  }
  
  // optional uint32 boss_level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boss_level(), output);
  }
  
  // optional uint32 event_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_type(), output);
  }
  
  // optional uint32 players_involved = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_involved(), output);
  }
  
  // optional float elapsed_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->elapsed_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHalloween_ServerBossEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_counter = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_counter(), target);
  }
  
  // optional uint32 timestamp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }
  
  // optional uint32 boss_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boss_type(), target);
  }
  
  // optional uint32 boss_level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boss_level(), target);
  }
  
  // optional uint32 event_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_type(), target);
  }
  
  // optional uint32 players_involved = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_involved(), target);
  }
  
  // optional float elapsed_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->elapsed_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHalloween_ServerBossEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_counter = 1;
    if (has_event_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_counter());
    }
    
    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional uint32 boss_type = 3;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_type());
    }
    
    // optional uint32 boss_level = 4;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_level());
    }
    
    // optional uint32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
    // optional uint32 players_involved = 6;
    if (has_players_involved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_involved());
    }
    
    // optional float elapsed_time = 7;
    if (has_elapsed_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHalloween_ServerBossEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHalloween_ServerBossEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const CMsgHalloween_ServerBossEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_event_counter(from.event_counter());
    }
    if (from._has_bit(1)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(2)) {
      set_boss_type(from.boss_type());
    }
    if (from._has_bit(3)) {
      set_boss_level(from.boss_level());
    }
    if (from._has_bit(4)) {
      set_event_type(from.event_type());
    }
    if (from._has_bit(5)) {
      set_players_involved(from.players_involved());
    }
    if (from._has_bit(6)) {
      set_elapsed_time(from.elapsed_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const CMsgHalloween_ServerBossEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_ServerBossEvent::IsInitialized() const {
  
  return true;
}

void CMsgHalloween_ServerBossEvent::Swap(CMsgHalloween_ServerBossEvent* other) {
  if (other != this) {
    std::swap(event_counter_, other->event_counter_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(boss_type_, other->boss_type_);
    std::swap(boss_level_, other->boss_level_);
    std::swap(event_type_, other->event_type_);
    std::swap(players_involved_, other->players_involved_);
    std::swap(elapsed_time_, other->elapsed_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHalloween_ServerBossEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHalloween_ServerBossEvent_descriptor_;
  metadata.reflection = CMsgHalloween_ServerBossEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHalloween_Merasmus2012::kEventCounterFieldNumber;
const int CMsgHalloween_Merasmus2012::kTimeSubmittedFieldNumber;
const int CMsgHalloween_Merasmus2012::kIsValveServerFieldNumber;
const int CMsgHalloween_Merasmus2012::kBossLevelFieldNumber;
const int CMsgHalloween_Merasmus2012::kSpawnedHealthFieldNumber;
const int CMsgHalloween_Merasmus2012::kRemainingHealthFieldNumber;
const int CMsgHalloween_Merasmus2012::kLifeTimeFieldNumber;
const int CMsgHalloween_Merasmus2012::kBombKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kStaffKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kPvpKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kProphuntTime1FieldNumber;
const int CMsgHalloween_Merasmus2012::kProphuntTime2FieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgScoutFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSniperFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSoldierFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgDemoFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgMedicFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgHeavyFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgPyroFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSpyFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgEngineerFieldNumber;
const int CMsgHalloween_Merasmus2012::kScoutCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSniperCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSoliderCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kDemoCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kMedicCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kHeavyCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kPyroCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSpyCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kEngineerCountFieldNumber;
#endif  // !_MSC_VER

CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHalloween_Merasmus2012::InitAsDefaultInstance() {
}

CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012(const CMsgHalloween_Merasmus2012& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHalloween_Merasmus2012::SharedCtor() {
  _cached_size_ = 0;
  event_counter_ = 0u;
  time_submitted_ = 0u;
  is_valve_server_ = false;
  boss_level_ = 0u;
  spawned_health_ = 0u;
  remaining_health_ = 0u;
  life_time_ = 0u;
  bomb_kills_ = 0u;
  staff_kills_ = 0u;
  pvp_kills_ = 0u;
  prophunt_time1_ = 0u;
  prophunt_time2_ = 0u;
  dmg_scout_ = 0u;
  dmg_sniper_ = 0u;
  dmg_soldier_ = 0u;
  dmg_demo_ = 0u;
  dmg_medic_ = 0u;
  dmg_heavy_ = 0u;
  dmg_pyro_ = 0u;
  dmg_spy_ = 0u;
  dmg_engineer_ = 0u;
  scout_count_ = 0u;
  sniper_count_ = 0u;
  solider_count_ = 0u;
  demo_count_ = 0u;
  medic_count_ = 0u;
  heavy_count_ = 0u;
  pyro_count_ = 0u;
  spy_count_ = 0u;
  engineer_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHalloween_Merasmus2012::~CMsgHalloween_Merasmus2012() {
  SharedDtor();
}

void CMsgHalloween_Merasmus2012::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHalloween_Merasmus2012::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHalloween_Merasmus2012::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHalloween_Merasmus2012_descriptor_;
}

const CMsgHalloween_Merasmus2012& CMsgHalloween_Merasmus2012::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgHalloween_Merasmus2012* CMsgHalloween_Merasmus2012::default_instance_ = NULL;

CMsgHalloween_Merasmus2012* CMsgHalloween_Merasmus2012::New() const {
  return new CMsgHalloween_Merasmus2012;
}

void CMsgHalloween_Merasmus2012::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_counter_ = 0u;
    time_submitted_ = 0u;
    is_valve_server_ = false;
    boss_level_ = 0u;
    spawned_health_ = 0u;
    remaining_health_ = 0u;
    life_time_ = 0u;
    bomb_kills_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    staff_kills_ = 0u;
    pvp_kills_ = 0u;
    prophunt_time1_ = 0u;
    prophunt_time2_ = 0u;
    dmg_scout_ = 0u;
    dmg_sniper_ = 0u;
    dmg_soldier_ = 0u;
    dmg_demo_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dmg_medic_ = 0u;
    dmg_heavy_ = 0u;
    dmg_pyro_ = 0u;
    dmg_spy_ = 0u;
    dmg_engineer_ = 0u;
    scout_count_ = 0u;
    sniper_count_ = 0u;
    solider_count_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    demo_count_ = 0u;
    medic_count_ = 0u;
    heavy_count_ = 0u;
    pyro_count_ = 0u;
    spy_count_ = 0u;
    engineer_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHalloween_Merasmus2012::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_counter_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_time_submitted;
        break;
      }
      
      // optional fixed32 time_submitted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_submitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_submitted_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_valve_server;
        break;
      }
      
      // optional bool is_valve_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valve_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valve_server_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss_level;
        break;
      }
      
      // optional uint32 boss_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_level_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_spawned_health;
        break;
      }
      
      // optional uint32 spawned_health = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawned_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawned_health_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remaining_health;
        break;
      }
      
      // optional uint32 remaining_health = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_health_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_life_time;
        break;
      }
      
      // optional uint32 life_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bomb_kills;
        break;
      }
      
      // optional uint32 bomb_kills = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bomb_kills_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_staff_kills;
        break;
      }
      
      // optional uint32 staff_kills = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staff_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staff_kills_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pvp_kills;
        break;
      }
      
      // optional uint32 pvp_kills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_kills_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prophunt_time1;
        break;
      }
      
      // optional uint32 prophunt_time1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prophunt_time1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prophunt_time1_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prophunt_time2;
        break;
      }
      
      // optional uint32 prophunt_time2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prophunt_time2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prophunt_time2_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dmg_scout;
        break;
      }
      
      // optional uint32 dmg_scout = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_scout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_scout_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dmg_sniper;
        break;
      }
      
      // optional uint32 dmg_sniper = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_sniper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_sniper_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dmg_soldier;
        break;
      }
      
      // optional uint32 dmg_soldier = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_soldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_soldier_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dmg_demo;
        break;
      }
      
      // optional uint32 dmg_demo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_demo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_demo_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_dmg_medic;
        break;
      }
      
      // optional uint32 dmg_medic = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_medic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_medic_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dmg_heavy;
        break;
      }
      
      // optional uint32 dmg_heavy = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_heavy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_heavy_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dmg_pyro;
        break;
      }
      
      // optional uint32 dmg_pyro = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_pyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_pyro_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_dmg_spy;
        break;
      }
      
      // optional uint32 dmg_spy = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_spy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_spy_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_dmg_engineer;
        break;
      }
      
      // optional uint32 dmg_engineer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_engineer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_engineer_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_scout_count;
        break;
      }
      
      // optional uint32 scout_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scout_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scout_count_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sniper_count;
        break;
      }
      
      // optional uint32 sniper_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sniper_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sniper_count_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_solider_count;
        break;
      }
      
      // optional uint32 solider_count = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solider_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solider_count_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_demo_count;
        break;
      }
      
      // optional uint32 demo_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demo_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demo_count_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_medic_count;
        break;
      }
      
      // optional uint32 medic_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medic_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medic_count_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_heavy_count;
        break;
      }
      
      // optional uint32 heavy_count = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heavy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavy_count_)));
          _set_bit(26);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_pyro_count;
        break;
      }
      
      // optional uint32 pyro_count = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pyro_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyro_count_)));
          _set_bit(27);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_spy_count;
        break;
      }
      
      // optional uint32 spy_count = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spy_count_)));
          _set_bit(28);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_engineer_count;
        break;
      }
      
      // optional uint32 engineer_count = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_engineer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engineer_count_)));
          _set_bit(29);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHalloween_Merasmus2012::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_counter = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_counter(), output);
  }
  
  // optional fixed32 time_submitted = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_submitted(), output);
  }
  
  // optional bool is_valve_server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_valve_server(), output);
  }
  
  // optional uint32 boss_level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boss_level(), output);
  }
  
  // optional uint32 spawned_health = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->spawned_health(), output);
  }
  
  // optional uint32 remaining_health = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remaining_health(), output);
  }
  
  // optional uint32 life_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->life_time(), output);
  }
  
  // optional uint32 bomb_kills = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bomb_kills(), output);
  }
  
  // optional uint32 staff_kills = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->staff_kills(), output);
  }
  
  // optional uint32 pvp_kills = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pvp_kills(), output);
  }
  
  // optional uint32 prophunt_time1 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->prophunt_time1(), output);
  }
  
  // optional uint32 prophunt_time2 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prophunt_time2(), output);
  }
  
  // optional uint32 dmg_scout = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dmg_scout(), output);
  }
  
  // optional uint32 dmg_sniper = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dmg_sniper(), output);
  }
  
  // optional uint32 dmg_soldier = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dmg_soldier(), output);
  }
  
  // optional uint32 dmg_demo = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dmg_demo(), output);
  }
  
  // optional uint32 dmg_medic = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dmg_medic(), output);
  }
  
  // optional uint32 dmg_heavy = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dmg_heavy(), output);
  }
  
  // optional uint32 dmg_pyro = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dmg_pyro(), output);
  }
  
  // optional uint32 dmg_spy = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->dmg_spy(), output);
  }
  
  // optional uint32 dmg_engineer = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dmg_engineer(), output);
  }
  
  // optional uint32 scout_count = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->scout_count(), output);
  }
  
  // optional uint32 sniper_count = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->sniper_count(), output);
  }
  
  // optional uint32 solider_count = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->solider_count(), output);
  }
  
  // optional uint32 demo_count = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->demo_count(), output);
  }
  
  // optional uint32 medic_count = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->medic_count(), output);
  }
  
  // optional uint32 heavy_count = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->heavy_count(), output);
  }
  
  // optional uint32 pyro_count = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->pyro_count(), output);
  }
  
  // optional uint32 spy_count = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->spy_count(), output);
  }
  
  // optional uint32 engineer_count = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->engineer_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHalloween_Merasmus2012::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_counter = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_counter(), target);
  }
  
  // optional fixed32 time_submitted = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->time_submitted(), target);
  }
  
  // optional bool is_valve_server = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_valve_server(), target);
  }
  
  // optional uint32 boss_level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boss_level(), target);
  }
  
  // optional uint32 spawned_health = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->spawned_health(), target);
  }
  
  // optional uint32 remaining_health = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remaining_health(), target);
  }
  
  // optional uint32 life_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->life_time(), target);
  }
  
  // optional uint32 bomb_kills = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bomb_kills(), target);
  }
  
  // optional uint32 staff_kills = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->staff_kills(), target);
  }
  
  // optional uint32 pvp_kills = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pvp_kills(), target);
  }
  
  // optional uint32 prophunt_time1 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->prophunt_time1(), target);
  }
  
  // optional uint32 prophunt_time2 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prophunt_time2(), target);
  }
  
  // optional uint32 dmg_scout = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dmg_scout(), target);
  }
  
  // optional uint32 dmg_sniper = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dmg_sniper(), target);
  }
  
  // optional uint32 dmg_soldier = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dmg_soldier(), target);
  }
  
  // optional uint32 dmg_demo = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dmg_demo(), target);
  }
  
  // optional uint32 dmg_medic = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->dmg_medic(), target);
  }
  
  // optional uint32 dmg_heavy = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dmg_heavy(), target);
  }
  
  // optional uint32 dmg_pyro = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dmg_pyro(), target);
  }
  
  // optional uint32 dmg_spy = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->dmg_spy(), target);
  }
  
  // optional uint32 dmg_engineer = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dmg_engineer(), target);
  }
  
  // optional uint32 scout_count = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->scout_count(), target);
  }
  
  // optional uint32 sniper_count = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->sniper_count(), target);
  }
  
  // optional uint32 solider_count = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->solider_count(), target);
  }
  
  // optional uint32 demo_count = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->demo_count(), target);
  }
  
  // optional uint32 medic_count = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->medic_count(), target);
  }
  
  // optional uint32 heavy_count = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->heavy_count(), target);
  }
  
  // optional uint32 pyro_count = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->pyro_count(), target);
  }
  
  // optional uint32 spy_count = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->spy_count(), target);
  }
  
  // optional uint32 engineer_count = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->engineer_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHalloween_Merasmus2012::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_counter = 1;
    if (has_event_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_counter());
    }
    
    // optional fixed32 time_submitted = 2;
    if (has_time_submitted()) {
      total_size += 1 + 4;
    }
    
    // optional bool is_valve_server = 3;
    if (has_is_valve_server()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 boss_level = 4;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_level());
    }
    
    // optional uint32 spawned_health = 5;
    if (has_spawned_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawned_health());
    }
    
    // optional uint32 remaining_health = 6;
    if (has_remaining_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaining_health());
    }
    
    // optional uint32 life_time = 7;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_time());
    }
    
    // optional uint32 bomb_kills = 8;
    if (has_bomb_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bomb_kills());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 staff_kills = 9;
    if (has_staff_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staff_kills());
    }
    
    // optional uint32 pvp_kills = 10;
    if (has_pvp_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_kills());
    }
    
    // optional uint32 prophunt_time1 = 11;
    if (has_prophunt_time1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prophunt_time1());
    }
    
    // optional uint32 prophunt_time2 = 12;
    if (has_prophunt_time2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prophunt_time2());
    }
    
    // optional uint32 dmg_scout = 13;
    if (has_dmg_scout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_scout());
    }
    
    // optional uint32 dmg_sniper = 14;
    if (has_dmg_sniper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_sniper());
    }
    
    // optional uint32 dmg_soldier = 15;
    if (has_dmg_soldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_soldier());
    }
    
    // optional uint32 dmg_demo = 16;
    if (has_dmg_demo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_demo());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 dmg_medic = 17;
    if (has_dmg_medic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_medic());
    }
    
    // optional uint32 dmg_heavy = 18;
    if (has_dmg_heavy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_heavy());
    }
    
    // optional uint32 dmg_pyro = 19;
    if (has_dmg_pyro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_pyro());
    }
    
    // optional uint32 dmg_spy = 20;
    if (has_dmg_spy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_spy());
    }
    
    // optional uint32 dmg_engineer = 21;
    if (has_dmg_engineer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_engineer());
    }
    
    // optional uint32 scout_count = 22;
    if (has_scout_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scout_count());
    }
    
    // optional uint32 sniper_count = 23;
    if (has_sniper_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sniper_count());
    }
    
    // optional uint32 solider_count = 24;
    if (has_solider_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solider_count());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 demo_count = 25;
    if (has_demo_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demo_count());
    }
    
    // optional uint32 medic_count = 26;
    if (has_medic_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medic_count());
    }
    
    // optional uint32 heavy_count = 27;
    if (has_heavy_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavy_count());
    }
    
    // optional uint32 pyro_count = 28;
    if (has_pyro_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyro_count());
    }
    
    // optional uint32 spy_count = 29;
    if (has_spy_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spy_count());
    }
    
    // optional uint32 engineer_count = 30;
    if (has_engineer_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engineer_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHalloween_Merasmus2012::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHalloween_Merasmus2012* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHalloween_Merasmus2012*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHalloween_Merasmus2012::MergeFrom(const CMsgHalloween_Merasmus2012& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_event_counter(from.event_counter());
    }
    if (from._has_bit(1)) {
      set_time_submitted(from.time_submitted());
    }
    if (from._has_bit(2)) {
      set_is_valve_server(from.is_valve_server());
    }
    if (from._has_bit(3)) {
      set_boss_level(from.boss_level());
    }
    if (from._has_bit(4)) {
      set_spawned_health(from.spawned_health());
    }
    if (from._has_bit(5)) {
      set_remaining_health(from.remaining_health());
    }
    if (from._has_bit(6)) {
      set_life_time(from.life_time());
    }
    if (from._has_bit(7)) {
      set_bomb_kills(from.bomb_kills());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_staff_kills(from.staff_kills());
    }
    if (from._has_bit(9)) {
      set_pvp_kills(from.pvp_kills());
    }
    if (from._has_bit(10)) {
      set_prophunt_time1(from.prophunt_time1());
    }
    if (from._has_bit(11)) {
      set_prophunt_time2(from.prophunt_time2());
    }
    if (from._has_bit(12)) {
      set_dmg_scout(from.dmg_scout());
    }
    if (from._has_bit(13)) {
      set_dmg_sniper(from.dmg_sniper());
    }
    if (from._has_bit(14)) {
      set_dmg_soldier(from.dmg_soldier());
    }
    if (from._has_bit(15)) {
      set_dmg_demo(from.dmg_demo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_dmg_medic(from.dmg_medic());
    }
    if (from._has_bit(17)) {
      set_dmg_heavy(from.dmg_heavy());
    }
    if (from._has_bit(18)) {
      set_dmg_pyro(from.dmg_pyro());
    }
    if (from._has_bit(19)) {
      set_dmg_spy(from.dmg_spy());
    }
    if (from._has_bit(20)) {
      set_dmg_engineer(from.dmg_engineer());
    }
    if (from._has_bit(21)) {
      set_scout_count(from.scout_count());
    }
    if (from._has_bit(22)) {
      set_sniper_count(from.sniper_count());
    }
    if (from._has_bit(23)) {
      set_solider_count(from.solider_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_demo_count(from.demo_count());
    }
    if (from._has_bit(25)) {
      set_medic_count(from.medic_count());
    }
    if (from._has_bit(26)) {
      set_heavy_count(from.heavy_count());
    }
    if (from._has_bit(27)) {
      set_pyro_count(from.pyro_count());
    }
    if (from._has_bit(28)) {
      set_spy_count(from.spy_count());
    }
    if (from._has_bit(29)) {
      set_engineer_count(from.engineer_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHalloween_Merasmus2012::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_Merasmus2012::CopyFrom(const CMsgHalloween_Merasmus2012& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_Merasmus2012::IsInitialized() const {
  
  return true;
}

void CMsgHalloween_Merasmus2012::Swap(CMsgHalloween_Merasmus2012* other) {
  if (other != this) {
    std::swap(event_counter_, other->event_counter_);
    std::swap(time_submitted_, other->time_submitted_);
    std::swap(is_valve_server_, other->is_valve_server_);
    std::swap(boss_level_, other->boss_level_);
    std::swap(spawned_health_, other->spawned_health_);
    std::swap(remaining_health_, other->remaining_health_);
    std::swap(life_time_, other->life_time_);
    std::swap(bomb_kills_, other->bomb_kills_);
    std::swap(staff_kills_, other->staff_kills_);
    std::swap(pvp_kills_, other->pvp_kills_);
    std::swap(prophunt_time1_, other->prophunt_time1_);
    std::swap(prophunt_time2_, other->prophunt_time2_);
    std::swap(dmg_scout_, other->dmg_scout_);
    std::swap(dmg_sniper_, other->dmg_sniper_);
    std::swap(dmg_soldier_, other->dmg_soldier_);
    std::swap(dmg_demo_, other->dmg_demo_);
    std::swap(dmg_medic_, other->dmg_medic_);
    std::swap(dmg_heavy_, other->dmg_heavy_);
    std::swap(dmg_pyro_, other->dmg_pyro_);
    std::swap(dmg_spy_, other->dmg_spy_);
    std::swap(dmg_engineer_, other->dmg_engineer_);
    std::swap(scout_count_, other->scout_count_);
    std::swap(sniper_count_, other->sniper_count_);
    std::swap(solider_count_, other->solider_count_);
    std::swap(demo_count_, other->demo_count_);
    std::swap(medic_count_, other->medic_count_);
    std::swap(heavy_count_, other->heavy_count_);
    std::swap(pyro_count_, other->pyro_count_);
    std::swap(spy_count_, other->spy_count_);
    std::swap(engineer_count_, other->engineer_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHalloween_Merasmus2012::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHalloween_Merasmus2012_descriptor_;
  metadata.reflection = CMsgHalloween_Merasmus2012_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUpdateHalloweenMerasmusLootLevel_Player::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::InitAsDefaultInstance() {
}

CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateHalloweenMerasmusLootLevel_Player::~CMsgUpdateHalloweenMerasmusLootLevel_Player() {
  SharedDtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_;
}

const CMsgUpdateHalloweenMerasmusLootLevel_Player& CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_ = NULL;

CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel_Player::New() const {
  return new CMsgUpdateHalloweenMerasmusLootLevel_Player;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateHalloweenMerasmusLootLevel_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateHalloweenMerasmusLootLevel_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateHalloweenMerasmusLootLevel_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateHalloweenMerasmusLootLevel_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel_Player::IsInitialized() const {
  
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::Swap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateHalloweenMerasmusLootLevel_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_;
  metadata.reflection = CMsgUpdateHalloweenMerasmusLootLevel_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgUpdateHalloweenMerasmusLootLevel::kPlayersFieldNumber;
const int CMsgUpdateHalloweenMerasmusLootLevel::kMerasmusLevelFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel::InitAsDefaultInstance() {
}

CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel(const CMsgUpdateHalloweenMerasmusLootLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedCtor() {
  _cached_size_ = 0;
  merasmus_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateHalloweenMerasmusLootLevel::~CMsgUpdateHalloweenMerasmusLootLevel() {
  SharedDtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateHalloweenMerasmusLootLevel_descriptor_;
}

const CMsgUpdateHalloweenMerasmusLootLevel& CMsgUpdateHalloweenMerasmusLootLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdateHalloweenMerasmusLootLevel* CMsgUpdateHalloweenMerasmusLootLevel::default_instance_ = NULL;

CMsgUpdateHalloweenMerasmusLootLevel* CMsgUpdateHalloweenMerasmusLootLevel::New() const {
  return new CMsgUpdateHalloweenMerasmusLootLevel;
}

void CMsgUpdateHalloweenMerasmusLootLevel::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    merasmus_level_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateHalloweenMerasmusLootLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_merasmus_level;
        break;
      }
      
      // optional uint32 merasmus_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merasmus_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &merasmus_level_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateHalloweenMerasmusLootLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // optional uint32 merasmus_level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->merasmus_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateHalloweenMerasmusLootLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // optional uint32 merasmus_level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->merasmus_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateHalloweenMerasmusLootLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 merasmus_level = 2;
    if (has_merasmus_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->merasmus_level());
    }
    
  }
  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateHalloweenMerasmusLootLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_merasmus_level(from.merasmus_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel::IsInitialized() const {
  
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel::Swap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(merasmus_level_, other->merasmus_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateHalloweenMerasmusLootLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateHalloweenMerasmusLootLevel_descriptor_;
  metadata.reflection = CMsgUpdateHalloweenMerasmusLootLevel_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CAttribute_String::_default_value_;
#ifndef _MSC_VER
const int CAttribute_String::kValueFieldNumber;
#endif  // !_MSC_VER

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_String::InitAsDefaultInstance() {
}

CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_String::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_String::~CAttribute_String() {
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_String_descriptor_;
}

const CAttribute_String& CAttribute_String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CAttribute_String* CAttribute_String::default_instance_ = NULL;

CAttribute_String* CAttribute_String::New() const {
  return new CAttribute_String;
}

void CAttribute_String::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_String::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  
  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_String_descriptor_;
  metadata.reflection = CAttribute_String_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CAttribute_DynamicRecipeComponent::_default_attributes_string_;
#ifndef _MSC_VER
const int CAttribute_DynamicRecipeComponent::kDefIndexFieldNumber;
const int CAttribute_DynamicRecipeComponent::kItemQualityFieldNumber;
const int CAttribute_DynamicRecipeComponent::kComponentFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent::kAttributesStringFieldNumber;
const int CAttribute_DynamicRecipeComponent::kNumRequiredFieldNumber;
const int CAttribute_DynamicRecipeComponent::kNumFulfilledFieldNumber;
#endif  // !_MSC_VER

CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_DynamicRecipeComponent::InitAsDefaultInstance() {
}

CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent(const CAttribute_DynamicRecipeComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  item_quality_ = 0u;
  component_flags_ = 0u;
  attributes_string_ = const_cast< ::std::string*>(&_default_attributes_string_);
  num_required_ = 0u;
  num_fulfilled_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_DynamicRecipeComponent::~CAttribute_DynamicRecipeComponent() {
  SharedDtor();
}

void CAttribute_DynamicRecipeComponent::SharedDtor() {
  if (attributes_string_ != &_default_attributes_string_) {
    delete attributes_string_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_DynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_DynamicRecipeComponent_descriptor_;
}

const CAttribute_DynamicRecipeComponent& CAttribute_DynamicRecipeComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CAttribute_DynamicRecipeComponent* CAttribute_DynamicRecipeComponent::default_instance_ = NULL;

CAttribute_DynamicRecipeComponent* CAttribute_DynamicRecipeComponent::New() const {
  return new CAttribute_DynamicRecipeComponent;
}

void CAttribute_DynamicRecipeComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    item_quality_ = 0u;
    component_flags_ = 0u;
    if (_has_bit(3)) {
      if (attributes_string_ != &_default_attributes_string_) {
        attributes_string_->clear();
      }
    }
    num_required_ = 0u;
    num_fulfilled_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_DynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional uint32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_component_flags;
        break;
      }
      
      // optional uint32 component_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_flags_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attributes_string;
        break;
      }
      
      // optional string attributes_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributes_string().data(), this->attributes_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_required;
        break;
      }
      
      // optional uint32 num_required = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_required_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_fulfilled;
        break;
      }
      
      // optional uint32 num_fulfilled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_fulfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fulfilled_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_DynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint32 item_quality = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }
  
  // optional uint32 component_flags = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->component_flags(), output);
  }
  
  // optional string attributes_string = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attributes_string(), output);
  }
  
  // optional uint32 num_required = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_required(), output);
  }
  
  // optional uint32 num_fulfilled = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_fulfilled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_DynamicRecipeComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint32 item_quality = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional uint32 component_flags = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->component_flags(), target);
  }
  
  // optional string attributes_string = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attributes_string(), target);
  }
  
  // optional uint32 num_required = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_required(), target);
  }
  
  // optional uint32 num_fulfilled = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_fulfilled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_DynamicRecipeComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }
    
    // optional uint32 component_flags = 3;
    if (has_component_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_flags());
    }
    
    // optional string attributes_string = 4;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }
    
    // optional uint32 num_required = 5;
    if (has_num_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_required());
    }
    
    // optional uint32 num_fulfilled = 6;
    if (has_num_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fulfilled());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_DynamicRecipeComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const CAttribute_DynamicRecipeComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(1)) {
      set_item_quality(from.item_quality());
    }
    if (from._has_bit(2)) {
      set_component_flags(from.component_flags());
    }
    if (from._has_bit(3)) {
      set_attributes_string(from.attributes_string());
    }
    if (from._has_bit(4)) {
      set_num_required(from.num_required());
    }
    if (from._has_bit(5)) {
      set_num_fulfilled(from.num_fulfilled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const CAttribute_DynamicRecipeComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent::IsInitialized() const {
  
  return true;
}

void CAttribute_DynamicRecipeComponent::Swap(CAttribute_DynamicRecipeComponent* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(component_flags_, other->component_flags_);
    std::swap(attributes_string_, other->attributes_string_);
    std::swap(num_required_, other->num_required_);
    std::swap(num_fulfilled_, other->num_fulfilled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_DynamicRecipeComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_DynamicRecipeComponent_descriptor_;
  metadata.reflection = CAttribute_DynamicRecipeComponent_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_default_attributes_string_;
#ifndef _MSC_VER
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kDefIndexFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemDefFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemQualityFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kComponentFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kAttributesStringFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kNumRequiredFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemCountFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kNumFulfilledFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemsFulfilledFieldNumber;
#endif  // !_MSC_VER

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InitAsDefaultInstance() {
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  item_def_ = 0u;
  item_quality_ = 0u;
  component_flags_ = 0u;
  item_flags_ = 0u;
  attributes_string_ = const_cast< ::std::string*>(&_default_attributes_string_);
  num_required_ = 0u;
  item_count_ = 0u;
  num_fulfilled_ = 0u;
  items_fulfilled_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() {
  SharedDtor();
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedDtor() {
  if (attributes_string_ != &_default_attributes_string_) {
    delete attributes_string_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_;
}

const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_ = NULL;

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::New() const {
  return new CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    item_def_ = 0u;
    item_quality_ = 0u;
    component_flags_ = 0u;
    item_flags_ = 0u;
    if (_has_bit(5)) {
      if (attributes_string_ != &_default_attributes_string_) {
        attributes_string_->clear();
      }
    }
    num_required_ = 0u;
    item_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    num_fulfilled_ = 0u;
    items_fulfilled_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_def;
        break;
      }
      
      // optional uint32 item_def = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_quality;
        break;
      }
      
      // optional uint32 item_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_component_flags;
        break;
      }
      
      // optional uint32 component_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_flags_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_flags;
        break;
      }
      
      // optional uint32 item_flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_flags_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attributes_string;
        break;
      }
      
      // optional string attributes_string = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributes_string().data(), this->attributes_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_required;
        break;
      }
      
      // optional uint32 num_required = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_required_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_fulfilled;
        break;
      }
      
      // optional uint32 num_fulfilled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_fulfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fulfilled_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_items_fulfilled;
        break;
      }
      
      // optional uint32 items_fulfilled = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_fulfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_fulfilled_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint32 item_def = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def(), output);
  }
  
  // optional uint32 item_quality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_quality(), output);
  }
  
  // optional uint32 component_flags = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->component_flags(), output);
  }
  
  // optional uint32 item_flags = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_flags(), output);
  }
  
  // optional string attributes_string = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attributes_string(), output);
  }
  
  // optional uint32 num_required = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_required(), output);
  }
  
  // optional uint32 item_count = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_count(), output);
  }
  
  // optional uint32 num_fulfilled = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_fulfilled(), output);
  }
  
  // optional uint32 items_fulfilled = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->items_fulfilled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint32 item_def = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def(), target);
  }
  
  // optional uint32 item_quality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_quality(), target);
  }
  
  // optional uint32 component_flags = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->component_flags(), target);
  }
  
  // optional uint32 item_flags = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_flags(), target);
  }
  
  // optional string attributes_string = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->attributes_string(), target);
  }
  
  // optional uint32 num_required = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_required(), target);
  }
  
  // optional uint32 item_count = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_count(), target);
  }
  
  // optional uint32 num_fulfilled = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_fulfilled(), target);
  }
  
  // optional uint32 items_fulfilled = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->items_fulfilled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 item_def = 2;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 item_quality = 3;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }
    
    // optional uint32 component_flags = 4;
    if (has_component_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_flags());
    }
    
    // optional uint32 item_flags = 5;
    if (has_item_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_flags());
    }
    
    // optional string attributes_string = 6;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }
    
    // optional uint32 num_required = 7;
    if (has_num_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_required());
    }
    
    // optional uint32 item_count = 8;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 num_fulfilled = 9;
    if (has_num_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fulfilled());
    }
    
    // optional uint32 items_fulfilled = 10;
    if (has_items_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_fulfilled());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(1)) {
      set_item_def(from.item_def());
    }
    if (from._has_bit(2)) {
      set_item_quality(from.item_quality());
    }
    if (from._has_bit(3)) {
      set_component_flags(from.component_flags());
    }
    if (from._has_bit(4)) {
      set_item_flags(from.item_flags());
    }
    if (from._has_bit(5)) {
      set_attributes_string(from.attributes_string());
    }
    if (from._has_bit(6)) {
      set_num_required(from.num_required());
    }
    if (from._has_bit(7)) {
      set_item_count(from.item_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_num_fulfilled(from.num_fulfilled());
    }
    if (from._has_bit(9)) {
      set_items_fulfilled(from.items_fulfilled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::IsInitialized() const {
  
  return true;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Swap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(item_def_, other->item_def_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(component_flags_, other->component_flags_);
    std::swap(item_flags_, other->item_flags_);
    std::swap(attributes_string_, other->attributes_string_);
    std::swap(num_required_, other->num_required_);
    std::swap(item_count_, other->item_count_);
    std::swap(num_fulfilled_, other->num_fulfilled_);
    std::swap(items_fulfilled_, other->items_fulfilled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_;
  metadata.reflection = CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CAttribute_ItemSlotCriteria::_default_tags_;
#ifndef _MSC_VER
const int CAttribute_ItemSlotCriteria::kTagsFieldNumber;
#endif  // !_MSC_VER

CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_ItemSlotCriteria::InitAsDefaultInstance() {
}

CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria(const CAttribute_ItemSlotCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_ItemSlotCriteria::SharedCtor() {
  _cached_size_ = 0;
  tags_ = const_cast< ::std::string*>(&_default_tags_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_ItemSlotCriteria::~CAttribute_ItemSlotCriteria() {
  SharedDtor();
}

void CAttribute_ItemSlotCriteria::SharedDtor() {
  if (tags_ != &_default_tags_) {
    delete tags_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_ItemSlotCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_ItemSlotCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_ItemSlotCriteria_descriptor_;
}

const CAttribute_ItemSlotCriteria& CAttribute_ItemSlotCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CAttribute_ItemSlotCriteria* CAttribute_ItemSlotCriteria::default_instance_ = NULL;

CAttribute_ItemSlotCriteria* CAttribute_ItemSlotCriteria::New() const {
  return new CAttribute_ItemSlotCriteria;
}

void CAttribute_ItemSlotCriteria::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tags_ != &_default_tags_) {
        tags_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_ItemSlotCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_ItemSlotCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tags = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_ItemSlotCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tags = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_ItemSlotCriteria::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tags = 1;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_ItemSlotCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_ItemSlotCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_ItemSlotCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_ItemSlotCriteria::MergeFrom(const CAttribute_ItemSlotCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tags(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_ItemSlotCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemSlotCriteria::CopyFrom(const CAttribute_ItemSlotCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemSlotCriteria::IsInitialized() const {
  
  return true;
}

void CAttribute_ItemSlotCriteria::Swap(CAttribute_ItemSlotCriteria* other) {
  if (other != this) {
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_ItemSlotCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_ItemSlotCriteria_descriptor_;
  metadata.reflection = CAttribute_ItemSlotCriteria_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetItemSlotAttribute::kItemIdFieldNumber;
const int CMsgSetItemSlotAttribute::kSlotItemOriginalIdFieldNumber;
const int CMsgSetItemSlotAttribute::kSlotIndexFieldNumber;
#endif  // !_MSC_VER

CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetItemSlotAttribute::InitAsDefaultInstance() {
}

CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute(const CMsgSetItemSlotAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetItemSlotAttribute::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  slot_item_original_id_ = GOOGLE_ULONGLONG(0);
  slot_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetItemSlotAttribute::~CMsgSetItemSlotAttribute() {
  SharedDtor();
}

void CMsgSetItemSlotAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetItemSlotAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemSlotAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetItemSlotAttribute_descriptor_;
}

const CMsgSetItemSlotAttribute& CMsgSetItemSlotAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetItemSlotAttribute* CMsgSetItemSlotAttribute::default_instance_ = NULL;

CMsgSetItemSlotAttribute* CMsgSetItemSlotAttribute::New() const {
  return new CMsgSetItemSlotAttribute;
}

void CMsgSetItemSlotAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    slot_item_original_id_ = GOOGLE_ULONGLONG(0);
    slot_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetItemSlotAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_item_original_id;
        break;
      }
      
      // optional uint64 slot_item_original_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_item_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slot_item_original_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_index;
        break;
      }
      
      // optional uint32 slot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetItemSlotAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint64 slot_item_original_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->slot_item_original_id(), output);
  }
  
  // optional uint32 slot_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetItemSlotAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint64 slot_item_original_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->slot_item_original_id(), target);
  }
  
  // optional uint32 slot_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetItemSlotAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint64 slot_item_original_id = 2;
    if (has_slot_item_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->slot_item_original_id());
    }
    
    // optional uint32 slot_index = 3;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemSlotAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetItemSlotAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetItemSlotAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetItemSlotAttribute::MergeFrom(const CMsgSetItemSlotAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_slot_item_original_id(from.slot_item_original_id());
    }
    if (from._has_bit(2)) {
      set_slot_index(from.slot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetItemSlotAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemSlotAttribute::CopyFrom(const CMsgSetItemSlotAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemSlotAttribute::IsInitialized() const {
  
  return true;
}

void CMsgSetItemSlotAttribute::Swap(CMsgSetItemSlotAttribute* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(slot_item_original_id_, other->slot_item_original_id_);
    std::swap(slot_index_, other->slot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetItemSlotAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetItemSlotAttribute_descriptor_;
  metadata.reflection = CMsgSetItemSlotAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOWarData::kAccountIdFieldNumber;
const int CSOWarData::kWarIdFieldNumber;
const int CSOWarData::kAffiliationFieldNumber;
const int CSOWarData::kPointsScoredFieldNumber;
#endif  // !_MSC_VER

CSOWarData::CSOWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOWarData::InitAsDefaultInstance() {
}

CSOWarData::CSOWarData(const CSOWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOWarData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  war_id_ = 0u;
  affiliation_ = 0u;
  points_scored_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOWarData::~CSOWarData() {
  SharedDtor();
}

void CSOWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOWarData_descriptor_;
}

const CSOWarData& CSOWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOWarData* CSOWarData::default_instance_ = NULL;

CSOWarData* CSOWarData::New() const {
  return new CSOWarData;
}

void CSOWarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    war_id_ = 0u;
    affiliation_ = 0u;
    points_scored_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_war_id;
        break;
      }
      
      // optional uint32 war_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_affiliation;
        break;
      }
      
      // optional uint32 affiliation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affiliation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &affiliation_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_points_scored;
        break;
      }
      
      // optional uint32 points_scored = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_scored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_scored_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }
  
  // optional uint32 affiliation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->affiliation(), output);
  }
  
  // optional uint32 points_scored = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->points_scored(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }
  
  // optional uint32 affiliation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->affiliation(), target);
  }
  
  // optional uint32 points_scored = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->points_scored(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOWarData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }
    
    // optional uint32 affiliation = 3;
    if (has_affiliation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->affiliation());
    }
    
    // optional uint32 points_scored = 4;
    if (has_points_scored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_scored());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOWarData::MergeFrom(const CSOWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_war_id(from.war_id());
    }
    if (from._has_bit(2)) {
      set_affiliation(from.affiliation());
    }
    if (from._has_bit(3)) {
      set_points_scored(from.points_scored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOWarData::CopyFrom(const CSOWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOWarData::IsInitialized() const {
  
  return true;
}

void CSOWarData::Swap(CSOWarData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(war_id_, other->war_id_);
    std::swap(affiliation_, other->affiliation_);
    std::swap(points_scored_, other->points_scored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOWarData_descriptor_;
  metadata.reflection = CSOWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGC_War_IndividualUpdate::kSteamIdFieldNumber;
const int CGCMsgGC_War_IndividualUpdate::kWarIdFieldNumber;
const int CGCMsgGC_War_IndividualUpdate::kScoreFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_War_IndividualUpdate::InitAsDefaultInstance() {
}

CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate(const CGCMsgGC_War_IndividualUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_War_IndividualUpdate::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  war_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_War_IndividualUpdate::~CGCMsgGC_War_IndividualUpdate() {
  SharedDtor();
}

void CGCMsgGC_War_IndividualUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGC_War_IndividualUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_IndividualUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_War_IndividualUpdate_descriptor_;
}

const CGCMsgGC_War_IndividualUpdate& CGCMsgGC_War_IndividualUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_War_IndividualUpdate* CGCMsgGC_War_IndividualUpdate::default_instance_ = NULL;

CGCMsgGC_War_IndividualUpdate* CGCMsgGC_War_IndividualUpdate::New() const {
  return new CGCMsgGC_War_IndividualUpdate;
}

void CGCMsgGC_War_IndividualUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    war_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_War_IndividualUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_war_id;
        break;
      }
      
      // optional uint32 war_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_War_IndividualUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }
  
  // optional uint32 score = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_War_IndividualUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }
  
  // optional uint32 score = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_War_IndividualUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }
    
    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_War_IndividualUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_War_IndividualUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const CGCMsgGC_War_IndividualUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_war_id(from.war_id());
    }
    if (from._has_bit(2)) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const CGCMsgGC_War_IndividualUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_IndividualUpdate::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_War_IndividualUpdate::Swap(CGCMsgGC_War_IndividualUpdate* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(war_id_, other->war_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_War_IndividualUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_War_IndividualUpdate_descriptor_;
  metadata.reflection = CGCMsgGC_War_IndividualUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGC_War_JoinWar::kAffiliationFieldNumber;
const int CGCMsgGC_War_JoinWar::kWarIdFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_War_JoinWar::InitAsDefaultInstance() {
}

CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar(const CGCMsgGC_War_JoinWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_War_JoinWar::SharedCtor() {
  _cached_size_ = 0;
  affiliation_ = 0u;
  war_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_War_JoinWar::~CGCMsgGC_War_JoinWar() {
  SharedDtor();
}

void CGCMsgGC_War_JoinWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGC_War_JoinWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_JoinWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_War_JoinWar_descriptor_;
}

const CGCMsgGC_War_JoinWar& CGCMsgGC_War_JoinWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_War_JoinWar* CGCMsgGC_War_JoinWar::default_instance_ = NULL;

CGCMsgGC_War_JoinWar* CGCMsgGC_War_JoinWar::New() const {
  return new CGCMsgGC_War_JoinWar;
}

void CGCMsgGC_War_JoinWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    affiliation_ = 0u;
    war_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_War_JoinWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 affiliation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &affiliation_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_war_id;
        break;
      }
      
      // optional uint32 war_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_War_JoinWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 affiliation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->affiliation(), output);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_War_JoinWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 affiliation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->affiliation(), target);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_War_JoinWar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 affiliation = 1;
    if (has_affiliation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->affiliation());
    }
    
    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_JoinWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_War_JoinWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_War_JoinWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_JoinWar::MergeFrom(const CGCMsgGC_War_JoinWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_affiliation(from.affiliation());
    }
    if (from._has_bit(1)) {
      set_war_id(from.war_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_War_JoinWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_JoinWar::CopyFrom(const CGCMsgGC_War_JoinWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_JoinWar::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_War_JoinWar::Swap(CGCMsgGC_War_JoinWar* other) {
  if (other != this) {
    std::swap(affiliation_, other->affiliation_);
    std::swap(war_id_, other->war_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_War_JoinWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_War_JoinWar_descriptor_;
  metadata.reflection = CGCMsgGC_War_JoinWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGC_War_RequestGlobalStats::kWarIdFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_War_RequestGlobalStats::InitAsDefaultInstance() {
}

CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats(const CGCMsgGC_War_RequestGlobalStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_War_RequestGlobalStats::SharedCtor() {
  _cached_size_ = 0;
  war_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_War_RequestGlobalStats::~CGCMsgGC_War_RequestGlobalStats() {
  SharedDtor();
}

void CGCMsgGC_War_RequestGlobalStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGC_War_RequestGlobalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_RequestGlobalStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_War_RequestGlobalStats_descriptor_;
}

const CGCMsgGC_War_RequestGlobalStats& CGCMsgGC_War_RequestGlobalStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_War_RequestGlobalStats* CGCMsgGC_War_RequestGlobalStats::default_instance_ = NULL;

CGCMsgGC_War_RequestGlobalStats* CGCMsgGC_War_RequestGlobalStats::New() const {
  return new CGCMsgGC_War_RequestGlobalStats;
}

void CGCMsgGC_War_RequestGlobalStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    war_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_War_RequestGlobalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 war_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_War_RequestGlobalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 war_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->war_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_War_RequestGlobalStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 war_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->war_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_War_RequestGlobalStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 war_id = 1;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_War_RequestGlobalStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_War_RequestGlobalStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_war_id(from.war_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_RequestGlobalStats::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_War_RequestGlobalStats::Swap(CGCMsgGC_War_RequestGlobalStats* other) {
  if (other != this) {
    std::swap(war_id_, other->war_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_War_RequestGlobalStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_War_RequestGlobalStats_descriptor_;
  metadata.reflection = CGCMsgGC_War_RequestGlobalStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGC_War_GlobalStatsResponse_SideScore::kSideFieldNumber;
const int CGCMsgGC_War_GlobalStatsResponse_SideScore::kScoreFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::InitAsDefaultInstance() {
}

CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedCtor() {
  _cached_size_ = 0;
  side_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_War_GlobalStatsResponse_SideScore::~CGCMsgGC_War_GlobalStatsResponse_SideScore() {
  SharedDtor();
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse_SideScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_;
}

const CGCMsgGC_War_GlobalStatsResponse_SideScore& CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_ = NULL;

CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse_SideScore::New() const {
  return new CGCMsgGC_War_GlobalStatsResponse_SideScore;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_War_GlobalStatsResponse_SideScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &side_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 side = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->side(), output);
  }
  
  // optional uint64 score = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_War_GlobalStatsResponse_SideScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 side = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->side(), target);
  }
  
  // optional uint64 score = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_War_GlobalStatsResponse_SideScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->side());
    }
    
    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse_SideScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_War_GlobalStatsResponse_SideScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_side(from.side());
    }
    if (from._has_bit(1)) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse_SideScore::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::Swap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_War_GlobalStatsResponse_SideScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_;
  metadata.reflection = CGCMsgGC_War_GlobalStatsResponse_SideScore_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGCMsgGC_War_GlobalStatsResponse::kSideScoresFieldNumber;
const int CGCMsgGC_War_GlobalStatsResponse::kWarIdFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_War_GlobalStatsResponse::InitAsDefaultInstance() {
}

CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse(const CGCMsgGC_War_GlobalStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  war_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_War_GlobalStatsResponse::~CGCMsgGC_War_GlobalStatsResponse() {
  SharedDtor();
}

void CGCMsgGC_War_GlobalStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGC_War_GlobalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_War_GlobalStatsResponse_descriptor_;
}

const CGCMsgGC_War_GlobalStatsResponse& CGCMsgGC_War_GlobalStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_War_GlobalStatsResponse* CGCMsgGC_War_GlobalStatsResponse::default_instance_ = NULL;

CGCMsgGC_War_GlobalStatsResponse* CGCMsgGC_War_GlobalStatsResponse::New() const {
  return new CGCMsgGC_War_GlobalStatsResponse;
}

void CGCMsgGC_War_GlobalStatsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    war_id_ = 0u;
  }
  side_scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_War_GlobalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_side_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_side_scores;
        if (input->ExpectTag(16)) goto parse_war_id;
        break;
      }
      
      // optional uint32 war_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_War_GlobalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  for (int i = 0; i < this->side_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->side_scores(i), output);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_War_GlobalStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  for (int i = 0; i < this->side_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->side_scores(i), target);
  }
  
  // optional uint32 war_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_War_GlobalStatsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }
    
  }
  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  total_size += 1 * this->side_scores_size();
  for (int i = 0; i < this->side_scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->side_scores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_War_GlobalStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  side_scores_.MergeFrom(from.side_scores_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_war_id(from.war_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse::Swap(CGCMsgGC_War_GlobalStatsResponse* other) {
  if (other != this) {
    side_scores_.Swap(&other->side_scores_);
    std::swap(war_id_, other->war_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_War_GlobalStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_War_GlobalStatsResponse_descriptor_;
  metadata.reflection = CGCMsgGC_War_GlobalStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_default_score_id_;
#ifndef _MSC_VER
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kTypeFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreIdFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreCheckFieldNumber;
#endif  // !_MSC_VER

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InitAsDefaultInstance() {
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  type_ = 0u;
  score_id_ = const_cast< ::std::string*>(&_default_score_id_);
  score_check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() {
  SharedDtor();
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedDtor() {
  if (score_id_ != &_default_score_id_) {
    delete score_id_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_;
}

const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_ = NULL;

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::New() const {
  return new CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    type_ = 0u;
    if (_has_bit(2)) {
      if (score_id_ != &_default_score_id_) {
        score_id_->clear();
      }
    }
    score_check_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_score_id;
        break;
      }
      
      // optional bytes score_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score_check;
        break;
      }
      
      // optional uint32 score_check = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_check_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional bytes score_id = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->score_id(), output);
  }
  
  // optional uint32 score_check = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score_check(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional bytes score_id = 4;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->score_id(), target);
  }
  
  // optional uint32 score_check = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score_check(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bytes score_id = 4;
    if (has_score_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->score_id());
    }
    
    // optional uint32 score_check = 5;
    if (has_score_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_check());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_score(from.score());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_score_id(from.score_id());
    }
    if (from._has_bit(3)) {
      set_score_check(from.score_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::IsInitialized() const {
  
  return true;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Swap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(type_, other->type_);
    std::swap(score_id_, other->score_id_);
    std::swap(score_check_, other->score_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_;
  metadata.reflection = CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAttribute_WorldItemPlacement::kOriginalItemIdFieldNumber;
const int CAttribute_WorldItemPlacement::kPosXFieldNumber;
const int CAttribute_WorldItemPlacement::kPosYFieldNumber;
const int CAttribute_WorldItemPlacement::kPosZFieldNumber;
const int CAttribute_WorldItemPlacement::kAngXFieldNumber;
const int CAttribute_WorldItemPlacement::kAngYFieldNumber;
const int CAttribute_WorldItemPlacement::kAngZFieldNumber;
#endif  // !_MSC_VER

CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_WorldItemPlacement::InitAsDefaultInstance() {
}

CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement(const CAttribute_WorldItemPlacement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_WorldItemPlacement::SharedCtor() {
  _cached_size_ = 0;
  original_item_id_ = GOOGLE_ULONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  ang_x_ = 0;
  ang_y_ = 0;
  ang_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_WorldItemPlacement::~CAttribute_WorldItemPlacement() {
  SharedDtor();
}

void CAttribute_WorldItemPlacement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAttribute_WorldItemPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_WorldItemPlacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_WorldItemPlacement_descriptor_;
}

const CAttribute_WorldItemPlacement& CAttribute_WorldItemPlacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CAttribute_WorldItemPlacement* CAttribute_WorldItemPlacement::default_instance_ = NULL;

CAttribute_WorldItemPlacement* CAttribute_WorldItemPlacement::New() const {
  return new CAttribute_WorldItemPlacement;
}

void CAttribute_WorldItemPlacement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    original_item_id_ = GOOGLE_ULONGLONG(0);
    pos_x_ = 0;
    pos_y_ = 0;
    pos_z_ = 0;
    ang_x_ = 0;
    ang_y_ = 0;
    ang_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_WorldItemPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 original_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pos_x;
        break;
      }
      
      // optional float pos_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pos_y;
        break;
      }
      
      // optional float pos_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pos_z;
        break;
      }
      
      // optional float pos_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ang_x;
        break;
      }
      
      // optional float ang_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_x_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_ang_y;
        break;
      }
      
      // optional float ang_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ang_z;
        break;
      }
      
      // optional float ang_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_z_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_WorldItemPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 original_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->original_item_id(), output);
  }
  
  // optional float pos_x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }
  
  // optional float pos_y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }
  
  // optional float pos_z = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }
  
  // optional float ang_x = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ang_x(), output);
  }
  
  // optional float ang_y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ang_y(), output);
  }
  
  // optional float ang_z = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ang_z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_WorldItemPlacement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 original_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->original_item_id(), target);
  }
  
  // optional float pos_x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }
  
  // optional float pos_y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }
  
  // optional float pos_z = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }
  
  // optional float ang_x = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ang_x(), target);
  }
  
  // optional float ang_y = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ang_y(), target);
  }
  
  // optional float ang_z = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ang_z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_WorldItemPlacement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 original_item_id = 1;
    if (has_original_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_item_id());
    }
    
    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_x = 5;
    if (has_ang_x()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_y = 6;
    if (has_ang_y()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_z = 7;
    if (has_ang_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_WorldItemPlacement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_WorldItemPlacement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_WorldItemPlacement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_WorldItemPlacement::MergeFrom(const CAttribute_WorldItemPlacement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_original_item_id(from.original_item_id());
    }
    if (from._has_bit(1)) {
      set_pos_x(from.pos_x());
    }
    if (from._has_bit(2)) {
      set_pos_y(from.pos_y());
    }
    if (from._has_bit(3)) {
      set_pos_z(from.pos_z());
    }
    if (from._has_bit(4)) {
      set_ang_x(from.ang_x());
    }
    if (from._has_bit(5)) {
      set_ang_y(from.ang_y());
    }
    if (from._has_bit(6)) {
      set_ang_z(from.ang_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_WorldItemPlacement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_WorldItemPlacement::CopyFrom(const CAttribute_WorldItemPlacement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_WorldItemPlacement::IsInitialized() const {
  
  return true;
}

void CAttribute_WorldItemPlacement::Swap(CAttribute_WorldItemPlacement* other) {
  if (other != this) {
    std::swap(original_item_id_, other->original_item_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(ang_x_, other->ang_x_);
    std::swap(ang_y_, other->ang_y_);
    std::swap(ang_z_, other->ang_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_WorldItemPlacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_WorldItemPlacement_descriptor_;
  metadata.reflection = CAttribute_WorldItemPlacement_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CGCMsg_WorldItemPlacement_Update::_default_attrib_name_;
#ifndef _MSC_VER
const int CGCMsg_WorldItemPlacement_Update::kOriginalItemIdFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosXFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosYFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosZFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngXFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngYFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngZFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kForceRemoveAllFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAttribNameFieldNumber;
#endif  // !_MSC_VER

CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsg_WorldItemPlacement_Update::InitAsDefaultInstance() {
}

CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update(const CGCMsg_WorldItemPlacement_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsg_WorldItemPlacement_Update::SharedCtor() {
  _cached_size_ = 0;
  original_item_id_ = GOOGLE_ULONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  ang_x_ = 0;
  ang_y_ = 0;
  ang_z_ = 0;
  force_remove_all_ = false;
  attrib_name_ = const_cast< ::std::string*>(&_default_attrib_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsg_WorldItemPlacement_Update::~CGCMsg_WorldItemPlacement_Update() {
  SharedDtor();
}

void CGCMsg_WorldItemPlacement_Update::SharedDtor() {
  if (attrib_name_ != &_default_attrib_name_) {
    delete attrib_name_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsg_WorldItemPlacement_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsg_WorldItemPlacement_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsg_WorldItemPlacement_Update_descriptor_;
}

const CGCMsg_WorldItemPlacement_Update& CGCMsg_WorldItemPlacement_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CGCMsg_WorldItemPlacement_Update* CGCMsg_WorldItemPlacement_Update::default_instance_ = NULL;

CGCMsg_WorldItemPlacement_Update* CGCMsg_WorldItemPlacement_Update::New() const {
  return new CGCMsg_WorldItemPlacement_Update;
}

void CGCMsg_WorldItemPlacement_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    original_item_id_ = GOOGLE_ULONGLONG(0);
    pos_x_ = 0;
    pos_y_ = 0;
    pos_z_ = 0;
    ang_x_ = 0;
    ang_y_ = 0;
    ang_z_ = 0;
    force_remove_all_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (attrib_name_ != &_default_attrib_name_) {
        attrib_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsg_WorldItemPlacement_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 original_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pos_x;
        break;
      }
      
      // optional float pos_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pos_y;
        break;
      }
      
      // optional float pos_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pos_z;
        break;
      }
      
      // optional float pos_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ang_x;
        break;
      }
      
      // optional float ang_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_x_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_ang_y;
        break;
      }
      
      // optional float ang_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ang_z;
        break;
      }
      
      // optional float ang_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_z_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_force_remove_all;
        break;
      }
      
      // optional bool force_remove_all = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_remove_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_remove_all_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attrib_name;
        break;
      }
      
      // optional string attrib_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrib_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attrib_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attrib_name().data(), this->attrib_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsg_WorldItemPlacement_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 original_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->original_item_id(), output);
  }
  
  // optional float pos_x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }
  
  // optional float pos_y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }
  
  // optional float pos_z = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }
  
  // optional float ang_x = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ang_x(), output);
  }
  
  // optional float ang_y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ang_y(), output);
  }
  
  // optional float ang_z = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ang_z(), output);
  }
  
  // optional bool force_remove_all = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->force_remove_all(), output);
  }
  
  // optional string attrib_name = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attrib_name().data(), this->attrib_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->attrib_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsg_WorldItemPlacement_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 original_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->original_item_id(), target);
  }
  
  // optional float pos_x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }
  
  // optional float pos_y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }
  
  // optional float pos_z = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }
  
  // optional float ang_x = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ang_x(), target);
  }
  
  // optional float ang_y = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ang_y(), target);
  }
  
  // optional float ang_z = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ang_z(), target);
  }
  
  // optional bool force_remove_all = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->force_remove_all(), target);
  }
  
  // optional string attrib_name = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attrib_name().data(), this->attrib_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->attrib_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsg_WorldItemPlacement_Update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 original_item_id = 1;
    if (has_original_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_item_id());
    }
    
    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_x = 5;
    if (has_ang_x()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_y = 6;
    if (has_ang_y()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_z = 7;
    if (has_ang_z()) {
      total_size += 1 + 4;
    }
    
    // optional bool force_remove_all = 8;
    if (has_force_remove_all()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string attrib_name = 9;
    if (has_attrib_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attrib_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsg_WorldItemPlacement_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsg_WorldItemPlacement_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const CGCMsg_WorldItemPlacement_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_original_item_id(from.original_item_id());
    }
    if (from._has_bit(1)) {
      set_pos_x(from.pos_x());
    }
    if (from._has_bit(2)) {
      set_pos_y(from.pos_y());
    }
    if (from._has_bit(3)) {
      set_pos_z(from.pos_z());
    }
    if (from._has_bit(4)) {
      set_ang_x(from.ang_x());
    }
    if (from._has_bit(5)) {
      set_ang_y(from.ang_y());
    }
    if (from._has_bit(6)) {
      set_ang_z(from.ang_z());
    }
    if (from._has_bit(7)) {
      set_force_remove_all(from.force_remove_all());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_attrib_name(from.attrib_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const CGCMsg_WorldItemPlacement_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsg_WorldItemPlacement_Update::IsInitialized() const {
  
  return true;
}

void CGCMsg_WorldItemPlacement_Update::Swap(CGCMsg_WorldItemPlacement_Update* other) {
  if (other != this) {
    std::swap(original_item_id_, other->original_item_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(ang_x_, other->ang_x_);
    std::swap(ang_y_, other->ang_y_);
    std::swap(ang_z_, other->ang_z_);
    std::swap(force_remove_all_, other->force_remove_all_);
    std::swap(attrib_name_, other->attrib_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsg_WorldItemPlacement_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsg_WorldItemPlacement_Update_descriptor_;
  metadata.reflection = CGCMsg_WorldItemPlacement_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAcknowledgeXP::kMatchGroupFieldNumber;
const int CMsgAcknowledgeXP::kPredictedExperienceFieldNumber;
#endif  // !_MSC_VER

CMsgAcknowledgeXP::CMsgAcknowledgeXP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAcknowledgeXP::InitAsDefaultInstance() {
}

CMsgAcknowledgeXP::CMsgAcknowledgeXP(const CMsgAcknowledgeXP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAcknowledgeXP::SharedCtor() {
  _cached_size_ = 0;
  match_group_ = 0;
  predicted_experience_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAcknowledgeXP::~CMsgAcknowledgeXP() {
  SharedDtor();
}

void CMsgAcknowledgeXP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAcknowledgeXP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcknowledgeXP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAcknowledgeXP_descriptor_;
}

const CMsgAcknowledgeXP& CMsgAcknowledgeXP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgAcknowledgeXP* CMsgAcknowledgeXP::default_instance_ = NULL;

CMsgAcknowledgeXP* CMsgAcknowledgeXP::New() const {
  return new CMsgAcknowledgeXP;
}

void CMsgAcknowledgeXP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_group_ = 0;
    predicted_experience_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAcknowledgeXP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 match_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_predicted_experience;
        break;
      }
      
      // optional uint32 predicted_experience = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_predicted_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &predicted_experience_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAcknowledgeXP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 match_group = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_group(), output);
  }
  
  // optional uint32 predicted_experience = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->predicted_experience(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAcknowledgeXP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 match_group = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_group(), target);
  }
  
  // optional uint32 predicted_experience = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->predicted_experience(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAcknowledgeXP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 match_group = 1;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }
    
    // optional uint32 predicted_experience = 2;
    if (has_predicted_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->predicted_experience());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcknowledgeXP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAcknowledgeXP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAcknowledgeXP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAcknowledgeXP::MergeFrom(const CMsgAcknowledgeXP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(1)) {
      set_predicted_experience(from.predicted_experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAcknowledgeXP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcknowledgeXP::CopyFrom(const CMsgAcknowledgeXP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcknowledgeXP::IsInitialized() const {
  
  return true;
}

void CMsgAcknowledgeXP::Swap(CMsgAcknowledgeXP* other) {
  if (other != this) {
    std::swap(match_group_, other->match_group_);
    std::swap(predicted_experience_, other->predicted_experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAcknowledgeXP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAcknowledgeXP_descriptor_;
  metadata.reflection = CMsgAcknowledgeXP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgTFXPSource_XPSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFXPSource_XPSourceType_descriptor_;
}
bool CMsgTFXPSource_XPSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_SCORE;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_OBJECTIVE_BONUS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPLETED_MATCH;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_ABANDON;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_WIN;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_LOSS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_AUTOBALANCE_BONUS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_PRESTIGE_BONUS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MIN;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MAX;
const int CMsgTFXPSource::XPSourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgTFXPSource::kTypeFieldNumber;
const int CMsgTFXPSource::kAmountFieldNumber;
const int CMsgTFXPSource::kMatchGroupFieldNumber;
const int CMsgTFXPSource::kAccountIdFieldNumber;
const int CMsgTFXPSource::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFXPSource::CMsgTFXPSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFXPSource::InitAsDefaultInstance() {
}

CMsgTFXPSource::CMsgTFXPSource(const CMsgTFXPSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFXPSource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  amount_ = 0;
  match_group_ = 0;
  account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFXPSource::~CMsgTFXPSource() {
  SharedDtor();
}

void CMsgTFXPSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFXPSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFXPSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFXPSource_descriptor_;
}

const CMsgTFXPSource& CMsgTFXPSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFXPSource* CMsgTFXPSource::default_instance_ = NULL;

CMsgTFXPSource* CMsgTFXPSource::New() const {
  return new CMsgTFXPSource;
}

void CMsgTFXPSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    amount_ = 0;
    match_group_ = 0;
    account_id_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFXPSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgTFXPSource_XPSourceType_IsValid(value)) {
            set_type(static_cast< ::CMsgTFXPSource_XPSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_group;
        break;
      }
      
      // optional int32 match_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFXPSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // optional int32 match_group = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->match_group(), output);
  }
  
  // optional uint32 account_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }
  
  // optional uint64 match_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFXPSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 amount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // optional int32 match_group = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->match_group(), target);
  }
  
  // optional uint32 account_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }
  
  // optional uint64 match_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFXPSource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 match_group = 3;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }
    
    // optional uint32 account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFXPSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFXPSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFXPSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFXPSource::MergeFrom(const CMsgTFXPSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_amount(from.amount());
    }
    if (from._has_bit(2)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(3)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(4)) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFXPSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSource::CopyFrom(const CMsgTFXPSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSource::IsInitialized() const {
  
  return true;
}

void CMsgTFXPSource::Swap(CMsgTFXPSource* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(amount_, other->amount_);
    std::swap(match_group_, other->match_group_);
    std::swap(account_id_, other->account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFXPSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFXPSource_descriptor_;
  metadata.reflection = CMsgTFXPSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFXPSourceBreakdown::kSourcesFieldNumber;
#endif  // !_MSC_VER

CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFXPSourceBreakdown::InitAsDefaultInstance() {
}

CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown(const CMsgTFXPSourceBreakdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFXPSourceBreakdown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFXPSourceBreakdown::~CMsgTFXPSourceBreakdown() {
  SharedDtor();
}

void CMsgTFXPSourceBreakdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFXPSourceBreakdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFXPSourceBreakdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFXPSourceBreakdown_descriptor_;
}

const CMsgTFXPSourceBreakdown& CMsgTFXPSourceBreakdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFXPSourceBreakdown* CMsgTFXPSourceBreakdown::default_instance_ = NULL;

CMsgTFXPSourceBreakdown* CMsgTFXPSourceBreakdown::New() const {
  return new CMsgTFXPSourceBreakdown;
}

void CMsgTFXPSourceBreakdown::Clear() {
  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFXPSourceBreakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFXPSource sources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFXPSourceBreakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgTFXPSource sources = 1;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFXPSourceBreakdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgTFXPSource sources = 1;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFXPSourceBreakdown::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgTFXPSource sources = 1;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFXPSourceBreakdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFXPSourceBreakdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFXPSourceBreakdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFXPSourceBreakdown::MergeFrom(const CMsgTFXPSourceBreakdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFXPSourceBreakdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSourceBreakdown::CopyFrom(const CMsgTFXPSourceBreakdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSourceBreakdown::IsInitialized() const {
  
  return true;
}

void CMsgTFXPSourceBreakdown::Swap(CMsgTFXPSourceBreakdown* other) {
  if (other != this) {
    sources_.Swap(&other->sources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFXPSourceBreakdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFXPSourceBreakdown_descriptor_;
  metadata.reflection = CMsgTFXPSourceBreakdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFClientInit::kClientVersionFieldNumber;
const int CMsgTFClientInit::kLanguageFieldNumber;
#endif  // !_MSC_VER

CMsgTFClientInit::CMsgTFClientInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFClientInit::InitAsDefaultInstance() {
}

CMsgTFClientInit::CMsgTFClientInit(const CMsgTFClientInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFClientInit::SharedCtor() {
  _cached_size_ = 0;
  client_version_ = 0u;
  language_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFClientInit::~CMsgTFClientInit() {
  SharedDtor();
}

void CMsgTFClientInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFClientInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFClientInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFClientInit_descriptor_;
}

const CMsgTFClientInit& CMsgTFClientInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFClientInit* CMsgTFClientInit::default_instance_ = NULL;

CMsgTFClientInit* CMsgTFClientInit::New() const {
  return new CMsgTFClientInit;
}

void CMsgTFClientInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_version_ = 0u;
    language_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFClientInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_language;
        break;
      }
      
      // optional int32 language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFClientInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }
  
  // optional int32 language = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFClientInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }
  
  // optional int32 language = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFClientInit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_version = 1;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }
    
    // optional int32 language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFClientInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFClientInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFClientInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFClientInit::MergeFrom(const CMsgTFClientInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_client_version(from.client_version());
    }
    if (from._has_bit(1)) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFClientInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFClientInit::CopyFrom(const CMsgTFClientInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFClientInit::IsInitialized() const {
  
  return true;
}

void CMsgTFClientInit::Swap(CMsgTFClientInit* other) {
  if (other != this) {
    std::swap(client_version_, other->client_version_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFClientInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFClientInit_descriptor_;
  metadata.reflection = CMsgTFClientInit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCNotification_NotificationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNotification_NotificationType_descriptor_;
}
bool CMsgGCNotification_NotificationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_BANNED;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_CUSTOM_STRING;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_WAS_BANNED;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_SUPPORT_MESSAGE;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_NUM_TYPES;
const CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MIN;
const CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MAX;
const int CMsgGCNotification::NotificationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CMsgGCNotification::_default_notification_string_;
#ifndef _MSC_VER
const int CMsgGCNotification::kNotificationIdFieldNumber;
const int CMsgGCNotification::kAccountIdFieldNumber;
const int CMsgGCNotification::kExpirationTimeFieldNumber;
const int CMsgGCNotification::kTypeFieldNumber;
const int CMsgGCNotification::kNotificationStringFieldNumber;
#endif  // !_MSC_VER

CMsgGCNotification::CMsgGCNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCNotification::InitAsDefaultInstance() {
}

CMsgGCNotification::CMsgGCNotification(const CMsgGCNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCNotification::SharedCtor() {
  _cached_size_ = 0;
  notification_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  expiration_time_ = 0u;
  type_ = 1;
  notification_string_ = const_cast< ::std::string*>(&_default_notification_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCNotification::~CMsgGCNotification() {
  SharedDtor();
}

void CMsgGCNotification::SharedDtor() {
  if (notification_string_ != &_default_notification_string_) {
    delete notification_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNotification_descriptor_;
}

const CMsgGCNotification& CMsgGCNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCNotification* CMsgGCNotification::default_instance_ = NULL;

CMsgGCNotification* CMsgGCNotification::New() const {
  return new CMsgGCNotification;
}

void CMsgGCNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notification_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    expiration_time_ = 0u;
    type_ = 1;
    if (_has_bit(4)) {
      if (notification_string_ != &_default_notification_string_) {
        notification_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 notification_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_expiration_time;
        break;
      }
      
      // optional fixed32 expiration_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCNotification_NotificationType_IsValid(value)) {
            set_type(static_cast< ::CMsgGCNotification_NotificationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notification_string;
        break;
      }
      
      // optional string notification_string = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notification_string().data(), this->notification_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 notification_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->notification_id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional fixed32 expiration_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->expiration_time(), output);
  }
  
  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string notification_string = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_string().data(), this->notification_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->notification_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 notification_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->notification_id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional fixed32 expiration_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->expiration_time(), target);
  }
  
  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string notification_string = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_string().data(), this->notification_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notification_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 notification_id = 1;
    if (has_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notification_id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional fixed32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 + 4;
    }
    
    // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string notification_string = 5;
    if (has_notification_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCNotification::MergeFrom(const CMsgGCNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_notification_id(from.notification_id());
    }
    if (from._has_bit(1)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(2)) {
      set_expiration_time(from.expiration_time());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_notification_string(from.notification_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotification::CopyFrom(const CMsgGCNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotification::IsInitialized() const {
  
  return true;
}

void CMsgGCNotification::Swap(CMsgGCNotification* other) {
  if (other != this) {
    std::swap(notification_id_, other->notification_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(type_, other->type_);
    std::swap(notification_string_, other->notification_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCNotification_descriptor_;
  metadata.reflection = CMsgGCNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCNotificationQueue::kNotificationsFieldNumber;
#endif  // !_MSC_VER

CMsgGCNotificationQueue::CMsgGCNotificationQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCNotificationQueue::InitAsDefaultInstance() {
}

CMsgGCNotificationQueue::CMsgGCNotificationQueue(const CMsgGCNotificationQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCNotificationQueue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCNotificationQueue::~CMsgGCNotificationQueue() {
  SharedDtor();
}

void CMsgGCNotificationQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCNotificationQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNotificationQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNotificationQueue_descriptor_;
}

const CMsgGCNotificationQueue& CMsgGCNotificationQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCNotificationQueue* CMsgGCNotificationQueue::default_instance_ = NULL;

CMsgGCNotificationQueue* CMsgGCNotificationQueue::New() const {
  return new CMsgGCNotificationQueue;
}

void CMsgGCNotificationQueue::Clear() {
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCNotificationQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCNotification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCNotificationQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCNotificationQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notifications(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCNotificationQueue::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGCNotification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNotificationQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCNotificationQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCNotificationQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCNotificationQueue::MergeFrom(const CMsgGCNotificationQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCNotificationQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotificationQueue::CopyFrom(const CMsgGCNotificationQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotificationQueue::IsInitialized() const {
  
  return true;
}

void CMsgGCNotificationQueue::Swap(CMsgGCNotificationQueue* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCNotificationQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCNotificationQueue_descriptor_;
  metadata.reflection = CMsgGCNotificationQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgNotificationAcknowledge::kAccountIdFieldNumber;
const int CMsgNotificationAcknowledge::kNotificationIdFieldNumber;
#endif  // !_MSC_VER

CMsgNotificationAcknowledge::CMsgNotificationAcknowledge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNotificationAcknowledge::InitAsDefaultInstance() {
}

CMsgNotificationAcknowledge::CMsgNotificationAcknowledge(const CMsgNotificationAcknowledge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNotificationAcknowledge::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  notification_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNotificationAcknowledge::~CMsgNotificationAcknowledge() {
  SharedDtor();
}

void CMsgNotificationAcknowledge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNotificationAcknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNotificationAcknowledge_descriptor_;
}

const CMsgNotificationAcknowledge& CMsgNotificationAcknowledge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgNotificationAcknowledge* CMsgNotificationAcknowledge::default_instance_ = NULL;

CMsgNotificationAcknowledge* CMsgNotificationAcknowledge::New() const {
  return new CMsgNotificationAcknowledge;
}

void CMsgNotificationAcknowledge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    notification_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNotificationAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notification_id;
        break;
      }
      
      // optional uint64 notification_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notification_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNotificationAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint64 notification_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->notification_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNotificationAcknowledge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint64 notification_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->notification_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNotificationAcknowledge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint64 notification_id = 2;
    if (has_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notification_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNotificationAcknowledge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNotificationAcknowledge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledge::MergeFrom(const CMsgNotificationAcknowledge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_notification_id(from.notification_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNotificationAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledge::CopyFrom(const CMsgNotificationAcknowledge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledge::IsInitialized() const {
  
  return true;
}

void CMsgNotificationAcknowledge::Swap(CMsgNotificationAcknowledge* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(notification_id_, other->notification_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNotificationAcknowledge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNotificationAcknowledge_descriptor_;
  metadata.reflection = CMsgNotificationAcknowledge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNotificationAcknowledgeReply::InitAsDefaultInstance() {
}

CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply(const CMsgNotificationAcknowledgeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNotificationAcknowledgeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNotificationAcknowledgeReply::~CMsgNotificationAcknowledgeReply() {
  SharedDtor();
}

void CMsgNotificationAcknowledgeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNotificationAcknowledgeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledgeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNotificationAcknowledgeReply_descriptor_;
}

const CMsgNotificationAcknowledgeReply& CMsgNotificationAcknowledgeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgNotificationAcknowledgeReply* CMsgNotificationAcknowledgeReply::default_instance_ = NULL;

CMsgNotificationAcknowledgeReply* CMsgNotificationAcknowledgeReply::New() const {
  return new CMsgNotificationAcknowledgeReply;
}

void CMsgNotificationAcknowledgeReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNotificationAcknowledgeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgNotificationAcknowledgeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNotificationAcknowledgeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNotificationAcknowledgeReply::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNotificationAcknowledgeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNotificationAcknowledgeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const CMsgNotificationAcknowledgeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNotificationAcknowledgeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledgeReply::CopyFrom(const CMsgNotificationAcknowledgeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledgeReply::IsInitialized() const {
  
  return true;
}

void CMsgNotificationAcknowledgeReply::Swap(CMsgNotificationAcknowledgeReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNotificationAcknowledgeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNotificationAcknowledgeReply_descriptor_;
  metadata.reflection = CMsgNotificationAcknowledgeReply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_Match_Result_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Match_Result_Status_descriptor_;
}
bool CMsgGC_Match_Result_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_SUCCEEDED;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_GC;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TRUSTED;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_ABANDON;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_UNKNOWN;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TIMEOUT;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FINISHED_ABANDON;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MIN;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MAX;
const int CMsgGC_Match_Result::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGC_Match_Result_Player::kSteamIdFieldNumber;
const int CMsgGC_Match_Result_Player::kOriginalPartyIdFieldNumber;
const int CMsgGC_Match_Result_Player::kTeamFieldNumber;
const int CMsgGC_Match_Result_Player::kScoreFieldNumber;
const int CMsgGC_Match_Result_Player::kPingFieldNumber;
const int CMsgGC_Match_Result_Player::kFlagsFieldNumber;
const int CMsgGC_Match_Result_Player::kRankFieldNumber;
const int CMsgGC_Match_Result_Player::kClassesPlayedFieldNumber;
const int CMsgGC_Match_Result_Player::kKillsFieldNumber;
const int CMsgGC_Match_Result_Player::kDeathsFieldNumber;
const int CMsgGC_Match_Result_Player::kDamageFieldNumber;
const int CMsgGC_Match_Result_Player::kHealingFieldNumber;
const int CMsgGC_Match_Result_Player::kSupportFieldNumber;
const int CMsgGC_Match_Result_Player::kScoreMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kKillsMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kDamageMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kHealingMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kSupportMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kXpBreakdownFieldNumber;
const int CMsgGC_Match_Result_Player::kLeaveTimeFieldNumber;
const int CMsgGC_Match_Result_Player::kLeaveReasonFieldNumber;
const int CMsgGC_Match_Result_Player::kConnectTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Match_Result_Player::InitAsDefaultInstance() {
}

CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player(const CMsgGC_Match_Result_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Match_Result_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  original_party_id_ = GOOGLE_ULONGLONG(0);
  team_ = 0u;
  score_ = 0u;
  ping_ = 0u;
  flags_ = 0u;
  rank_ = 0u;
  classes_played_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  damage_ = 0u;
  healing_ = 0u;
  support_ = 0u;
  score_medal_ = 0u;
  kills_medal_ = 0u;
  damage_medal_ = 0u;
  healing_medal_ = 0u;
  support_medal_ = 0u;
  leave_time_ = 0u;
  leave_reason_ = 0;
  connect_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Match_Result_Player::~CMsgGC_Match_Result_Player() {
  SharedDtor();
}

void CMsgGC_Match_Result_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Match_Result_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_Result_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Match_Result_Player_descriptor_;
}

const CMsgGC_Match_Result_Player& CMsgGC_Match_Result_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Match_Result_Player* CMsgGC_Match_Result_Player::default_instance_ = NULL;

CMsgGC_Match_Result_Player* CMsgGC_Match_Result_Player::New() const {
  return new CMsgGC_Match_Result_Player;
}

void CMsgGC_Match_Result_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    original_party_id_ = GOOGLE_ULONGLONG(0);
    team_ = 0u;
    score_ = 0u;
    ping_ = 0u;
    flags_ = 0u;
    rank_ = 0u;
    classes_played_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kills_ = 0u;
    deaths_ = 0u;
    damage_ = 0u;
    healing_ = 0u;
    support_ = 0u;
    score_medal_ = 0u;
    kills_medal_ = 0u;
    damage_medal_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    healing_medal_ = 0u;
    support_medal_ = 0u;
    leave_time_ = 0u;
    leave_reason_ = 0;
    connect_time_ = 0u;
  }
  xp_breakdown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Match_Result_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_original_party_id;
        break;
      }
      
      // optional uint64 original_party_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_party_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }
      
      // optional uint32 team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ping;
        break;
      }
      
      // optional uint32 ping = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_classes_played;
        break;
      }
      
      // optional uint32 classes_played = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classes_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classes_played_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_damage;
        break;
      }
      
      // optional uint32 damage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_healing;
        break;
      }
      
      // optional uint32 healing = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_support;
        break;
      }
      
      // optional uint32 support = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_score_medal;
        break;
      }
      
      // optional uint32 score_medal = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_medal_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_kills_medal;
        break;
      }
      
      // optional uint32 kills_medal = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_medal_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_damage_medal;
        break;
      }
      
      // optional uint32 damage_medal = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_medal_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_healing_medal;
        break;
      }
      
      // optional uint32 healing_medal = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_medal_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_support_medal;
        break;
      }
      
      // optional uint32 support_medal = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_medal_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_xp_breakdown;
        break;
      }
      
      // repeated .CMsgTFXPSource xp_breakdown = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_breakdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_breakdown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_xp_breakdown;
        if (input->ExpectTag(176)) goto parse_leave_time;
        break;
      }
      
      // optional uint32 leave_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_leave_reason;
        break;
      }
      
      // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TFMatchLeaveReason_IsValid(value)) {
            set_leave_reason(static_cast< TFMatchLeaveReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_connect_time;
        break;
      }
      
      // optional uint32 connect_time = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_time_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Match_Result_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint64 original_party_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->original_party_id(), output);
  }
  
  // optional uint32 team = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team(), output);
  }
  
  // optional uint32 score = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }
  
  // optional uint32 ping = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping(), output);
  }
  
  // optional uint32 flags = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }
  
  // optional uint32 rank = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rank(), output);
  }
  
  // optional uint32 classes_played = 10;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->classes_played(), output);
  }
  
  // optional uint32 kills = 11;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kills(), output);
  }
  
  // optional uint32 deaths = 12;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deaths(), output);
  }
  
  // optional uint32 damage = 13;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->damage(), output);
  }
  
  // optional uint32 healing = 14;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->healing(), output);
  }
  
  // optional uint32 support = 15;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->support(), output);
  }
  
  // optional uint32 score_medal = 16;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->score_medal(), output);
  }
  
  // optional uint32 kills_medal = 17;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kills_medal(), output);
  }
  
  // optional uint32 damage_medal = 18;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->damage_medal(), output);
  }
  
  // optional uint32 healing_medal = 19;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->healing_medal(), output);
  }
  
  // optional uint32 support_medal = 20;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_medal(), output);
  }
  
  // repeated .CMsgTFXPSource xp_breakdown = 21;
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->xp_breakdown(i), output);
  }
  
  // optional uint32 leave_time = 22;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->leave_time(), output);
  }
  
  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->leave_reason(), output);
  }
  
  // optional uint32 connect_time = 24;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->connect_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Match_Result_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint64 original_party_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->original_party_id(), target);
  }
  
  // optional uint32 team = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team(), target);
  }
  
  // optional uint32 score = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }
  
  // optional uint32 ping = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping(), target);
  }
  
  // optional uint32 flags = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }
  
  // optional uint32 rank = 9;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rank(), target);
  }
  
  // optional uint32 classes_played = 10;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->classes_played(), target);
  }
  
  // optional uint32 kills = 11;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kills(), target);
  }
  
  // optional uint32 deaths = 12;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deaths(), target);
  }
  
  // optional uint32 damage = 13;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->damage(), target);
  }
  
  // optional uint32 healing = 14;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->healing(), target);
  }
  
  // optional uint32 support = 15;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->support(), target);
  }
  
  // optional uint32 score_medal = 16;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->score_medal(), target);
  }
  
  // optional uint32 kills_medal = 17;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kills_medal(), target);
  }
  
  // optional uint32 damage_medal = 18;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->damage_medal(), target);
  }
  
  // optional uint32 healing_medal = 19;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->healing_medal(), target);
  }
  
  // optional uint32 support_medal = 20;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_medal(), target);
  }
  
  // repeated .CMsgTFXPSource xp_breakdown = 21;
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->xp_breakdown(i), target);
  }
  
  // optional uint32 leave_time = 22;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->leave_time(), target);
  }
  
  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->leave_reason(), target);
  }
  
  // optional uint32 connect_time = 24;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->connect_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Match_Result_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 original_party_id = 2;
    if (has_original_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_party_id());
    }
    
    // optional uint32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 ping = 5;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }
    
    // optional uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional uint32 rank = 9;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional uint32 classes_played = 10;
    if (has_classes_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classes_played());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kills = 11;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 12;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 damage = 13;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }
    
    // optional uint32 healing = 14;
    if (has_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }
    
    // optional uint32 support = 15;
    if (has_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }
    
    // optional uint32 score_medal = 16;
    if (has_score_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_medal());
    }
    
    // optional uint32 kills_medal = 17;
    if (has_kills_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_medal());
    }
    
    // optional uint32 damage_medal = 18;
    if (has_damage_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_medal());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 healing_medal = 19;
    if (has_healing_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_medal());
    }
    
    // optional uint32 support_medal = 20;
    if (has_support_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_medal());
    }
    
    // optional uint32 leave_time = 22;
    if (has_leave_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }
    
    // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (has_leave_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_reason());
    }
    
    // optional uint32 connect_time = 24;
    if (has_connect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_time());
    }
    
  }
  // repeated .CMsgTFXPSource xp_breakdown = 21;
  total_size += 2 * this->xp_breakdown_size();
  for (int i = 0; i < this->xp_breakdown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_breakdown(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_Result_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Match_Result_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Match_Result_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result_Player::MergeFrom(const CMsgGC_Match_Result_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_original_party_id(from.original_party_id());
    }
    if (from._has_bit(2)) {
      set_team(from.team());
    }
    if (from._has_bit(3)) {
      set_score(from.score());
    }
    if (from._has_bit(4)) {
      set_ping(from.ping());
    }
    if (from._has_bit(5)) {
      set_flags(from.flags());
    }
    if (from._has_bit(6)) {
      set_rank(from.rank());
    }
    if (from._has_bit(7)) {
      set_classes_played(from.classes_played());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_kills(from.kills());
    }
    if (from._has_bit(9)) {
      set_deaths(from.deaths());
    }
    if (from._has_bit(10)) {
      set_damage(from.damage());
    }
    if (from._has_bit(11)) {
      set_healing(from.healing());
    }
    if (from._has_bit(12)) {
      set_support(from.support());
    }
    if (from._has_bit(13)) {
      set_score_medal(from.score_medal());
    }
    if (from._has_bit(14)) {
      set_kills_medal(from.kills_medal());
    }
    if (from._has_bit(15)) {
      set_damage_medal(from.damage_medal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_healing_medal(from.healing_medal());
    }
    if (from._has_bit(17)) {
      set_support_medal(from.support_medal());
    }
    if (from._has_bit(19)) {
      set_leave_time(from.leave_time());
    }
    if (from._has_bit(20)) {
      set_leave_reason(from.leave_reason());
    }
    if (from._has_bit(21)) {
      set_connect_time(from.connect_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Match_Result_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result_Player::CopyFrom(const CMsgGC_Match_Result_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result_Player::IsInitialized() const {
  
  return true;
}

void CMsgGC_Match_Result_Player::Swap(CMsgGC_Match_Result_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(original_party_id_, other->original_party_id_);
    std::swap(team_, other->team_);
    std::swap(score_, other->score_);
    std::swap(ping_, other->ping_);
    std::swap(flags_, other->flags_);
    std::swap(rank_, other->rank_);
    std::swap(classes_played_, other->classes_played_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(damage_, other->damage_);
    std::swap(healing_, other->healing_);
    std::swap(support_, other->support_);
    std::swap(score_medal_, other->score_medal_);
    std::swap(kills_medal_, other->kills_medal_);
    std::swap(damage_medal_, other->damage_medal_);
    std::swap(healing_medal_, other->healing_medal_);
    std::swap(support_medal_, other->support_medal_);
    xp_breakdown_.Swap(&other->xp_breakdown_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(leave_reason_, other->leave_reason_);
    std::swap(connect_time_, other->connect_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Match_Result_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Match_Result_Player_descriptor_;
  metadata.reflection = CMsgGC_Match_Result_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGC_Match_Result::kMatchIdFieldNumber;
const int CMsgGC_Match_Result::kMatchGroupFieldNumber;
const int CMsgGC_Match_Result::kStatusFieldNumber;
const int CMsgGC_Match_Result::kDurationFieldNumber;
const int CMsgGC_Match_Result::kRedScoreFieldNumber;
const int CMsgGC_Match_Result::kBlueScoreFieldNumber;
const int CMsgGC_Match_Result::kWinningTeamFieldNumber;
const int CMsgGC_Match_Result::kMapIndexFieldNumber;
const int CMsgGC_Match_Result::kGameTypeFieldNumber;
const int CMsgGC_Match_Result::kPlayersFieldNumber;
const int CMsgGC_Match_Result::kWinReasonFieldNumber;
const int CMsgGC_Match_Result::kFlagsFieldNumber;
const int CMsgGC_Match_Result::kBotsFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Match_Result::CMsgGC_Match_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Match_Result::InitAsDefaultInstance() {
}

CMsgGC_Match_Result::CMsgGC_Match_Result(const CMsgGC_Match_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Match_Result::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  match_group_ = 0;
  status_ = 0;
  duration_ = 0u;
  red_score_ = 0u;
  blue_score_ = 0u;
  winning_team_ = 0u;
  map_index_ = 0u;
  game_type_ = 0u;
  win_reason_ = 0u;
  flags_ = 0u;
  bots_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Match_Result::~CMsgGC_Match_Result() {
  SharedDtor();
}

void CMsgGC_Match_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Match_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Match_Result_descriptor_;
}

const CMsgGC_Match_Result& CMsgGC_Match_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Match_Result* CMsgGC_Match_Result::default_instance_ = NULL;

CMsgGC_Match_Result* CMsgGC_Match_Result::New() const {
  return new CMsgGC_Match_Result;
}

void CMsgGC_Match_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    match_group_ = 0;
    status_ = 0;
    duration_ = 0u;
    red_score_ = 0u;
    blue_score_ = 0u;
    winning_team_ = 0u;
    map_index_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    game_type_ = 0u;
    win_reason_ = 0u;
    flags_ = 0u;
    bots_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Match_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_group;
        break;
      }
      
      // optional int32 match_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_Match_Result_Status_IsValid(value)) {
            set_status(static_cast< ::CMsgGC_Match_Result_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }
      
      // optional uint32 duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_red_score;
        break;
      }
      
      // optional uint32 red_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_score_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_blue_score;
        break;
      }
      
      // optional uint32 blue_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_score_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winning_team;
        break;
      }
      
      // optional uint32 winning_team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winning_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_team_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_map_index;
        break;
      }
      
      // optional uint32 map_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_index_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_game_type;
        break;
      }
      
      // optional uint32 game_type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_players;
        break;
      }
      
      // repeated .CMsgGC_Match_Result.Player players = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_players;
        if (input->ExpectTag(104)) goto parse_win_reason;
        break;
      }
      
      // optional uint32 win_reason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_reason_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bots;
        break;
      }
      
      // optional uint32 bots = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bots_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Match_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }
  
  // optional int32 match_group = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_group(), output);
  }
  
  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }
  
  // optional uint32 duration = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }
  
  // optional uint32 red_score = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_score(), output);
  }
  
  // optional uint32 blue_score = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blue_score(), output);
  }
  
  // optional uint32 winning_team = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winning_team(), output);
  }
  
  // optional uint32 map_index = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->map_index(), output);
  }
  
  // optional uint32 game_type = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_type(), output);
  }
  
  // repeated .CMsgGC_Match_Result.Player players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(i), output);
  }
  
  // optional uint32 win_reason = 13;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->win_reason(), output);
  }
  
  // optional uint32 flags = 14;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->flags(), output);
  }
  
  // optional uint32 bots = 16;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bots(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Match_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }
  
  // optional int32 match_group = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_group(), target);
  }
  
  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }
  
  // optional uint32 duration = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }
  
  // optional uint32 red_score = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->red_score(), target);
  }
  
  // optional uint32 blue_score = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blue_score(), target);
  }
  
  // optional uint32 winning_team = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winning_team(), target);
  }
  
  // optional uint32 map_index = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->map_index(), target);
  }
  
  // optional uint32 game_type = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_type(), target);
  }
  
  // repeated .CMsgGC_Match_Result.Player players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->players(i), target);
  }
  
  // optional uint32 win_reason = 13;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->win_reason(), target);
  }
  
  // optional uint32 flags = 14;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->flags(), target);
  }
  
  // optional uint32 bots = 16;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bots(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Match_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional int32 match_group = 2;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }
    
    // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional uint32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }
    
    // optional uint32 red_score = 5;
    if (has_red_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_score());
    }
    
    // optional uint32 blue_score = 6;
    if (has_blue_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_score());
    }
    
    // optional uint32 winning_team = 7;
    if (has_winning_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_team());
    }
    
    // optional uint32 map_index = 8;
    if (has_map_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_index());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 game_type = 9 [default = 0];
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }
    
    // optional uint32 win_reason = 13;
    if (has_win_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_reason());
    }
    
    // optional uint32 flags = 14;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional uint32 bots = 16;
    if (has_bots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bots());
    }
    
  }
  // repeated .CMsgGC_Match_Result.Player players = 10;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Match_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Match_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result::MergeFrom(const CMsgGC_Match_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_match_id(from.match_id());
    }
    if (from._has_bit(1)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_duration(from.duration());
    }
    if (from._has_bit(4)) {
      set_red_score(from.red_score());
    }
    if (from._has_bit(5)) {
      set_blue_score(from.blue_score());
    }
    if (from._has_bit(6)) {
      set_winning_team(from.winning_team());
    }
    if (from._has_bit(7)) {
      set_map_index(from.map_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_game_type(from.game_type());
    }
    if (from._has_bit(10)) {
      set_win_reason(from.win_reason());
    }
    if (from._has_bit(11)) {
      set_flags(from.flags());
    }
    if (from._has_bit(12)) {
      set_bots(from.bots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Match_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result::CopyFrom(const CMsgGC_Match_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result::IsInitialized() const {
  
  return true;
}

void CMsgGC_Match_Result::Swap(CMsgGC_Match_Result* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(match_group_, other->match_group_);
    std::swap(status_, other->status_);
    std::swap(duration_, other->duration_);
    std::swap(red_score_, other->red_score_);
    std::swap(blue_score_, other->blue_score_);
    std::swap(winning_team_, other->winning_team_);
    std::swap(map_index_, other->map_index_);
    std::swap(game_type_, other->game_type_);
    players_.Swap(&other->players_);
    std::swap(win_reason_, other->win_reason_);
    std::swap(flags_, other->flags_);
    std::swap(bots_, other->bots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Match_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Match_Result_descriptor_;
  metadata.reflection = CMsgGC_Match_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Match_ResultResponse::InitAsDefaultInstance() {
}

CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse(const CMsgGC_Match_ResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Match_ResultResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Match_ResultResponse::~CMsgGC_Match_ResultResponse() {
  SharedDtor();
}

void CMsgGC_Match_ResultResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Match_ResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_ResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Match_ResultResponse_descriptor_;
}

const CMsgGC_Match_ResultResponse& CMsgGC_Match_ResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Match_ResultResponse* CMsgGC_Match_ResultResponse::default_instance_ = NULL;

CMsgGC_Match_ResultResponse* CMsgGC_Match_ResultResponse::New() const {
  return new CMsgGC_Match_ResultResponse;
}

void CMsgGC_Match_ResultResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Match_ResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGC_Match_ResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Match_ResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Match_ResultResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_ResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Match_ResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Match_ResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Match_ResultResponse::MergeFrom(const CMsgGC_Match_ResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Match_ResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_ResultResponse::CopyFrom(const CMsgGC_Match_ResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_ResultResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_Match_ResultResponse::Swap(CMsgGC_Match_ResultResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Match_ResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Match_ResultResponse_descriptor_;
  metadata.reflection = CMsgGC_Match_ResultResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEconItemPreviewDataBlock::kEconitemFieldNumber;
#endif  // !_MSC_VER

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
  econitem_ = const_cast< ::CSOEconItem*>(&::CSOEconItem::default_instance());
}

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::SharedCtor() {
  _cached_size_ = 0;
  econitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  SharedDtor();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  if (this != default_instance_) {
    delete econitem_;
  }
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEconItemPreviewDataBlock_descriptor_;
}

const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::default_instance_ = NULL;

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::New() const {
  return new CEconItemPreviewDataBlock;
}

void CEconItemPreviewDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (econitem_ != NULL) econitem_->::CSOEconItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEconItemPreviewDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSOEconItem econitem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_econitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CEconItemPreviewDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSOEconItem econitem = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->econitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CEconItemPreviewDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSOEconItem econitem = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->econitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CEconItemPreviewDataBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSOEconItem econitem = 1;
    if (has_econitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->econitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEconItemPreviewDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_econitem()->::CSOEconItem::MergeFrom(from.econitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEconItemPreviewDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  
  return true;
}

void CEconItemPreviewDataBlock::Swap(CEconItemPreviewDataBlock* other) {
  if (other != this) {
    std::swap(econitem_, other->econitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEconItemPreviewDataBlock_descriptor_;
  metadata.reflection = CEconItemPreviewDataBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamSFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamAFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamDFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamMFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance() {
}

CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  param_s_ = GOOGLE_ULONGLONG(0);
  param_a_ = GOOGLE_ULONGLONG(0);
  param_d_ = GOOGLE_ULONGLONG(0);
  param_m_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Client2GCEconPreviewDataBlockRequest::~CMsgGC_Client2GCEconPreviewDataBlockRequest() {
  SharedDtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_;
}

const CMsgGC_Client2GCEconPreviewDataBlockRequest& CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Client2GCEconPreviewDataBlockRequest* CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_ = NULL;

CMsgGC_Client2GCEconPreviewDataBlockRequest* CMsgGC_Client2GCEconPreviewDataBlockRequest::New() const {
  return new CMsgGC_Client2GCEconPreviewDataBlockRequest;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_s_ = GOOGLE_ULONGLONG(0);
    param_a_ = GOOGLE_ULONGLONG(0);
    param_d_ = GOOGLE_ULONGLONG(0);
    param_m_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Client2GCEconPreviewDataBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 param_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_s_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_a;
        break;
      }
      
      // optional uint64 param_a = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_a_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param_d;
        break;
      }
      
      // optional uint64 param_d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_d_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param_m;
        break;
      }
      
      // optional uint64 param_m = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_m_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 param_s = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->param_s(), output);
  }
  
  // optional uint64 param_a = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_a(), output);
  }
  
  // optional uint64 param_d = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param_d(), output);
  }
  
  // optional uint64 param_m = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->param_m(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 param_s = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->param_s(), target);
  }
  
  // optional uint64 param_a = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_a(), target);
  }
  
  // optional uint64 param_d = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param_d(), target);
  }
  
  // optional uint64 param_m = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->param_m(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Client2GCEconPreviewDataBlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 param_s = 1;
    if (has_param_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_s());
    }
    
    // optional uint64 param_a = 2;
    if (has_param_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_a());
    }
    
    // optional uint64 param_d = 3;
    if (has_param_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_d());
    }
    
    // optional uint64 param_m = 4;
    if (has_param_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_m());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Client2GCEconPreviewDataBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_param_s(from.param_s());
    }
    if (from._has_bit(1)) {
      set_param_a(from.param_a());
    }
    if (from._has_bit(2)) {
      set_param_d(from.param_d());
    }
    if (from._has_bit(3)) {
      set_param_m(from.param_m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::Swap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
  if (other != this) {
    std::swap(param_s_, other->param_s_);
    std::swap(param_a_, other->param_a_);
    std::swap(param_d_, other->param_d_);
    std::swap(param_m_, other->param_m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_;
  metadata.reflection = CMsgGC_Client2GCEconPreviewDataBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_Client2GCEconPreviewDataBlockResponse::kIteminfoFieldNumber;
#endif  // !_MSC_VER

CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(&::CEconItemPreviewDataBlock::default_instance());
}

CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_Client2GCEconPreviewDataBlockResponse::~CMsgGC_Client2GCEconPreviewDataBlockResponse() {
  SharedDtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_;
}

const CMsgGC_Client2GCEconPreviewDataBlockResponse& CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_Client2GCEconPreviewDataBlockResponse* CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_ = NULL;

CMsgGC_Client2GCEconPreviewDataBlockResponse* CMsgGC_Client2GCEconPreviewDataBlockResponse::New() const {
  return new CMsgGC_Client2GCEconPreviewDataBlockResponse;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_Client2GCEconPreviewDataBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_Client2GCEconPreviewDataBlockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_Client2GCEconPreviewDataBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::Swap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_;
  metadata.reflection = CMsgGC_Client2GCEconPreviewDataBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFLadderPlayerStats::kAccountIdFieldNumber;
const int CSOTFLadderPlayerStats::kMatchGroupFieldNumber;
const int CSOTFLadderPlayerStats::kSeasonIdFieldNumber;
const int CSOTFLadderPlayerStats::kGamesFieldNumber;
const int CSOTFLadderPlayerStats::kScoreFieldNumber;
const int CSOTFLadderPlayerStats::kKillsFieldNumber;
const int CSOTFLadderPlayerStats::kDeathsFieldNumber;
const int CSOTFLadderPlayerStats::kDamageFieldNumber;
const int CSOTFLadderPlayerStats::kHealingFieldNumber;
const int CSOTFLadderPlayerStats::kSupportFieldNumber;
const int CSOTFLadderPlayerStats::kScoreBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kScoreSilverFieldNumber;
const int CSOTFLadderPlayerStats::kScoreGoldFieldNumber;
const int CSOTFLadderPlayerStats::kKillsBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kKillsSilverFieldNumber;
const int CSOTFLadderPlayerStats::kKillsGoldFieldNumber;
const int CSOTFLadderPlayerStats::kDamageBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kDamageSilverFieldNumber;
const int CSOTFLadderPlayerStats::kDamageGoldFieldNumber;
const int CSOTFLadderPlayerStats::kHealingBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kHealingSilverFieldNumber;
const int CSOTFLadderPlayerStats::kHealingGoldFieldNumber;
const int CSOTFLadderPlayerStats::kSupportBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kSupportSilverFieldNumber;
const int CSOTFLadderPlayerStats::kSupportGoldFieldNumber;
#endif  // !_MSC_VER

CSOTFLadderPlayerStats::CSOTFLadderPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFLadderPlayerStats::InitAsDefaultInstance() {
}

CSOTFLadderPlayerStats::CSOTFLadderPlayerStats(const CSOTFLadderPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFLadderPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  match_group_ = 0;
  season_id_ = 0u;
  games_ = 0u;
  score_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  damage_ = 0u;
  healing_ = 0u;
  support_ = 0u;
  score_bronze_ = 0u;
  score_silver_ = 0u;
  score_gold_ = 0u;
  kills_bronze_ = 0u;
  kills_silver_ = 0u;
  kills_gold_ = 0u;
  damage_bronze_ = 0u;
  damage_silver_ = 0u;
  damage_gold_ = 0u;
  healing_bronze_ = 0u;
  healing_silver_ = 0u;
  healing_gold_ = 0u;
  support_bronze_ = 0u;
  support_silver_ = 0u;
  support_gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFLadderPlayerStats::~CSOTFLadderPlayerStats() {
  SharedDtor();
}

void CSOTFLadderPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFLadderPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFLadderPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFLadderPlayerStats_descriptor_;
}

const CSOTFLadderPlayerStats& CSOTFLadderPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFLadderPlayerStats* CSOTFLadderPlayerStats::default_instance_ = NULL;

CSOTFLadderPlayerStats* CSOTFLadderPlayerStats::New() const {
  return new CSOTFLadderPlayerStats;
}

void CSOTFLadderPlayerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    match_group_ = 0;
    season_id_ = 0u;
    games_ = 0u;
    score_ = 0u;
    kills_ = 0u;
    deaths_ = 0u;
    damage_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    healing_ = 0u;
    support_ = 0u;
    score_bronze_ = 0u;
    score_silver_ = 0u;
    score_gold_ = 0u;
    kills_bronze_ = 0u;
    kills_silver_ = 0u;
    kills_gold_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    damage_bronze_ = 0u;
    damage_silver_ = 0u;
    damage_gold_ = 0u;
    healing_bronze_ = 0u;
    healing_silver_ = 0u;
    healing_gold_ = 0u;
    support_bronze_ = 0u;
    support_silver_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    support_gold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFLadderPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_group;
        break;
      }
      
      // optional int32 match_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_season_id;
        break;
      }
      
      // optional uint32 season_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_games;
        break;
      }
      
      // optional uint32 games = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_damage;
        break;
      }
      
      // optional uint32 damage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_healing;
        break;
      }
      
      // optional uint32 healing = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_support;
        break;
      }
      
      // optional uint32 support = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_score_bronze;
        break;
      }
      
      // optional uint32 score_bronze = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_bronze_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_score_silver;
        break;
      }
      
      // optional uint32 score_silver = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_silver_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_score_gold;
        break;
      }
      
      // optional uint32 score_gold = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_gold_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_kills_bronze;
        break;
      }
      
      // optional uint32 kills_bronze = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_bronze_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_kills_silver;
        break;
      }
      
      // optional uint32 kills_silver = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_silver_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_kills_gold;
        break;
      }
      
      // optional uint32 kills_gold = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_gold_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_damage_bronze;
        break;
      }
      
      // optional uint32 damage_bronze = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_bronze_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_damage_silver;
        break;
      }
      
      // optional uint32 damage_silver = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_silver_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_damage_gold;
        break;
      }
      
      // optional uint32 damage_gold = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_gold_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_healing_bronze;
        break;
      }
      
      // optional uint32 healing_bronze = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_bronze_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_healing_silver;
        break;
      }
      
      // optional uint32 healing_silver = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_silver_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_healing_gold;
        break;
      }
      
      // optional uint32 healing_gold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_gold_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_support_bronze;
        break;
      }
      
      // optional uint32 support_bronze = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_bronze_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_support_silver;
        break;
      }
      
      // optional uint32 support_silver = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_silver_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_support_gold;
        break;
      }
      
      // optional uint32 support_gold = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFLadderPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional int32 match_group = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_group(), output);
  }
  
  // optional uint32 season_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->season_id(), output);
  }
  
  // optional uint32 games = 9;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->games(), output);
  }
  
  // optional uint32 score = 10;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }
  
  // optional uint32 kills = 11;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kills(), output);
  }
  
  // optional uint32 deaths = 12;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deaths(), output);
  }
  
  // optional uint32 damage = 13;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->damage(), output);
  }
  
  // optional uint32 healing = 14;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->healing(), output);
  }
  
  // optional uint32 support = 15;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->support(), output);
  }
  
  // optional uint32 score_bronze = 16;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->score_bronze(), output);
  }
  
  // optional uint32 score_silver = 17;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->score_silver(), output);
  }
  
  // optional uint32 score_gold = 18;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->score_gold(), output);
  }
  
  // optional uint32 kills_bronze = 19;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->kills_bronze(), output);
  }
  
  // optional uint32 kills_silver = 20;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->kills_silver(), output);
  }
  
  // optional uint32 kills_gold = 21;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->kills_gold(), output);
  }
  
  // optional uint32 damage_bronze = 22;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->damage_bronze(), output);
  }
  
  // optional uint32 damage_silver = 23;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage_silver(), output);
  }
  
  // optional uint32 damage_gold = 24;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->damage_gold(), output);
  }
  
  // optional uint32 healing_bronze = 25;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->healing_bronze(), output);
  }
  
  // optional uint32 healing_silver = 26;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->healing_silver(), output);
  }
  
  // optional uint32 healing_gold = 27;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->healing_gold(), output);
  }
  
  // optional uint32 support_bronze = 28;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_bronze(), output);
  }
  
  // optional uint32 support_silver = 29;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->support_silver(), output);
  }
  
  // optional uint32 support_gold = 30;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->support_gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFLadderPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional int32 match_group = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_group(), target);
  }
  
  // optional uint32 season_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->season_id(), target);
  }
  
  // optional uint32 games = 9;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->games(), target);
  }
  
  // optional uint32 score = 10;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }
  
  // optional uint32 kills = 11;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kills(), target);
  }
  
  // optional uint32 deaths = 12;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deaths(), target);
  }
  
  // optional uint32 damage = 13;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->damage(), target);
  }
  
  // optional uint32 healing = 14;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->healing(), target);
  }
  
  // optional uint32 support = 15;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->support(), target);
  }
  
  // optional uint32 score_bronze = 16;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->score_bronze(), target);
  }
  
  // optional uint32 score_silver = 17;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->score_silver(), target);
  }
  
  // optional uint32 score_gold = 18;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->score_gold(), target);
  }
  
  // optional uint32 kills_bronze = 19;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->kills_bronze(), target);
  }
  
  // optional uint32 kills_silver = 20;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->kills_silver(), target);
  }
  
  // optional uint32 kills_gold = 21;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->kills_gold(), target);
  }
  
  // optional uint32 damage_bronze = 22;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->damage_bronze(), target);
  }
  
  // optional uint32 damage_silver = 23;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage_silver(), target);
  }
  
  // optional uint32 damage_gold = 24;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->damage_gold(), target);
  }
  
  // optional uint32 healing_bronze = 25;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->healing_bronze(), target);
  }
  
  // optional uint32 healing_silver = 26;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->healing_silver(), target);
  }
  
  // optional uint32 healing_gold = 27;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->healing_gold(), target);
  }
  
  // optional uint32 support_bronze = 28;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_bronze(), target);
  }
  
  // optional uint32 support_silver = 29;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->support_silver(), target);
  }
  
  // optional uint32 support_gold = 30;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->support_gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFLadderPlayerStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional int32 match_group = 2;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }
    
    // optional uint32 season_id = 3;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }
    
    // optional uint32 games = 9;
    if (has_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games());
    }
    
    // optional uint32 score = 10;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 kills = 11;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 12;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 damage = 13;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 healing = 14;
    if (has_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }
    
    // optional uint32 support = 15;
    if (has_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }
    
    // optional uint32 score_bronze = 16;
    if (has_score_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_bronze());
    }
    
    // optional uint32 score_silver = 17;
    if (has_score_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_silver());
    }
    
    // optional uint32 score_gold = 18;
    if (has_score_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_gold());
    }
    
    // optional uint32 kills_bronze = 19;
    if (has_kills_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_bronze());
    }
    
    // optional uint32 kills_silver = 20;
    if (has_kills_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_silver());
    }
    
    // optional uint32 kills_gold = 21;
    if (has_kills_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_gold());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 damage_bronze = 22;
    if (has_damage_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_bronze());
    }
    
    // optional uint32 damage_silver = 23;
    if (has_damage_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_silver());
    }
    
    // optional uint32 damage_gold = 24;
    if (has_damage_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_gold());
    }
    
    // optional uint32 healing_bronze = 25;
    if (has_healing_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_bronze());
    }
    
    // optional uint32 healing_silver = 26;
    if (has_healing_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_silver());
    }
    
    // optional uint32 healing_gold = 27;
    if (has_healing_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_gold());
    }
    
    // optional uint32 support_bronze = 28;
    if (has_support_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_bronze());
    }
    
    // optional uint32 support_silver = 29;
    if (has_support_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_silver());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 support_gold = 30;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFLadderPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFLadderPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFLadderPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFLadderPlayerStats::MergeFrom(const CSOTFLadderPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(2)) {
      set_season_id(from.season_id());
    }
    if (from._has_bit(3)) {
      set_games(from.games());
    }
    if (from._has_bit(4)) {
      set_score(from.score());
    }
    if (from._has_bit(5)) {
      set_kills(from.kills());
    }
    if (from._has_bit(6)) {
      set_deaths(from.deaths());
    }
    if (from._has_bit(7)) {
      set_damage(from.damage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_healing(from.healing());
    }
    if (from._has_bit(9)) {
      set_support(from.support());
    }
    if (from._has_bit(10)) {
      set_score_bronze(from.score_bronze());
    }
    if (from._has_bit(11)) {
      set_score_silver(from.score_silver());
    }
    if (from._has_bit(12)) {
      set_score_gold(from.score_gold());
    }
    if (from._has_bit(13)) {
      set_kills_bronze(from.kills_bronze());
    }
    if (from._has_bit(14)) {
      set_kills_silver(from.kills_silver());
    }
    if (from._has_bit(15)) {
      set_kills_gold(from.kills_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_damage_bronze(from.damage_bronze());
    }
    if (from._has_bit(17)) {
      set_damage_silver(from.damage_silver());
    }
    if (from._has_bit(18)) {
      set_damage_gold(from.damage_gold());
    }
    if (from._has_bit(19)) {
      set_healing_bronze(from.healing_bronze());
    }
    if (from._has_bit(20)) {
      set_healing_silver(from.healing_silver());
    }
    if (from._has_bit(21)) {
      set_healing_gold(from.healing_gold());
    }
    if (from._has_bit(22)) {
      set_support_bronze(from.support_bronze());
    }
    if (from._has_bit(23)) {
      set_support_silver(from.support_silver());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_support_gold(from.support_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFLadderPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFLadderPlayerStats::CopyFrom(const CSOTFLadderPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFLadderPlayerStats::IsInitialized() const {
  
  return true;
}

void CSOTFLadderPlayerStats::Swap(CSOTFLadderPlayerStats* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_group_, other->match_group_);
    std::swap(season_id_, other->season_id_);
    std::swap(games_, other->games_);
    std::swap(score_, other->score_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(damage_, other->damage_);
    std::swap(healing_, other->healing_);
    std::swap(support_, other->support_);
    std::swap(score_bronze_, other->score_bronze_);
    std::swap(score_silver_, other->score_silver_);
    std::swap(score_gold_, other->score_gold_);
    std::swap(kills_bronze_, other->kills_bronze_);
    std::swap(kills_silver_, other->kills_silver_);
    std::swap(kills_gold_, other->kills_gold_);
    std::swap(damage_bronze_, other->damage_bronze_);
    std::swap(damage_silver_, other->damage_silver_);
    std::swap(damage_gold_, other->damage_gold_);
    std::swap(healing_bronze_, other->healing_bronze_);
    std::swap(healing_silver_, other->healing_silver_);
    std::swap(healing_gold_, other->healing_gold_);
    std::swap(support_bronze_, other->support_bronze_);
    std::swap(support_silver_, other->support_silver_);
    std::swap(support_gold_, other->support_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFLadderPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFLadderPlayerStats_descriptor_;
  metadata.reflection = CSOTFLadderPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFRatingData::kAccountIdFieldNumber;
const int CSOTFRatingData::kRatingTypeFieldNumber;
const int CSOTFRatingData::kRatingPrimaryFieldNumber;
const int CSOTFRatingData::kRatingSecondaryFieldNumber;
const int CSOTFRatingData::kRatingTertiaryFieldNumber;
#endif  // !_MSC_VER

CSOTFRatingData::CSOTFRatingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFRatingData::InitAsDefaultInstance() {
}

CSOTFRatingData::CSOTFRatingData(const CSOTFRatingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFRatingData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  rating_type_ = 0;
  rating_primary_ = 0u;
  rating_secondary_ = 0u;
  rating_tertiary_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFRatingData::~CSOTFRatingData() {
  SharedDtor();
}

void CSOTFRatingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFRatingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFRatingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFRatingData_descriptor_;
}

const CSOTFRatingData& CSOTFRatingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFRatingData* CSOTFRatingData::default_instance_ = NULL;

CSOTFRatingData* CSOTFRatingData::New() const {
  return new CSOTFRatingData;
}

void CSOTFRatingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    rating_type_ = 0;
    rating_primary_ = 0u;
    rating_secondary_ = 0u;
    rating_tertiary_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFRatingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rating_type;
        break;
      }
      
      // optional int32 rating_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rating_primary;
        break;
      }
      
      // optional uint32 rating_primary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_primary_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rating_secondary;
        break;
      }
      
      // optional uint32 rating_secondary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating_secondary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_secondary_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rating_tertiary;
        break;
      }
      
      // optional uint32 rating_tertiary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating_tertiary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_tertiary_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFRatingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional int32 rating_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rating_type(), output);
  }
  
  // optional uint32 rating_primary = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rating_primary(), output);
  }
  
  // optional uint32 rating_secondary = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rating_secondary(), output);
  }
  
  // optional uint32 rating_tertiary = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rating_tertiary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFRatingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional int32 rating_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rating_type(), target);
  }
  
  // optional uint32 rating_primary = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rating_primary(), target);
  }
  
  // optional uint32 rating_secondary = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rating_secondary(), target);
  }
  
  // optional uint32 rating_tertiary = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rating_tertiary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFRatingData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional int32 rating_type = 2;
    if (has_rating_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating_type());
    }
    
    // optional uint32 rating_primary = 3;
    if (has_rating_primary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_primary());
    }
    
    // optional uint32 rating_secondary = 4;
    if (has_rating_secondary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_secondary());
    }
    
    // optional uint32 rating_tertiary = 5;
    if (has_rating_tertiary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_tertiary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFRatingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFRatingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFRatingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFRatingData::MergeFrom(const CSOTFRatingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_rating_type(from.rating_type());
    }
    if (from._has_bit(2)) {
      set_rating_primary(from.rating_primary());
    }
    if (from._has_bit(3)) {
      set_rating_secondary(from.rating_secondary());
    }
    if (from._has_bit(4)) {
      set_rating_tertiary(from.rating_tertiary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFRatingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFRatingData::CopyFrom(const CSOTFRatingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFRatingData::IsInitialized() const {
  
  return true;
}

void CSOTFRatingData::Swap(CSOTFRatingData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rating_type_, other->rating_type_);
    std::swap(rating_primary_, other->rating_primary_);
    std::swap(rating_secondary_, other->rating_secondary_);
    std::swap(rating_tertiary_, other->rating_tertiary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFRatingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFRatingData_descriptor_;
  metadata.reflection = CSOTFRatingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_TFVoteKickPlayerRequest::kAccountIdFieldNumber;
const int CMsgGC_TFVoteKickPlayerRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_TFVoteKickPlayerRequest::InitAsDefaultInstance() {
}

CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest(const CMsgGC_TFVoteKickPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_TFVoteKickPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_TFVoteKickPlayerRequest::~CMsgGC_TFVoteKickPlayerRequest() {
  SharedDtor();
}

void CMsgGC_TFVoteKickPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_TFVoteKickPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_TFVoteKickPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_TFVoteKickPlayerRequest_descriptor_;
}

const CMsgGC_TFVoteKickPlayerRequest& CMsgGC_TFVoteKickPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_TFVoteKickPlayerRequest* CMsgGC_TFVoteKickPlayerRequest::default_instance_ = NULL;

CMsgGC_TFVoteKickPlayerRequest* CMsgGC_TFVoteKickPlayerRequest::New() const {
  return new CMsgGC_TFVoteKickPlayerRequest;
}

void CMsgGC_TFVoteKickPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_TFVoteKickPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }
      
      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_TFVoteKickPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint64 target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_TFVoteKickPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint64 target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_TFVoteKickPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_TFVoteKickPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_TFVoteKickPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_TFVoteKickPlayerRequest::IsInitialized() const {
  
  return true;
}

void CMsgGC_TFVoteKickPlayerRequest::Swap(CMsgGC_TFVoteKickPlayerRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_TFVoteKickPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_TFVoteKickPlayerRequest_descriptor_;
  metadata.reflection = CMsgGC_TFVoteKickPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_VoteKickPlayerRequestResponse::kAllowedFieldNumber;
const int CMsgGC_VoteKickPlayerRequestResponse::kCooldownFieldNumber;
#endif  // !_MSC_VER

CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_VoteKickPlayerRequestResponse::InitAsDefaultInstance() {
}

CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse(const CMsgGC_VoteKickPlayerRequestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedCtor() {
  _cached_size_ = 0;
  allowed_ = false;
  cooldown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_VoteKickPlayerRequestResponse::~CMsgGC_VoteKickPlayerRequestResponse() {
  SharedDtor();
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_VoteKickPlayerRequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_VoteKickPlayerRequestResponse_descriptor_;
}

const CMsgGC_VoteKickPlayerRequestResponse& CMsgGC_VoteKickPlayerRequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_VoteKickPlayerRequestResponse* CMsgGC_VoteKickPlayerRequestResponse::default_instance_ = NULL;

CMsgGC_VoteKickPlayerRequestResponse* CMsgGC_VoteKickPlayerRequestResponse::New() const {
  return new CMsgGC_VoteKickPlayerRequestResponse;
}

void CMsgGC_VoteKickPlayerRequestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allowed_ = false;
    cooldown_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_VoteKickPlayerRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowed_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cooldown;
        break;
      }
      
      // optional uint32 cooldown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooldown_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_VoteKickPlayerRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool allowed = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowed(), output);
  }
  
  // optional uint32 cooldown = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cooldown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_VoteKickPlayerRequestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool allowed = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowed(), target);
  }
  
  // optional uint32 cooldown = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cooldown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_VoteKickPlayerRequestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allowed = 1;
    if (has_allowed()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 cooldown = 2;
    if (has_cooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooldown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_VoteKickPlayerRequestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_VoteKickPlayerRequestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_allowed(from.allowed());
    }
    if (from._has_bit(1)) {
      set_cooldown(from.cooldown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_VoteKickPlayerRequestResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_VoteKickPlayerRequestResponse::Swap(CMsgGC_VoteKickPlayerRequestResponse* other) {
  if (other != this) {
    std::swap(allowed_, other->allowed_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_VoteKickPlayerRequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_VoteKickPlayerRequestResponse_descriptor_;
  metadata.reflection = CMsgGC_VoteKickPlayerRequestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_DailyCompetitiveStatsRollup::InitAsDefaultInstance() {
}

CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup(const CMsgGC_DailyCompetitiveStatsRollup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_DailyCompetitiveStatsRollup::~CMsgGC_DailyCompetitiveStatsRollup() {
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_DailyCompetitiveStatsRollup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_DailyCompetitiveStatsRollup_descriptor_;
}

const CMsgGC_DailyCompetitiveStatsRollup& CMsgGC_DailyCompetitiveStatsRollup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_DailyCompetitiveStatsRollup* CMsgGC_DailyCompetitiveStatsRollup::default_instance_ = NULL;

CMsgGC_DailyCompetitiveStatsRollup* CMsgGC_DailyCompetitiveStatsRollup::New() const {
  return new CMsgGC_DailyCompetitiveStatsRollup;
}

void CMsgGC_DailyCompetitiveStatsRollup::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_DailyCompetitiveStatsRollup::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_DailyCompetitiveStatsRollup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup::IsInitialized() const {
  
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup::Swap(CMsgGC_DailyCompetitiveStatsRollup* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_DailyCompetitiveStatsRollup_descriptor_;
  metadata.reflection = CMsgGC_DailyCompetitiveStatsRollup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kRankFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kRecordsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgScoreFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevScoreFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgKillsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevKillsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgDamageFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevDamageFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgHealingFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevHealingFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgSupportFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevSupportFieldNumber;
#endif  // !_MSC_VER

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InitAsDefaultInstance() {
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  records_ = 0u;
  avg_score_ = 0u;
  stdev_score_ = 0u;
  avg_kills_ = 0u;
  stdev_kills_ = 0u;
  avg_damage_ = 0u;
  stdev_damage_ = 0u;
  avg_healing_ = 0u;
  stdev_healing_ = 0u;
  avg_support_ = 0u;
  stdev_support_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() {
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_;
}

const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_ = NULL;

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::New() const {
  return new CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    records_ = 0u;
    avg_score_ = 0u;
    stdev_score_ = 0u;
    avg_kills_ = 0u;
    stdev_kills_ = 0u;
    avg_damage_ = 0u;
    stdev_damage_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    avg_healing_ = 0u;
    stdev_healing_ = 0u;
    avg_support_ = 0u;
    stdev_support_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_records;
        break;
      }
      
      // optional uint32 records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &records_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_avg_score;
        break;
      }
      
      // optional uint32 avg_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_score_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stdev_score;
        break;
      }
      
      // optional uint32 stdev_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdev_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_score_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_avg_kills;
        break;
      }
      
      // optional uint32 avg_kills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stdev_kills;
        break;
      }
      
      // optional uint32 stdev_kills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdev_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_kills_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_avg_damage;
        break;
      }
      
      // optional uint32 avg_damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_damage_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stdev_damage;
        break;
      }
      
      // optional uint32 stdev_damage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdev_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_damage_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_avg_healing;
        break;
      }
      
      // optional uint32 avg_healing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_healing_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stdev_healing;
        break;
      }
      
      // optional uint32 stdev_healing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdev_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_healing_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_avg_support;
        break;
      }
      
      // optional uint32 avg_support = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_support_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stdev_support;
        break;
      }
      
      // optional uint32 stdev_support = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdev_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_support_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // optional uint32 records = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->records(), output);
  }
  
  // optional uint32 avg_score = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_score(), output);
  }
  
  // optional uint32 stdev_score = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stdev_score(), output);
  }
  
  // optional uint32 avg_kills = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_kills(), output);
  }
  
  // optional uint32 stdev_kills = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stdev_kills(), output);
  }
  
  // optional uint32 avg_damage = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avg_damage(), output);
  }
  
  // optional uint32 stdev_damage = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stdev_damage(), output);
  }
  
  // optional uint32 avg_healing = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avg_healing(), output);
  }
  
  // optional uint32 stdev_healing = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stdev_healing(), output);
  }
  
  // optional uint32 avg_support = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_support(), output);
  }
  
  // optional uint32 stdev_support = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stdev_support(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // optional uint32 records = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->records(), target);
  }
  
  // optional uint32 avg_score = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_score(), target);
  }
  
  // optional uint32 stdev_score = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stdev_score(), target);
  }
  
  // optional uint32 avg_kills = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_kills(), target);
  }
  
  // optional uint32 stdev_kills = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stdev_kills(), target);
  }
  
  // optional uint32 avg_damage = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avg_damage(), target);
  }
  
  // optional uint32 stdev_damage = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stdev_damage(), target);
  }
  
  // optional uint32 avg_healing = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avg_healing(), target);
  }
  
  // optional uint32 stdev_healing = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stdev_healing(), target);
  }
  
  // optional uint32 avg_support = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_support(), target);
  }
  
  // optional uint32 stdev_support = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stdev_support(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional uint32 records = 2;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->records());
    }
    
    // optional uint32 avg_score = 3;
    if (has_avg_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_score());
    }
    
    // optional uint32 stdev_score = 4;
    if (has_stdev_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_score());
    }
    
    // optional uint32 avg_kills = 5;
    if (has_avg_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills());
    }
    
    // optional uint32 stdev_kills = 6;
    if (has_stdev_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_kills());
    }
    
    // optional uint32 avg_damage = 7;
    if (has_avg_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_damage());
    }
    
    // optional uint32 stdev_damage = 8;
    if (has_stdev_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_damage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 avg_healing = 9;
    if (has_avg_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_healing());
    }
    
    // optional uint32 stdev_healing = 10;
    if (has_stdev_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_healing());
    }
    
    // optional uint32 avg_support = 11;
    if (has_avg_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_support());
    }
    
    // optional uint32 stdev_support = 12;
    if (has_stdev_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_support());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rank(from.rank());
    }
    if (from._has_bit(1)) {
      set_records(from.records());
    }
    if (from._has_bit(2)) {
      set_avg_score(from.avg_score());
    }
    if (from._has_bit(3)) {
      set_stdev_score(from.stdev_score());
    }
    if (from._has_bit(4)) {
      set_avg_kills(from.avg_kills());
    }
    if (from._has_bit(5)) {
      set_stdev_kills(from.stdev_kills());
    }
    if (from._has_bit(6)) {
      set_avg_damage(from.avg_damage());
    }
    if (from._has_bit(7)) {
      set_stdev_damage(from.stdev_damage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_avg_healing(from.avg_healing());
    }
    if (from._has_bit(9)) {
      set_stdev_healing(from.stdev_healing());
    }
    if (from._has_bit(10)) {
      set_avg_support(from.avg_support());
    }
    if (from._has_bit(11)) {
      set_stdev_support(from.stdev_support());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::IsInitialized() const {
  
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Swap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(records_, other->records_);
    std::swap(avg_score_, other->avg_score_);
    std::swap(stdev_score_, other->stdev_score_);
    std::swap(avg_kills_, other->avg_kills_);
    std::swap(stdev_kills_, other->stdev_kills_);
    std::swap(avg_damage_, other->avg_damage_);
    std::swap(stdev_damage_, other->stdev_damage_);
    std::swap(avg_healing_, other->avg_healing_);
    std::swap(stdev_healing_, other->stdev_healing_);
    std::swap(avg_support_, other->avg_support_);
    std::swap(stdev_support_, other->stdev_support_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_;
  metadata.reflection = CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGC_DailyCompetitiveStatsRollup_Response::kRankdataFieldNumber;
#endif  // !_MSC_VER

CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::InitAsDefaultInstance() {
}

CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response(const CMsgGC_DailyCompetitiveStatsRollup_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_DailyCompetitiveStatsRollup_Response::~CMsgGC_DailyCompetitiveStatsRollup_Response() {
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_;
}

const CMsgGC_DailyCompetitiveStatsRollup_Response& CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_DailyCompetitiveStatsRollup_Response* CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_ = NULL;

CMsgGC_DailyCompetitiveStatsRollup_Response* CMsgGC_DailyCompetitiveStatsRollup_Response::New() const {
  return new CMsgGC_DailyCompetitiveStatsRollup_Response;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::Clear() {
  rankdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  for (int i = 0; i < this->rankdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  for (int i = 0; i < this->rankdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_DailyCompetitiveStatsRollup_Response::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  total_size += 1 * this->rankdata_size();
  for (int i = 0; i < this->rankdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_DailyCompetitiveStatsRollup_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankdata_.MergeFrom(from.rankdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response::IsInitialized() const {
  
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::Swap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
  if (other != this) {
    rankdata_.Swap(&other->rankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_;
  metadata.reflection = CMsgGC_DailyCompetitiveStatsRollup_Response_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_ReportPlayer_EReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_ReportPlayer_EReason_descriptor_;
}
bool CMsgGC_ReportPlayer_EReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_INVALID;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_CHEATING;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_IDLE;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_HARASSMENT;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_GRIEFING;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_COUNT;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MIN;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MAX;
const int CMsgGC_ReportPlayer::EReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGC_ReportPlayer::kAccountIdTargetFieldNumber;
const int CMsgGC_ReportPlayer::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGC_ReportPlayer::CMsgGC_ReportPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_ReportPlayer::InitAsDefaultInstance() {
}

CMsgGC_ReportPlayer::CMsgGC_ReportPlayer(const CMsgGC_ReportPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_ReportPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_target_ = 0u;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_ReportPlayer::~CMsgGC_ReportPlayer() {
  SharedDtor();
}

void CMsgGC_ReportPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_ReportPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_ReportPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_ReportPlayer_descriptor_;
}

const CMsgGC_ReportPlayer& CMsgGC_ReportPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_ReportPlayer* CMsgGC_ReportPlayer::default_instance_ = NULL;

CMsgGC_ReportPlayer* CMsgGC_ReportPlayer::New() const {
  return new CMsgGC_ReportPlayer;
}

void CMsgGC_ReportPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_target_ = 0u;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_ReportPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_target_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_ReportPlayer_EReason_IsValid(value)) {
            set_reason(static_cast< ::CMsgGC_ReportPlayer_EReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_ReportPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_target(), output);
  }
  
  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_ReportPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_target = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_target(), target);
  }
  
  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_ReportPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_target = 1;
    if (has_account_id_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_target());
    }
    
    // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_ReportPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_ReportPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_ReportPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_ReportPlayer::MergeFrom(const CMsgGC_ReportPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id_target(from.account_id_target());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_ReportPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ReportPlayer::CopyFrom(const CMsgGC_ReportPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ReportPlayer::IsInitialized() const {
  
  return true;
}

void CMsgGC_ReportPlayer::Swap(CMsgGC_ReportPlayer* other) {
  if (other != this) {
    std::swap(account_id_target_, other->account_id_target_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_ReportPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_ReportPlayer_descriptor_;
  metadata.reflection = CMsgGC_ReportPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFMatchResultPlayerStats::kMatchIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kAccountIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kMatchGroupFieldNumber;
const int CSOTFMatchResultPlayerStats::kEndtimeFieldNumber;
const int CSOTFMatchResultPlayerStats::kSeasonIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kStatusFieldNumber;
const int CSOTFMatchResultPlayerStats::kOriginalPartyIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kTeamFieldNumber;
const int CSOTFMatchResultPlayerStats::kScoreFieldNumber;
const int CSOTFMatchResultPlayerStats::kPingFieldNumber;
const int CSOTFMatchResultPlayerStats::kFlagsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDisplayRatingFieldNumber;
const int CSOTFMatchResultPlayerStats::kDisplayRatingChangeFieldNumber;
const int CSOTFMatchResultPlayerStats::kRankFieldNumber;
const int CSOTFMatchResultPlayerStats::kClassesPlayedFieldNumber;
const int CSOTFMatchResultPlayerStats::kKillsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDeathsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDamageFieldNumber;
const int CSOTFMatchResultPlayerStats::kHealingFieldNumber;
const int CSOTFMatchResultPlayerStats::kSupportFieldNumber;
const int CSOTFMatchResultPlayerStats::kScoreMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kKillsMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kDamageMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kHealingMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kSupportMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kMapIndexFieldNumber;
const int CSOTFMatchResultPlayerStats::kWinningTeamFieldNumber;
#endif  // !_MSC_VER

CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFMatchResultPlayerStats::InitAsDefaultInstance() {
}

CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats(const CSOTFMatchResultPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFMatchResultPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  match_group_ = 0;
  endtime_ = 0u;
  season_id_ = 0u;
  status_ = 0u;
  original_party_id_ = 0u;
  team_ = 0u;
  score_ = 0u;
  ping_ = 0u;
  flags_ = 0u;
  display_rating_ = 0u;
  display_rating_change_ = 0;
  rank_ = 0u;
  classes_played_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  damage_ = 0u;
  healing_ = 0u;
  support_ = 0u;
  score_medal_ = 0u;
  kills_medal_ = 0u;
  damage_medal_ = 0u;
  healing_medal_ = 0u;
  support_medal_ = 0u;
  map_index_ = 0u;
  winning_team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFMatchResultPlayerStats::~CSOTFMatchResultPlayerStats() {
  SharedDtor();
}

void CSOTFMatchResultPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFMatchResultPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFMatchResultPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFMatchResultPlayerStats_descriptor_;
}

const CSOTFMatchResultPlayerStats& CSOTFMatchResultPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFMatchResultPlayerStats* CSOTFMatchResultPlayerStats::default_instance_ = NULL;

CSOTFMatchResultPlayerStats* CSOTFMatchResultPlayerStats::New() const {
  return new CSOTFMatchResultPlayerStats;
}

void CSOTFMatchResultPlayerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    match_group_ = 0;
    endtime_ = 0u;
    season_id_ = 0u;
    status_ = 0u;
    original_party_id_ = 0u;
    team_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    score_ = 0u;
    ping_ = 0u;
    flags_ = 0u;
    display_rating_ = 0u;
    display_rating_change_ = 0;
    rank_ = 0u;
    classes_played_ = 0u;
    kills_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    deaths_ = 0u;
    damage_ = 0u;
    healing_ = 0u;
    support_ = 0u;
    score_medal_ = 0u;
    kills_medal_ = 0u;
    damage_medal_ = 0u;
    healing_medal_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    support_medal_ = 0u;
    map_index_ = 0u;
    winning_team_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFMatchResultPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_group;
        break;
      }
      
      // optional int32 match_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_season_id;
        break;
      }
      
      // optional uint32 season_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_original_party_id;
        break;
      }
      
      // optional uint32 original_party_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_party_id_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team;
        break;
      }
      
      // optional uint32 team = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ping;
        break;
      }
      
      // optional uint32 ping = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_display_rating;
        break;
      }
      
      // optional uint32 display_rating = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &display_rating_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_display_rating_change;
        break;
      }
      
      // optional int32 display_rating_change = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_rating_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_rating_change_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_classes_played;
        break;
      }
      
      // optional uint32 classes_played = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classes_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classes_played_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_damage;
        break;
      }
      
      // optional uint32 damage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_healing;
        break;
      }
      
      // optional uint32 healing = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_support;
        break;
      }
      
      // optional uint32 support = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_score_medal;
        break;
      }
      
      // optional uint32 score_medal = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_medal_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_kills_medal;
        break;
      }
      
      // optional uint32 kills_medal = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_medal_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_damage_medal;
        break;
      }
      
      // optional uint32 damage_medal = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_medal_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_healing_medal;
        break;
      }
      
      // optional uint32 healing_medal = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healing_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_medal_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_support_medal;
        break;
      }
      
      // optional uint32 support_medal = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_medal_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_map_index;
        break;
      }
      
      // optional uint32 map_index = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_index_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_winning_team;
        break;
      }
      
      // optional uint32 winning_team = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winning_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_team_)));
          _set_bit(26);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFMatchResultPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional int32 match_group = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->match_group(), output);
  }
  
  // optional uint32 endtime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }
  
  // optional uint32 season_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->season_id(), output);
  }
  
  // optional uint32 status = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }
  
  // optional uint32 original_party_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->original_party_id(), output);
  }
  
  // optional uint32 team = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team(), output);
  }
  
  // optional uint32 score = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }
  
  // optional uint32 ping = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping(), output);
  }
  
  // optional uint32 flags = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }
  
  // optional uint32 display_rating = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->display_rating(), output);
  }
  
  // optional int32 display_rating_change = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->display_rating_change(), output);
  }
  
  // optional uint32 rank = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rank(), output);
  }
  
  // optional uint32 classes_played = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->classes_played(), output);
  }
  
  // optional uint32 kills = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->kills(), output);
  }
  
  // optional uint32 deaths = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->deaths(), output);
  }
  
  // optional uint32 damage = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->damage(), output);
  }
  
  // optional uint32 healing = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->healing(), output);
  }
  
  // optional uint32 support = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support(), output);
  }
  
  // optional uint32 score_medal = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->score_medal(), output);
  }
  
  // optional uint32 kills_medal = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->kills_medal(), output);
  }
  
  // optional uint32 damage_medal = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage_medal(), output);
  }
  
  // optional uint32 healing_medal = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->healing_medal(), output);
  }
  
  // optional uint32 support_medal = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->support_medal(), output);
  }
  
  // optional uint32 map_index = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->map_index(), output);
  }
  
  // optional uint32 winning_team = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->winning_team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFMatchResultPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional int32 match_group = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->match_group(), target);
  }
  
  // optional uint32 endtime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }
  
  // optional uint32 season_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->season_id(), target);
  }
  
  // optional uint32 status = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }
  
  // optional uint32 original_party_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->original_party_id(), target);
  }
  
  // optional uint32 team = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team(), target);
  }
  
  // optional uint32 score = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }
  
  // optional uint32 ping = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ping(), target);
  }
  
  // optional uint32 flags = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }
  
  // optional uint32 display_rating = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->display_rating(), target);
  }
  
  // optional int32 display_rating_change = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->display_rating_change(), target);
  }
  
  // optional uint32 rank = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rank(), target);
  }
  
  // optional uint32 classes_played = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->classes_played(), target);
  }
  
  // optional uint32 kills = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->kills(), target);
  }
  
  // optional uint32 deaths = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->deaths(), target);
  }
  
  // optional uint32 damage = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->damage(), target);
  }
  
  // optional uint32 healing = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->healing(), target);
  }
  
  // optional uint32 support = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support(), target);
  }
  
  // optional uint32 score_medal = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->score_medal(), target);
  }
  
  // optional uint32 kills_medal = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->kills_medal(), target);
  }
  
  // optional uint32 damage_medal = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage_medal(), target);
  }
  
  // optional uint32 healing_medal = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->healing_medal(), target);
  }
  
  // optional uint32 support_medal = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->support_medal(), target);
  }
  
  // optional uint32 map_index = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->map_index(), target);
  }
  
  // optional uint32 winning_team = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->winning_team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFMatchResultPlayerStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional int32 match_group = 3;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }
    
    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
    // optional uint32 season_id = 5;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }
    
    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 original_party_id = 7;
    if (has_original_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_party_id());
    }
    
    // optional uint32 team = 8;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 ping = 10;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }
    
    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional uint32 display_rating = 12;
    if (has_display_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->display_rating());
    }
    
    // optional int32 display_rating_change = 13;
    if (has_display_rating_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_rating_change());
    }
    
    // optional uint32 rank = 14;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional uint32 classes_played = 15;
    if (has_classes_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classes_played());
    }
    
    // optional uint32 kills = 16;
    if (has_kills()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 deaths = 17;
    if (has_deaths()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 damage = 18;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }
    
    // optional uint32 healing = 19;
    if (has_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }
    
    // optional uint32 support = 20;
    if (has_support()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }
    
    // optional uint32 score_medal = 21;
    if (has_score_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_medal());
    }
    
    // optional uint32 kills_medal = 22;
    if (has_kills_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_medal());
    }
    
    // optional uint32 damage_medal = 23;
    if (has_damage_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_medal());
    }
    
    // optional uint32 healing_medal = 24;
    if (has_healing_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_medal());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 support_medal = 25;
    if (has_support_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_medal());
    }
    
    // optional uint32 map_index = 26;
    if (has_map_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_index());
    }
    
    // optional uint32 winning_team = 27;
    if (has_winning_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFMatchResultPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFMatchResultPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFMatchResultPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFMatchResultPlayerStats::MergeFrom(const CSOTFMatchResultPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_match_id(from.match_id());
    }
    if (from._has_bit(1)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(2)) {
      set_match_group(from.match_group());
    }
    if (from._has_bit(3)) {
      set_endtime(from.endtime());
    }
    if (from._has_bit(4)) {
      set_season_id(from.season_id());
    }
    if (from._has_bit(5)) {
      set_status(from.status());
    }
    if (from._has_bit(6)) {
      set_original_party_id(from.original_party_id());
    }
    if (from._has_bit(7)) {
      set_team(from.team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_score(from.score());
    }
    if (from._has_bit(9)) {
      set_ping(from.ping());
    }
    if (from._has_bit(10)) {
      set_flags(from.flags());
    }
    if (from._has_bit(11)) {
      set_display_rating(from.display_rating());
    }
    if (from._has_bit(12)) {
      set_display_rating_change(from.display_rating_change());
    }
    if (from._has_bit(13)) {
      set_rank(from.rank());
    }
    if (from._has_bit(14)) {
      set_classes_played(from.classes_played());
    }
    if (from._has_bit(15)) {
      set_kills(from.kills());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_deaths(from.deaths());
    }
    if (from._has_bit(17)) {
      set_damage(from.damage());
    }
    if (from._has_bit(18)) {
      set_healing(from.healing());
    }
    if (from._has_bit(19)) {
      set_support(from.support());
    }
    if (from._has_bit(20)) {
      set_score_medal(from.score_medal());
    }
    if (from._has_bit(21)) {
      set_kills_medal(from.kills_medal());
    }
    if (from._has_bit(22)) {
      set_damage_medal(from.damage_medal());
    }
    if (from._has_bit(23)) {
      set_healing_medal(from.healing_medal());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_support_medal(from.support_medal());
    }
    if (from._has_bit(25)) {
      set_map_index(from.map_index());
    }
    if (from._has_bit(26)) {
      set_winning_team(from.winning_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFMatchResultPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMatchResultPlayerStats::CopyFrom(const CSOTFMatchResultPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMatchResultPlayerStats::IsInitialized() const {
  
  return true;
}

void CSOTFMatchResultPlayerStats::Swap(CSOTFMatchResultPlayerStats* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(match_group_, other->match_group_);
    std::swap(endtime_, other->endtime_);
    std::swap(season_id_, other->season_id_);
    std::swap(status_, other->status_);
    std::swap(original_party_id_, other->original_party_id_);
    std::swap(team_, other->team_);
    std::swap(score_, other->score_);
    std::swap(ping_, other->ping_);
    std::swap(flags_, other->flags_);
    std::swap(display_rating_, other->display_rating_);
    std::swap(display_rating_change_, other->display_rating_change_);
    std::swap(rank_, other->rank_);
    std::swap(classes_played_, other->classes_played_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(damage_, other->damage_);
    std::swap(healing_, other->healing_);
    std::swap(support_, other->support_);
    std::swap(score_medal_, other->score_medal_);
    std::swap(kills_medal_, other->kills_medal_);
    std::swap(damage_medal_, other->damage_medal_);
    std::swap(healing_medal_, other->healing_medal_);
    std::swap(support_medal_, other->support_medal_);
    std::swap(map_index_, other->map_index_);
    std::swap(winning_team_, other->winning_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFMatchResultPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFMatchResultPlayerStats_descriptor_;
  metadata.reflection = CSOTFMatchResultPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestMatchMakerStats::InitAsDefaultInstance() {
}

CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats(const CMsgGCRequestMatchMakerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestMatchMakerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestMatchMakerStats::~CMsgGCRequestMatchMakerStats() {
  SharedDtor();
}

void CMsgGCRequestMatchMakerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestMatchMakerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestMatchMakerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestMatchMakerStats_descriptor_;
}

const CMsgGCRequestMatchMakerStats& CMsgGCRequestMatchMakerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestMatchMakerStats* CMsgGCRequestMatchMakerStats::default_instance_ = NULL;

CMsgGCRequestMatchMakerStats* CMsgGCRequestMatchMakerStats::New() const {
  return new CMsgGCRequestMatchMakerStats;
}

void CMsgGCRequestMatchMakerStats::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestMatchMakerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCRequestMatchMakerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestMatchMakerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestMatchMakerStats::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestMatchMakerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestMatchMakerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const CMsgGCRequestMatchMakerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestMatchMakerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestMatchMakerStats::CopyFrom(const CMsgGCRequestMatchMakerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestMatchMakerStats::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestMatchMakerStats::Swap(CMsgGCRequestMatchMakerStats* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestMatchMakerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestMatchMakerStats_descriptor_;
  metadata.reflection = CMsgGCRequestMatchMakerStats_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCDataCenterPopulation::_default_name_;
#ifndef _MSC_VER
const int CMsgGCDataCenterPopulation::kNameFieldNumber;
const int CMsgGCDataCenterPopulation::kHealthRatioFieldNumber;
#endif  // !_MSC_VER

CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCDataCenterPopulation::InitAsDefaultInstance() {
}

CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation(const CMsgGCDataCenterPopulation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCDataCenterPopulation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  health_ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCDataCenterPopulation::~CMsgGCDataCenterPopulation() {
  SharedDtor();
}

void CMsgGCDataCenterPopulation::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCDataCenterPopulation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPopulation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCDataCenterPopulation_descriptor_;
}

const CMsgGCDataCenterPopulation& CMsgGCDataCenterPopulation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCDataCenterPopulation* CMsgGCDataCenterPopulation::default_instance_ = NULL;

CMsgGCDataCenterPopulation* CMsgGCDataCenterPopulation::New() const {
  return new CMsgGCDataCenterPopulation;
}

void CMsgGCDataCenterPopulation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    health_ratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCDataCenterPopulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_health_ratio;
        break;
      }
      
      // optional float health_ratio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_health_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_ratio_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCDataCenterPopulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional float health_ratio = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health_ratio(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCDataCenterPopulation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional float health_ratio = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health_ratio(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCDataCenterPopulation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional float health_ratio = 2;
    if (has_health_ratio()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPopulation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCDataCenterPopulation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCDataCenterPopulation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPopulation::MergeFrom(const CMsgGCDataCenterPopulation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_health_ratio(from.health_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCDataCenterPopulation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPopulation::CopyFrom(const CMsgGCDataCenterPopulation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPopulation::IsInitialized() const {
  
  return true;
}

void CMsgGCDataCenterPopulation::Swap(CMsgGCDataCenterPopulation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(health_ratio_, other->health_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCDataCenterPopulation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCDataCenterPopulation_descriptor_;
  metadata.reflection = CMsgGCDataCenterPopulation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCMatchGroupDataCenterPopulation::kDataCenterPopulationFieldNumber;
#endif  // !_MSC_VER

CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCMatchGroupDataCenterPopulation::InitAsDefaultInstance() {
}

CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation(const CMsgGCMatchGroupDataCenterPopulation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCMatchGroupDataCenterPopulation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMatchGroupDataCenterPopulation::~CMsgGCMatchGroupDataCenterPopulation() {
  SharedDtor();
}

void CMsgGCMatchGroupDataCenterPopulation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCMatchGroupDataCenterPopulation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchGroupDataCenterPopulation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMatchGroupDataCenterPopulation_descriptor_;
}

const CMsgGCMatchGroupDataCenterPopulation& CMsgGCMatchGroupDataCenterPopulation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::default_instance_ = NULL;

CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::New() const {
  return new CMsgGCMatchGroupDataCenterPopulation;
}

void CMsgGCMatchGroupDataCenterPopulation::Clear() {
  data_center_population_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCMatchGroupDataCenterPopulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_center_population:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_center_population()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_center_population;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCMatchGroupDataCenterPopulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  for (int i = 0; i < this->data_center_population_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_center_population(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCMatchGroupDataCenterPopulation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  for (int i = 0; i < this->data_center_population_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_center_population(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCMatchGroupDataCenterPopulation::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  total_size += 1 * this->data_center_population_size();
  for (int i = 0; i < this->data_center_population_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_center_population(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCMatchGroupDataCenterPopulation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCMatchGroupDataCenterPopulation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_center_population_.MergeFrom(from.data_center_population_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchGroupDataCenterPopulation::IsInitialized() const {
  
  return true;
}

void CMsgGCMatchGroupDataCenterPopulation::Swap(CMsgGCMatchGroupDataCenterPopulation* other) {
  if (other != this) {
    data_center_population_.Swap(&other->data_center_population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCMatchGroupDataCenterPopulation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMatchGroupDataCenterPopulation_descriptor_;
  metadata.reflection = CMsgGCMatchGroupDataCenterPopulation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCMatchMakerStatsResponse::kMapCountFieldNumber;
const int CMsgGCMatchMakerStatsResponse::kMatchgroupDataCenterPopulationFieldNumber;
#endif  // !_MSC_VER

CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCMatchMakerStatsResponse::InitAsDefaultInstance() {
}

CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse(const CMsgGCMatchMakerStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCMatchMakerStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMatchMakerStatsResponse::~CMsgGCMatchMakerStatsResponse() {
  SharedDtor();
}

void CMsgGCMatchMakerStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCMatchMakerStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchMakerStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMatchMakerStatsResponse_descriptor_;
}

const CMsgGCMatchMakerStatsResponse& CMsgGCMatchMakerStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCMatchMakerStatsResponse* CMsgGCMatchMakerStatsResponse::default_instance_ = NULL;

CMsgGCMatchMakerStatsResponse* CMsgGCMatchMakerStatsResponse::New() const {
  return new CMsgGCMatchMakerStatsResponse;
}

void CMsgGCMatchMakerStatsResponse::Clear() {
  map_count_.Clear();
  matchgroup_data_center_population_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCMatchMakerStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 map_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_map_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_map_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_map_count;
        if (input->ExpectTag(18)) goto parse_matchgroup_data_center_population;
        break;
      }
      
      // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchgroup_data_center_population:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchgroup_data_center_population()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchgroup_data_center_population;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCMatchMakerStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 map_count = 1;
  for (int i = 0; i < this->map_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->map_count(i), output);
  }
  
  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  for (int i = 0; i < this->matchgroup_data_center_population_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchgroup_data_center_population(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCMatchMakerStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 map_count = 1;
  for (int i = 0; i < this->map_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->map_count(i), target);
  }
  
  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  for (int i = 0; i < this->matchgroup_data_center_population_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchgroup_data_center_population(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCMatchMakerStatsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 map_count = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->map_count(i));
    }
    total_size += 1 * this->map_count_size() + data_size;
  }
  
  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  total_size += 1 * this->matchgroup_data_center_population_size();
  for (int i = 0; i < this->matchgroup_data_center_population_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchgroup_data_center_population(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCMatchMakerStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCMatchMakerStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const CMsgGCMatchMakerStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_count_.MergeFrom(from.map_count_);
  matchgroup_data_center_population_.MergeFrom(from.matchgroup_data_center_population_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const CMsgGCMatchMakerStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchMakerStatsResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCMatchMakerStatsResponse::Swap(CMsgGCMatchMakerStatsResponse* other) {
  if (other != this) {
    map_count_.Swap(&other->map_count_);
    matchgroup_data_center_population_.Swap(&other->matchgroup_data_center_population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCMatchMakerStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMatchMakerStatsResponse_descriptor_;
  metadata.reflection = CMsgGCMatchMakerStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCMatchHistoryLoad::InitAsDefaultInstance() {
}

CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad(const CMsgGCMatchHistoryLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCMatchHistoryLoad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMatchHistoryLoad::~CMsgGCMatchHistoryLoad() {
  SharedDtor();
}

void CMsgGCMatchHistoryLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCMatchHistoryLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchHistoryLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMatchHistoryLoad_descriptor_;
}

const CMsgGCMatchHistoryLoad& CMsgGCMatchHistoryLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCMatchHistoryLoad* CMsgGCMatchHistoryLoad::default_instance_ = NULL;

CMsgGCMatchHistoryLoad* CMsgGCMatchHistoryLoad::New() const {
  return new CMsgGCMatchHistoryLoad;
}

void CMsgGCMatchHistoryLoad::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCMatchHistoryLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCMatchHistoryLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCMatchHistoryLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCMatchHistoryLoad::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchHistoryLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCMatchHistoryLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCMatchHistoryLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMatchHistoryLoad::MergeFrom(const CMsgGCMatchHistoryLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCMatchHistoryLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchHistoryLoad::CopyFrom(const CMsgGCMatchHistoryLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchHistoryLoad::IsInitialized() const {
  
  return true;
}

void CMsgGCMatchHistoryLoad::Swap(CMsgGCMatchHistoryLoad* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCMatchHistoryLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMatchHistoryLoad_descriptor_;
  metadata.reflection = CMsgGCMatchHistoryLoad_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCDataCenterPing_Update_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCDataCenterPing_Update_Status_descriptor_;
}
bool CMsgGCDataCenterPing_Update_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Invalid;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Normal;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Unreachable;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::FallbackToDCPing;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MIN;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MAX;
const int CMsgGCDataCenterPing_Update::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CMsgGCDataCenterPing_Update_PingEntry::_default_name_;
#ifndef _MSC_VER
const int CMsgGCDataCenterPing_Update_PingEntry::kNameFieldNumber;
const int CMsgGCDataCenterPing_Update_PingEntry::kPingFieldNumber;
const int CMsgGCDataCenterPing_Update_PingEntry::kPingStatusFieldNumber;
#endif  // !_MSC_VER

CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCDataCenterPing_Update_PingEntry::InitAsDefaultInstance() {
}

CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry(const CMsgGCDataCenterPing_Update_PingEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ping_ = 0u;
  ping_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCDataCenterPing_Update_PingEntry::~CMsgGCDataCenterPing_Update_PingEntry() {
  SharedDtor();
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update_PingEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCDataCenterPing_Update_PingEntry_descriptor_;
}

const CMsgGCDataCenterPing_Update_PingEntry& CMsgGCDataCenterPing_Update_PingEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update_PingEntry::default_instance_ = NULL;

CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update_PingEntry::New() const {
  return new CMsgGCDataCenterPing_Update_PingEntry;
}

void CMsgGCDataCenterPing_Update_PingEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    ping_ = 0u;
    ping_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCDataCenterPing_Update_PingEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping;
        break;
      }
      
      // optional uint32 ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ping_status;
        break;
      }
      
      // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCDataCenterPing_Update_Status_IsValid(value)) {
            set_ping_status(static_cast< ::CMsgGCDataCenterPing_Update_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCDataCenterPing_Update_PingEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 ping = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }
  
  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ping_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCDataCenterPing_Update_PingEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 ping = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }
  
  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ping_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCDataCenterPing_Update_PingEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }
    
    // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
    if (has_ping_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ping_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update_PingEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCDataCenterPing_Update_PingEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_ping(from.ping());
    }
    if (from._has_bit(2)) {
      set_ping_status(from.ping_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update_PingEntry::IsInitialized() const {
  
  return true;
}

void CMsgGCDataCenterPing_Update_PingEntry::Swap(CMsgGCDataCenterPing_Update_PingEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ping_, other->ping_);
    std::swap(ping_status_, other->ping_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCDataCenterPing_Update_PingEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCDataCenterPing_Update_PingEntry_descriptor_;
  metadata.reflection = CMsgGCDataCenterPing_Update_PingEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCDataCenterPing_Update::kPingdataFieldNumber;
#endif  // !_MSC_VER

CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCDataCenterPing_Update::InitAsDefaultInstance() {
}

CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update(const CMsgGCDataCenterPing_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCDataCenterPing_Update::~CMsgGCDataCenterPing_Update() {
  SharedDtor();
}

void CMsgGCDataCenterPing_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCDataCenterPing_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCDataCenterPing_Update_descriptor_;
}

const CMsgGCDataCenterPing_Update& CMsgGCDataCenterPing_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCDataCenterPing_Update* CMsgGCDataCenterPing_Update::default_instance_ = NULL;

CMsgGCDataCenterPing_Update* CMsgGCDataCenterPing_Update::New() const {
  return new CMsgGCDataCenterPing_Update;
}

void CMsgGCDataCenterPing_Update::Clear() {
  pingdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCDataCenterPing_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pingdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pingdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCDataCenterPing_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  for (int i = 0; i < this->pingdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pingdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCDataCenterPing_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  for (int i = 0; i < this->pingdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pingdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCDataCenterPing_Update::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  total_size += 1 * this->pingdata_size();
  for (int i = 0; i < this->pingdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pingdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPing_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCDataCenterPing_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update::MergeFrom(const CMsgGCDataCenterPing_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  pingdata_.MergeFrom(from.pingdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCDataCenterPing_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update::CopyFrom(const CMsgGCDataCenterPing_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update::IsInitialized() const {
  
  return true;
}

void CMsgGCDataCenterPing_Update::Swap(CMsgGCDataCenterPing_Update* other) {
  if (other != this) {
    pingdata_.Swap(&other->pingdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCDataCenterPing_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCDataCenterPing_Update_descriptor_;
  metadata.reflection = CMsgGCDataCenterPing_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_KickPlayerFromLobby::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_KickPlayerFromLobby::InitAsDefaultInstance() {
}

CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby(const CMsgGC_KickPlayerFromLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_KickPlayerFromLobby::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_KickPlayerFromLobby::~CMsgGC_KickPlayerFromLobby() {
  SharedDtor();
}

void CMsgGC_KickPlayerFromLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_KickPlayerFromLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_KickPlayerFromLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_KickPlayerFromLobby_descriptor_;
}

const CMsgGC_KickPlayerFromLobby& CMsgGC_KickPlayerFromLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_KickPlayerFromLobby* CMsgGC_KickPlayerFromLobby::default_instance_ = NULL;

CMsgGC_KickPlayerFromLobby* CMsgGC_KickPlayerFromLobby::New() const {
  return new CMsgGC_KickPlayerFromLobby;
}

void CMsgGC_KickPlayerFromLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_KickPlayerFromLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 targetID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_KickPlayerFromLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 targetID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_KickPlayerFromLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 targetID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_KickPlayerFromLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 targetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_KickPlayerFromLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_KickPlayerFromLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const CMsgGC_KickPlayerFromLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const CMsgGC_KickPlayerFromLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_KickPlayerFromLobby::IsInitialized() const {
  
  return true;
}

void CMsgGC_KickPlayerFromLobby::Swap(CMsgGC_KickPlayerFromLobby* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_KickPlayerFromLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_KickPlayerFromLobby_descriptor_;
  metadata.reflection = CMsgGC_KickPlayerFromLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCSurveyRequest::kQuestionTypeFieldNumber;
const int CMsgGCSurveyRequest::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCSurveyRequest::CMsgGCSurveyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCSurveyRequest::InitAsDefaultInstance() {
}

CMsgGCSurveyRequest::CMsgGCSurveyRequest(const CMsgGCSurveyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCSurveyRequest::SharedCtor() {
  _cached_size_ = 0;
  question_type_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCSurveyRequest::~CMsgGCSurveyRequest() {
  SharedDtor();
}

void CMsgGCSurveyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCSurveyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCSurveyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCSurveyRequest_descriptor_;
}

const CMsgGCSurveyRequest& CMsgGCSurveyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCSurveyRequest* CMsgGCSurveyRequest::default_instance_ = NULL;

CMsgGCSurveyRequest* CMsgGCSurveyRequest::New() const {
  return new CMsgGCSurveyRequest;
}

void CMsgGCSurveyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    question_type_ = 0;
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCSurveyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SurveyQuestionType_IsValid(value)) {
            set_question_type(static_cast< SurveyQuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCSurveyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->question_type(), output);
  }
  
  // optional uint64 match_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCSurveyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->question_type(), target);
  }
  
  // optional uint64 match_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCSurveyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->question_type());
    }
    
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCSurveyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCSurveyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCSurveyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCSurveyRequest::MergeFrom(const CMsgGCSurveyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_question_type(from.question_type());
    }
    if (from._has_bit(1)) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCSurveyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyRequest::CopyFrom(const CMsgGCSurveyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCSurveyRequest::Swap(CMsgGCSurveyRequest* other) {
  if (other != this) {
    std::swap(question_type_, other->question_type_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCSurveyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCSurveyRequest_descriptor_;
  metadata.reflection = CMsgGCSurveyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCSurveyResponse::kQuestionTypeFieldNumber;
const int CMsgGCSurveyResponse::kMatchIdFieldNumber;
const int CMsgGCSurveyResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

CMsgGCSurveyResponse::CMsgGCSurveyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCSurveyResponse::InitAsDefaultInstance() {
}

CMsgGCSurveyResponse::CMsgGCSurveyResponse(const CMsgGCSurveyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  question_type_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  response_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCSurveyResponse::~CMsgGCSurveyResponse() {
  SharedDtor();
}

void CMsgGCSurveyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCSurveyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCSurveyResponse_descriptor_;
}

const CMsgGCSurveyResponse& CMsgGCSurveyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCSurveyResponse* CMsgGCSurveyResponse::default_instance_ = NULL;

CMsgGCSurveyResponse* CMsgGCSurveyResponse::New() const {
  return new CMsgGCSurveyResponse;
}

void CMsgGCSurveyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    question_type_ = 0;
    match_id_ = GOOGLE_ULONGLONG(0);
    response_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SurveyQuestionType_IsValid(value)) {
            set_question_type(static_cast< SurveyQuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_response;
        break;
      }
      
      // optional int32 response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->question_type(), output);
  }
  
  // optional uint64 match_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }
  
  // optional int32 response = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCSurveyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->question_type(), target);
  }
  
  // optional uint64 match_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }
  
  // optional int32 response = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCSurveyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->question_type());
    }
    
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional int32 response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCSurveyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCSurveyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCSurveyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCSurveyResponse::MergeFrom(const CMsgGCSurveyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_question_type(from.question_type());
    }
    if (from._has_bit(1)) {
      set_match_id(from.match_id());
    }
    if (from._has_bit(2)) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCSurveyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyResponse::CopyFrom(const CMsgGCSurveyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCSurveyResponse::Swap(CMsgGCSurveyResponse* other) {
  if (other != this) {
    std::swap(question_type_, other->question_type_);
    std::swap(match_id_, other->match_id_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCSurveyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCSurveyResponse_descriptor_;
  metadata.reflection = CMsgGCSurveyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOQuestMapNode::kAccountIdFieldNumber;
const int CSOQuestMapNode::kDefindexFieldNumber;
const int CSOQuestMapNode::kNodeIdFieldNumber;
const int CSOQuestMapNode::kStar0EarnedFieldNumber;
const int CSOQuestMapNode::kStar1EarnedFieldNumber;
const int CSOQuestMapNode::kStar2EarnedFieldNumber;
const int CSOQuestMapNode::kLootClaimedFieldNumber;
const int CSOQuestMapNode::kSelectedQuestDefFieldNumber;
const int CSOQuestMapNode::kMapCycleFieldNumber;
#endif  // !_MSC_VER

CSOQuestMapNode::CSOQuestMapNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOQuestMapNode::InitAsDefaultInstance() {
}

CSOQuestMapNode::CSOQuestMapNode(const CSOQuestMapNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOQuestMapNode::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  defindex_ = 0u;
  node_id_ = 0u;
  star_0_earned_ = false;
  star_1_earned_ = false;
  star_2_earned_ = false;
  loot_claimed_ = false;
  selected_quest_def_ = 0u;
  map_cycle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOQuestMapNode::~CSOQuestMapNode() {
  SharedDtor();
}

void CSOQuestMapNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOQuestMapNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOQuestMapNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOQuestMapNode_descriptor_;
}

const CSOQuestMapNode& CSOQuestMapNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOQuestMapNode* CSOQuestMapNode::default_instance_ = NULL;

CSOQuestMapNode* CSOQuestMapNode::New() const {
  return new CSOQuestMapNode;
}

void CSOQuestMapNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    defindex_ = 0u;
    node_id_ = 0u;
    star_0_earned_ = false;
    star_1_earned_ = false;
    star_2_earned_ = false;
    loot_claimed_ = false;
    selected_quest_def_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_cycle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOQuestMapNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defindex;
        break;
      }
      
      // optional uint32 defindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_node_id;
        break;
      }
      
      // optional uint32 node_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_0_earned;
        break;
      }
      
      // optional bool star_0_earned = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_0_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_0_earned_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_star_1_earned;
        break;
      }
      
      // optional bool star_1_earned = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_1_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_1_earned_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_star_2_earned;
        break;
      }
      
      // optional bool star_2_earned = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_2_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_2_earned_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loot_claimed;
        break;
      }
      
      // optional bool loot_claimed = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loot_claimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loot_claimed_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_selected_quest_def;
        break;
      }
      
      // optional uint32 selected_quest_def = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected_quest_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_quest_def_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_map_cycle;
        break;
      }
      
      // optional uint32 map_cycle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_cycle_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOQuestMapNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 defindex = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defindex(), output);
  }
  
  // optional uint32 node_id = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->node_id(), output);
  }
  
  // optional bool star_0_earned = 6 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->star_0_earned(), output);
  }
  
  // optional bool star_1_earned = 7 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->star_1_earned(), output);
  }
  
  // optional bool star_2_earned = 8 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->star_2_earned(), output);
  }
  
  // optional bool loot_claimed = 9 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->loot_claimed(), output);
  }
  
  // optional uint32 selected_quest_def = 10 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->selected_quest_def(), output);
  }
  
  // optional uint32 map_cycle = 11;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->map_cycle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOQuestMapNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 defindex = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defindex(), target);
  }
  
  // optional uint32 node_id = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->node_id(), target);
  }
  
  // optional bool star_0_earned = 6 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->star_0_earned(), target);
  }
  
  // optional bool star_1_earned = 7 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->star_1_earned(), target);
  }
  
  // optional bool star_2_earned = 8 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->star_2_earned(), target);
  }
  
  // optional bool loot_claimed = 9 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->loot_claimed(), target);
  }
  
  // optional uint32 selected_quest_def = 10 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->selected_quest_def(), target);
  }
  
  // optional uint32 map_cycle = 11;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->map_cycle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOQuestMapNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 defindex = 3;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }
    
    // optional uint32 node_id = 4;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }
    
    // optional bool star_0_earned = 6 [default = false];
    if (has_star_0_earned()) {
      total_size += 1 + 1;
    }
    
    // optional bool star_1_earned = 7 [default = false];
    if (has_star_1_earned()) {
      total_size += 1 + 1;
    }
    
    // optional bool star_2_earned = 8 [default = false];
    if (has_star_2_earned()) {
      total_size += 1 + 1;
    }
    
    // optional bool loot_claimed = 9 [default = false];
    if (has_loot_claimed()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 selected_quest_def = 10 [default = 0];
    if (has_selected_quest_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_quest_def());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 map_cycle = 11;
    if (has_map_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_cycle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOQuestMapNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOQuestMapNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOQuestMapNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOQuestMapNode::MergeFrom(const CSOQuestMapNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_defindex(from.defindex());
    }
    if (from._has_bit(2)) {
      set_node_id(from.node_id());
    }
    if (from._has_bit(3)) {
      set_star_0_earned(from.star_0_earned());
    }
    if (from._has_bit(4)) {
      set_star_1_earned(from.star_1_earned());
    }
    if (from._has_bit(5)) {
      set_star_2_earned(from.star_2_earned());
    }
    if (from._has_bit(6)) {
      set_loot_claimed(from.loot_claimed());
    }
    if (from._has_bit(7)) {
      set_selected_quest_def(from.selected_quest_def());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_map_cycle(from.map_cycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOQuestMapNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestMapNode::CopyFrom(const CSOQuestMapNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestMapNode::IsInitialized() const {
  
  return true;
}

void CSOQuestMapNode::Swap(CSOQuestMapNode* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(defindex_, other->defindex_);
    std::swap(node_id_, other->node_id_);
    std::swap(star_0_earned_, other->star_0_earned_);
    std::swap(star_1_earned_, other->star_1_earned_);
    std::swap(star_2_earned_, other->star_2_earned_);
    std::swap(loot_claimed_, other->loot_claimed_);
    std::swap(selected_quest_def_, other->selected_quest_def_);
    std::swap(map_cycle_, other->map_cycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOQuestMapNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOQuestMapNode_descriptor_;
  metadata.reflection = CSOQuestMapNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOQuest::kAccountIdFieldNumber;
const int CSOQuest::kQuestIdFieldNumber;
const int CSOQuest::kDefindexFieldNumber;
const int CSOQuest::kActiveFieldNumber;
const int CSOQuest::kPoints0FieldNumber;
const int CSOQuest::kPoints1FieldNumber;
const int CSOQuest::kPoints2FieldNumber;
const int CSOQuest::kQuestMapNodeSourceIdFieldNumber;
const int CSOQuest::kMapCycleFieldNumber;
#endif  // !_MSC_VER

CSOQuest::CSOQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOQuest::InitAsDefaultInstance() {
}

CSOQuest::CSOQuest(const CSOQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOQuest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  quest_id_ = GOOGLE_ULONGLONG(0);
  defindex_ = 0u;
  active_ = false;
  points_0_ = 0u;
  points_1_ = 0u;
  points_2_ = 0u;
  quest_map_node_source_id_ = 0u;
  map_cycle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOQuest::~CSOQuest() {
  SharedDtor();
}

void CSOQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOQuest_descriptor_;
}

const CSOQuest& CSOQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOQuest* CSOQuest::default_instance_ = NULL;

CSOQuest* CSOQuest::New() const {
  return new CSOQuest;
}

void CSOQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    quest_id_ = GOOGLE_ULONGLONG(0);
    defindex_ = 0u;
    active_ = false;
    points_0_ = 0u;
    points_1_ = 0u;
    points_2_ = 0u;
    quest_map_node_source_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_cycle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }
      
      // optional uint64 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defindex;
        break;
      }
      
      // optional uint32 defindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }
      
      // optional bool active = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_points_0;
        break;
      }
      
      // optional uint32 points_0 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_0_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_points_1;
        break;
      }
      
      // optional uint32 points_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_1_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_points_2;
        break;
      }
      
      // optional uint32 points_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_2_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quest_map_node_source_id;
        break;
      }
      
      // optional uint32 quest_map_node_source_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_map_node_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_map_node_source_id_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_map_cycle;
        break;
      }
      
      // optional uint32 map_cycle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_cycle_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint64 quest_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quest_id(), output);
  }
  
  // optional uint32 defindex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defindex(), output);
  }
  
  // optional bool active = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }
  
  // optional uint32 points_0 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->points_0(), output);
  }
  
  // optional uint32 points_1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->points_1(), output);
  }
  
  // optional uint32 points_2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->points_2(), output);
  }
  
  // optional uint32 quest_map_node_source_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quest_map_node_source_id(), output);
  }
  
  // optional uint32 map_cycle = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->map_cycle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint64 quest_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quest_id(), target);
  }
  
  // optional uint32 defindex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defindex(), target);
  }
  
  // optional bool active = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }
  
  // optional uint32 points_0 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->points_0(), target);
  }
  
  // optional uint32 points_1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->points_1(), target);
  }
  
  // optional uint32 points_2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->points_2(), target);
  }
  
  // optional uint32 quest_map_node_source_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quest_map_node_source_id(), target);
  }
  
  // optional uint32 map_cycle = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->map_cycle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint64 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }
    
    // optional uint32 defindex = 3;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }
    
    // optional bool active = 4 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 points_0 = 5;
    if (has_points_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_0());
    }
    
    // optional uint32 points_1 = 6;
    if (has_points_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_1());
    }
    
    // optional uint32 points_2 = 7;
    if (has_points_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_2());
    }
    
    // optional uint32 quest_map_node_source_id = 8;
    if (has_quest_map_node_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_map_node_source_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 map_cycle = 9;
    if (has_map_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_cycle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOQuest::MergeFrom(const CSOQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_quest_id(from.quest_id());
    }
    if (from._has_bit(2)) {
      set_defindex(from.defindex());
    }
    if (from._has_bit(3)) {
      set_active(from.active());
    }
    if (from._has_bit(4)) {
      set_points_0(from.points_0());
    }
    if (from._has_bit(5)) {
      set_points_1(from.points_1());
    }
    if (from._has_bit(6)) {
      set_points_2(from.points_2());
    }
    if (from._has_bit(7)) {
      set_quest_map_node_source_id(from.quest_map_node_source_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_map_cycle(from.map_cycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuest::CopyFrom(const CSOQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuest::IsInitialized() const {
  
  return true;
}

void CSOQuest::Swap(CSOQuest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(defindex_, other->defindex_);
    std::swap(active_, other->active_);
    std::swap(points_0_, other->points_0_);
    std::swap(points_1_, other->points_1_);
    std::swap(points_2_, other->points_2_);
    std::swap(quest_map_node_source_id_, other->quest_map_node_source_id_);
    std::swap(map_cycle_, other->map_cycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOQuest_descriptor_;
  metadata.reflection = CSOQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOQuestMapRewardPurchase::kAccountIdFieldNumber;
const int CSOQuestMapRewardPurchase::kDefindexFieldNumber;
const int CSOQuestMapRewardPurchase::kCountFieldNumber;
const int CSOQuestMapRewardPurchase::kMapCycleFieldNumber;
const int CSOQuestMapRewardPurchase::kPurchaseIdFieldNumber;
#endif  // !_MSC_VER

CSOQuestMapRewardPurchase::CSOQuestMapRewardPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOQuestMapRewardPurchase::InitAsDefaultInstance() {
}

CSOQuestMapRewardPurchase::CSOQuestMapRewardPurchase(const CSOQuestMapRewardPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOQuestMapRewardPurchase::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  defindex_ = 0u;
  count_ = 0u;
  map_cycle_ = 0u;
  purchase_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOQuestMapRewardPurchase::~CSOQuestMapRewardPurchase() {
  SharedDtor();
}

void CSOQuestMapRewardPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOQuestMapRewardPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOQuestMapRewardPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOQuestMapRewardPurchase_descriptor_;
}

const CSOQuestMapRewardPurchase& CSOQuestMapRewardPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOQuestMapRewardPurchase* CSOQuestMapRewardPurchase::default_instance_ = NULL;

CSOQuestMapRewardPurchase* CSOQuestMapRewardPurchase::New() const {
  return new CSOQuestMapRewardPurchase;
}

void CSOQuestMapRewardPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    defindex_ = 0u;
    count_ = 0u;
    map_cycle_ = 0u;
    purchase_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOQuestMapRewardPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defindex;
        break;
      }
      
      // optional uint32 defindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_cycle;
        break;
      }
      
      // optional uint32 map_cycle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_cycle_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_purchase_id;
        break;
      }
      
      // optional uint32 purchase_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOQuestMapRewardPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 defindex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defindex(), output);
  }
  
  // optional uint32 count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 map_cycle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_cycle(), output);
  }
  
  // optional uint32 purchase_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->purchase_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOQuestMapRewardPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 defindex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defindex(), target);
  }
  
  // optional uint32 count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 map_cycle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_cycle(), target);
  }
  
  // optional uint32 purchase_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->purchase_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOQuestMapRewardPurchase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 defindex = 2;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 map_cycle = 4;
    if (has_map_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_cycle());
    }
    
    // optional uint32 purchase_id = 5;
    if (has_purchase_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOQuestMapRewardPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOQuestMapRewardPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOQuestMapRewardPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOQuestMapRewardPurchase::MergeFrom(const CSOQuestMapRewardPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_defindex(from.defindex());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_map_cycle(from.map_cycle());
    }
    if (from._has_bit(4)) {
      set_purchase_id(from.purchase_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOQuestMapRewardPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestMapRewardPurchase::CopyFrom(const CSOQuestMapRewardPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestMapRewardPurchase::IsInitialized() const {
  
  return true;
}

void CSOQuestMapRewardPurchase::Swap(CSOQuestMapRewardPurchase* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(defindex_, other->defindex_);
    std::swap(count_, other->count_);
    std::swap(map_cycle_, other->map_cycle_);
    std::swap(purchase_id_, other->purchase_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOQuestMapRewardPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOQuestMapRewardPurchase_descriptor_;
  metadata.reflection = CSOQuestMapRewardPurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestIdentify::kQuestIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestIdentify::CMsgGCQuestIdentify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestIdentify::InitAsDefaultInstance() {
}

CMsgGCQuestIdentify::CMsgGCQuestIdentify(const CMsgGCQuestIdentify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestIdentify::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestIdentify::~CMsgGCQuestIdentify() {
  SharedDtor();
}

void CMsgGCQuestIdentify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestIdentify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestIdentify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestIdentify_descriptor_;
}

const CMsgGCQuestIdentify& CMsgGCQuestIdentify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestIdentify* CMsgGCQuestIdentify::default_instance_ = NULL;

CMsgGCQuestIdentify* CMsgGCQuestIdentify::New() const {
  return new CMsgGCQuestIdentify;
}

void CMsgGCQuestIdentify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestIdentify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestIdentify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestIdentify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestIdentify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestIdentify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestIdentify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestIdentify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestIdentify::MergeFrom(const CMsgGCQuestIdentify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestIdentify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestIdentify::CopyFrom(const CMsgGCQuestIdentify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestIdentify::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestIdentify::Swap(CMsgGCQuestIdentify* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestIdentify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestIdentify_descriptor_;
  metadata.reflection = CMsgGCQuestIdentify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestDevGive::kQuestDefIndexFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestDevGive::CMsgGCQuestDevGive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestDevGive::InitAsDefaultInstance() {
}

CMsgGCQuestDevGive::CMsgGCQuestDevGive(const CMsgGCQuestDevGive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestDevGive::SharedCtor() {
  _cached_size_ = 0;
  quest_def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestDevGive::~CMsgGCQuestDevGive() {
  SharedDtor();
}

void CMsgGCQuestDevGive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestDevGive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestDevGive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestDevGive_descriptor_;
}

const CMsgGCQuestDevGive& CMsgGCQuestDevGive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestDevGive* CMsgGCQuestDevGive::default_instance_ = NULL;

CMsgGCQuestDevGive* CMsgGCQuestDevGive::New() const {
  return new CMsgGCQuestDevGive;
}

void CMsgGCQuestDevGive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_def_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestDevGive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quest_def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestDevGive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quest_def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_def_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestDevGive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quest_def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_def_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestDevGive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quest_def_index = 1;
    if (has_quest_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_def_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestDevGive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestDevGive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestDevGive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestDevGive::MergeFrom(const CMsgGCQuestDevGive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_def_index(from.quest_def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestDevGive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestDevGive::CopyFrom(const CMsgGCQuestDevGive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestDevGive::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestDevGive::Swap(CMsgGCQuestDevGive* other) {
  if (other != this) {
    std::swap(quest_def_index_, other->quest_def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestDevGive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestDevGive_descriptor_;
  metadata.reflection = CMsgGCQuestDevGive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestNodeTurnIn::kNodeDefindexFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestNodeTurnIn::CMsgGCQuestNodeTurnIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestNodeTurnIn::InitAsDefaultInstance() {
}

CMsgGCQuestNodeTurnIn::CMsgGCQuestNodeTurnIn(const CMsgGCQuestNodeTurnIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestNodeTurnIn::SharedCtor() {
  _cached_size_ = 0;
  node_defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestNodeTurnIn::~CMsgGCQuestNodeTurnIn() {
  SharedDtor();
}

void CMsgGCQuestNodeTurnIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestNodeTurnIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestNodeTurnIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestNodeTurnIn_descriptor_;
}

const CMsgGCQuestNodeTurnIn& CMsgGCQuestNodeTurnIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestNodeTurnIn* CMsgGCQuestNodeTurnIn::default_instance_ = NULL;

CMsgGCQuestNodeTurnIn* CMsgGCQuestNodeTurnIn::New() const {
  return new CMsgGCQuestNodeTurnIn;
}

void CMsgGCQuestNodeTurnIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_defindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestNodeTurnIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_defindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_defindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestNodeTurnIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 node_defindex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_defindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestNodeTurnIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 node_defindex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_defindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestNodeTurnIn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 node_defindex = 1;
    if (has_node_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_defindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestNodeTurnIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestNodeTurnIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestNodeTurnIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestNodeTurnIn::MergeFrom(const CMsgGCQuestNodeTurnIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_node_defindex(from.node_defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestNodeTurnIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestNodeTurnIn::CopyFrom(const CMsgGCQuestNodeTurnIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestNodeTurnIn::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestNodeTurnIn::Swap(CMsgGCQuestNodeTurnIn* other) {
  if (other != this) {
    std::swap(node_defindex_, other->node_defindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestNodeTurnIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestNodeTurnIn_descriptor_;
  metadata.reflection = CMsgGCQuestNodeTurnIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestMapUnlockNode::kNodeDefindexFieldNumber;
const int CMsgGCQuestMapUnlockNode::kQuestDefindexFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestMapUnlockNode::CMsgGCQuestMapUnlockNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestMapUnlockNode::InitAsDefaultInstance() {
}

CMsgGCQuestMapUnlockNode::CMsgGCQuestMapUnlockNode(const CMsgGCQuestMapUnlockNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestMapUnlockNode::SharedCtor() {
  _cached_size_ = 0;
  node_defindex_ = 0u;
  quest_defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestMapUnlockNode::~CMsgGCQuestMapUnlockNode() {
  SharedDtor();
}

void CMsgGCQuestMapUnlockNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestMapUnlockNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestMapUnlockNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestMapUnlockNode_descriptor_;
}

const CMsgGCQuestMapUnlockNode& CMsgGCQuestMapUnlockNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestMapUnlockNode* CMsgGCQuestMapUnlockNode::default_instance_ = NULL;

CMsgGCQuestMapUnlockNode* CMsgGCQuestMapUnlockNode::New() const {
  return new CMsgGCQuestMapUnlockNode;
}

void CMsgGCQuestMapUnlockNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_defindex_ = 0u;
    quest_defindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestMapUnlockNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_defindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_defindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_defindex;
        break;
      }
      
      // optional uint32 quest_defindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_defindex_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestMapUnlockNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 node_defindex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_defindex(), output);
  }
  
  // optional uint32 quest_defindex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_defindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestMapUnlockNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 node_defindex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_defindex(), target);
  }
  
  // optional uint32 quest_defindex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_defindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestMapUnlockNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 node_defindex = 1;
    if (has_node_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_defindex());
    }
    
    // optional uint32 quest_defindex = 2;
    if (has_quest_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_defindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestMapUnlockNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestMapUnlockNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestMapUnlockNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestMapUnlockNode::MergeFrom(const CMsgGCQuestMapUnlockNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_node_defindex(from.node_defindex());
    }
    if (from._has_bit(1)) {
      set_quest_defindex(from.quest_defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestMapUnlockNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMapUnlockNode::CopyFrom(const CMsgGCQuestMapUnlockNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMapUnlockNode::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestMapUnlockNode::Swap(CMsgGCQuestMapUnlockNode* other) {
  if (other != this) {
    std::swap(node_defindex_, other->node_defindex_);
    std::swap(quest_defindex_, other->quest_defindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestMapUnlockNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestMapUnlockNode_descriptor_;
  metadata.reflection = CMsgGCQuestMapUnlockNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCNewMatchForLobbyRequest::kCurrentMatchIdFieldNumber;
const int CMsgGCNewMatchForLobbyRequest::kNextMapIdFieldNumber;
const int CMsgGCNewMatchForLobbyRequest::kLobbyIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCNewMatchForLobbyRequest::InitAsDefaultInstance() {
}

CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest(const CMsgGCNewMatchForLobbyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyRequest::SharedCtor() {
  _cached_size_ = 0;
  current_match_id_ = GOOGLE_ULONGLONG(0);
  next_map_id_ = 0u;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCNewMatchForLobbyRequest::~CMsgGCNewMatchForLobbyRequest() {
  SharedDtor();
}

void CMsgGCNewMatchForLobbyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCNewMatchForLobbyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNewMatchForLobbyRequest_descriptor_;
}

const CMsgGCNewMatchForLobbyRequest& CMsgGCNewMatchForLobbyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCNewMatchForLobbyRequest* CMsgGCNewMatchForLobbyRequest::default_instance_ = NULL;

CMsgGCNewMatchForLobbyRequest* CMsgGCNewMatchForLobbyRequest::New() const {
  return new CMsgGCNewMatchForLobbyRequest;
}

void CMsgGCNewMatchForLobbyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_match_id_ = GOOGLE_ULONGLONG(0);
    next_map_id_ = 0u;
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCNewMatchForLobbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 current_match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_match_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_map_id;
        break;
      }
      
      // optional uint32 next_map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_map_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCNewMatchForLobbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 current_match_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->current_match_id(), output);
  }
  
  // optional uint32 next_map_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_map_id(), output);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCNewMatchForLobbyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 current_match_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_match_id(), target);
  }
  
  // optional uint32 next_map_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_map_id(), target);
  }
  
  // optional uint64 lobby_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCNewMatchForLobbyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 current_match_id = 1;
    if (has_current_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_match_id());
    }
    
    // optional uint32 next_map_id = 2;
    if (has_next_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_map_id());
    }
    
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCNewMatchForLobbyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const CMsgGCNewMatchForLobbyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_match_id(from.current_match_id());
    }
    if (from._has_bit(1)) {
      set_next_map_id(from.next_map_id());
    }
    if (from._has_bit(2)) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const CMsgGCNewMatchForLobbyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCNewMatchForLobbyRequest::Swap(CMsgGCNewMatchForLobbyRequest* other) {
  if (other != this) {
    std::swap(current_match_id_, other->current_match_id_);
    std::swap(next_map_id_, other->next_map_id_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCNewMatchForLobbyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCNewMatchForLobbyRequest_descriptor_;
  metadata.reflection = CMsgGCNewMatchForLobbyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCNewMatchForLobbyResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCNewMatchForLobbyResponse::InitAsDefaultInstance() {
}

CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse(const CMsgGCNewMatchForLobbyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCNewMatchForLobbyResponse::~CMsgGCNewMatchForLobbyResponse() {
  SharedDtor();
}

void CMsgGCNewMatchForLobbyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCNewMatchForLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNewMatchForLobbyResponse_descriptor_;
}

const CMsgGCNewMatchForLobbyResponse& CMsgGCNewMatchForLobbyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCNewMatchForLobbyResponse* CMsgGCNewMatchForLobbyResponse::default_instance_ = NULL;

CMsgGCNewMatchForLobbyResponse* CMsgGCNewMatchForLobbyResponse::New() const {
  return new CMsgGCNewMatchForLobbyResponse;
}

void CMsgGCNewMatchForLobbyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCNewMatchForLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCNewMatchForLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCNewMatchForLobbyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCNewMatchForLobbyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCNewMatchForLobbyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const CMsgGCNewMatchForLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const CMsgGCNewMatchForLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCNewMatchForLobbyResponse::Swap(CMsgGCNewMatchForLobbyResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCNewMatchForLobbyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCNewMatchForLobbyResponse_descriptor_;
  metadata.reflection = CMsgGCNewMatchForLobbyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCChangeMatchPlayerTeamsRequest_Member::kMemberIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest_Member::kNewTeamFieldNumber;
#endif  // !_MSC_VER

CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::InitAsDefaultInstance() {
}

CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = GOOGLE_ULONGLONG(0);
  new_team_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCChangeMatchPlayerTeamsRequest_Member::~CMsgGCChangeMatchPlayerTeamsRequest_Member() {
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_;
}

const CMsgGCChangeMatchPlayerTeamsRequest_Member& CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance_ = NULL;

CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest_Member::New() const {
  return new CMsgGCChangeMatchPlayerTeamsRequest_Member;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_id_ = GOOGLE_ULONGLONG(0);
    new_team_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCChangeMatchPlayerTeamsRequest_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 member_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_team;
        break;
      }
      
      // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TF_GC_TEAM_IsValid(value)) {
            set_new_team(static_cast< TF_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 member_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->member_id(), output);
  }
  
  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsRequest_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 member_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->member_id(), target);
  }
  
  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCChangeMatchPlayerTeamsRequest_Member::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->member_id());
    }
    
    // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
    if (has_new_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCChangeMatchPlayerTeamsRequest_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_member_id(from.member_id());
    }
    if (from._has_bit(1)) {
      set_new_team(from.new_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest_Member::IsInitialized() const {
  
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::Swap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(new_team_, other->new_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsRequest_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCChangeMatchPlayerTeamsRequest_Member_descriptor_;
  metadata.reflection = CMsgGCChangeMatchPlayerTeamsRequest_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCChangeMatchPlayerTeamsRequest::kMatchIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest::kLobbyIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest::kMemberFieldNumber;
#endif  // !_MSC_VER

CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest::InitAsDefaultInstance() {
}

CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest(const CMsgGCChangeMatchPlayerTeamsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCChangeMatchPlayerTeamsRequest::~CMsgGCChangeMatchPlayerTeamsRequest() {
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCChangeMatchPlayerTeamsRequest_descriptor_;
}

const CMsgGCChangeMatchPlayerTeamsRequest& CMsgGCChangeMatchPlayerTeamsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCChangeMatchPlayerTeamsRequest* CMsgGCChangeMatchPlayerTeamsRequest::default_instance_ = NULL;

CMsgGCChangeMatchPlayerTeamsRequest* CMsgGCChangeMatchPlayerTeamsRequest::New() const {
  return new CMsgGCChangeMatchPlayerTeamsRequest;
}

void CMsgGCChangeMatchPlayerTeamsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCChangeMatchPlayerTeamsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }
      
      // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }
  
  // optional uint64 lobby_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lobby_id(), output);
  }
  
  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 match_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }
  
  // optional uint64 lobby_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lobby_id(), target);
  }
  
  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCChangeMatchPlayerTeamsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional uint64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
  }
  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCChangeMatchPlayerTeamsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_match_id(from.match_id());
    }
    if (from._has_bit(1)) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest::Swap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(lobby_id_, other->lobby_id_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCChangeMatchPlayerTeamsRequest_descriptor_;
  metadata.reflection = CMsgGCChangeMatchPlayerTeamsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCChangeMatchPlayerTeamsResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCChangeMatchPlayerTeamsResponse::InitAsDefaultInstance() {
}

CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse(const CMsgGCChangeMatchPlayerTeamsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCChangeMatchPlayerTeamsResponse::~CMsgGCChangeMatchPlayerTeamsResponse() {
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCChangeMatchPlayerTeamsResponse_descriptor_;
}

const CMsgGCChangeMatchPlayerTeamsResponse& CMsgGCChangeMatchPlayerTeamsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCChangeMatchPlayerTeamsResponse* CMsgGCChangeMatchPlayerTeamsResponse::default_instance_ = NULL;

CMsgGCChangeMatchPlayerTeamsResponse* CMsgGCChangeMatchPlayerTeamsResponse::New() const {
  return new CMsgGCChangeMatchPlayerTeamsResponse;
}

void CMsgGCChangeMatchPlayerTeamsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCChangeMatchPlayerTeamsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCChangeMatchPlayerTeamsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCChangeMatchPlayerTeamsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCChangeMatchPlayerTeamsResponse::Swap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCChangeMatchPlayerTeamsResponse_descriptor_;
  metadata.reflection = CMsgGCChangeMatchPlayerTeamsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestComplete_Debug::kQuestIdFieldNumber;
const int CMsgGCQuestComplete_Debug::kPointsTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestComplete_Debug::CMsgGCQuestComplete_Debug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestComplete_Debug::InitAsDefaultInstance() {
}

CMsgGCQuestComplete_Debug::CMsgGCQuestComplete_Debug(const CMsgGCQuestComplete_Debug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestComplete_Debug::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  points_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestComplete_Debug::~CMsgGCQuestComplete_Debug() {
  SharedDtor();
}

void CMsgGCQuestComplete_Debug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestComplete_Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestComplete_Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestComplete_Debug_descriptor_;
}

const CMsgGCQuestComplete_Debug& CMsgGCQuestComplete_Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestComplete_Debug* CMsgGCQuestComplete_Debug::default_instance_ = NULL;

CMsgGCQuestComplete_Debug* CMsgGCQuestComplete_Debug::New() const {
  return new CMsgGCQuestComplete_Debug;
}

void CMsgGCQuestComplete_Debug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
    points_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestComplete_Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points_type;
        break;
      }
      
      // optional uint32 points_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestComplete_Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }
  
  // optional uint32 points_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestComplete_Debug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }
  
  // optional uint32 points_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestComplete_Debug::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }
    
    // optional uint32 points_type = 2;
    if (has_points_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestComplete_Debug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestComplete_Debug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestComplete_Debug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestComplete_Debug::MergeFrom(const CMsgGCQuestComplete_Debug& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_id(from.quest_id());
    }
    if (from._has_bit(1)) {
      set_points_type(from.points_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestComplete_Debug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestComplete_Debug::CopyFrom(const CMsgGCQuestComplete_Debug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestComplete_Debug::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestComplete_Debug::Swap(CMsgGCQuestComplete_Debug* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(points_type_, other->points_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestComplete_Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestComplete_Debug_descriptor_;
  metadata.reflection = CMsgGCQuestComplete_Debug_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestMap_Debug::kResetOperationFieldNumber;
const int CMsgGCQuestMap_Debug::kGiveCreditFieldNumber;
const int CMsgGCQuestMap_Debug::kUnlockNodeFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestMap_Debug::CMsgGCQuestMap_Debug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestMap_Debug::InitAsDefaultInstance() {
  unlock_node_ = const_cast< ::CMsgGCQuestMapUnlockNode*>(&::CMsgGCQuestMapUnlockNode::default_instance());
}

CMsgGCQuestMap_Debug::CMsgGCQuestMap_Debug(const CMsgGCQuestMap_Debug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestMap_Debug::SharedCtor() {
  _cached_size_ = 0;
  reset_operation_ = 0u;
  give_credit_ = 0u;
  unlock_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestMap_Debug::~CMsgGCQuestMap_Debug() {
  SharedDtor();
}

void CMsgGCQuestMap_Debug::SharedDtor() {
  if (this != default_instance_) {
    delete unlock_node_;
  }
}

void CMsgGCQuestMap_Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestMap_Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestMap_Debug_descriptor_;
}

const CMsgGCQuestMap_Debug& CMsgGCQuestMap_Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestMap_Debug* CMsgGCQuestMap_Debug::default_instance_ = NULL;

CMsgGCQuestMap_Debug* CMsgGCQuestMap_Debug::New() const {
  return new CMsgGCQuestMap_Debug;
}

void CMsgGCQuestMap_Debug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_operation_ = 0u;
    give_credit_ = 0u;
    if (_has_bit(2)) {
      if (unlock_node_ != NULL) unlock_node_->::CMsgGCQuestMapUnlockNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestMap_Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reset_operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_operation_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_give_credit;
        break;
      }
      
      // optional uint32 give_credit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_credit_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unlock_node;
        break;
      }
      
      // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlock_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlock_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestMap_Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reset_operation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reset_operation(), output);
  }
  
  // optional uint32 give_credit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->give_credit(), output);
  }
  
  // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unlock_node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestMap_Debug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reset_operation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reset_operation(), target);
  }
  
  // optional uint32 give_credit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->give_credit(), target);
  }
  
  // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unlock_node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestMap_Debug::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reset_operation = 1;
    if (has_reset_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_operation());
    }
    
    // optional uint32 give_credit = 2;
    if (has_give_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_credit());
    }
    
    // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
    if (has_unlock_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlock_node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestMap_Debug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestMap_Debug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestMap_Debug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestMap_Debug::MergeFrom(const CMsgGCQuestMap_Debug& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reset_operation(from.reset_operation());
    }
    if (from._has_bit(1)) {
      set_give_credit(from.give_credit());
    }
    if (from._has_bit(2)) {
      mutable_unlock_node()->::CMsgGCQuestMapUnlockNode::MergeFrom(from.unlock_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestMap_Debug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMap_Debug::CopyFrom(const CMsgGCQuestMap_Debug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMap_Debug::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestMap_Debug::Swap(CMsgGCQuestMap_Debug* other) {
  if (other != this) {
    std::swap(reset_operation_, other->reset_operation_);
    std::swap(give_credit_, other->give_credit_);
    std::swap(unlock_node_, other->unlock_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestMap_Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestMap_Debug_descriptor_;
  metadata.reflection = CMsgGCQuestMap_Debug_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestMapPurchaseReward::kStoreItemDefindexFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestMapPurchaseReward::CMsgGCQuestMapPurchaseReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestMapPurchaseReward::InitAsDefaultInstance() {
}

CMsgGCQuestMapPurchaseReward::CMsgGCQuestMapPurchaseReward(const CMsgGCQuestMapPurchaseReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestMapPurchaseReward::SharedCtor() {
  _cached_size_ = 0;
  store_item_defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestMapPurchaseReward::~CMsgGCQuestMapPurchaseReward() {
  SharedDtor();
}

void CMsgGCQuestMapPurchaseReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestMapPurchaseReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestMapPurchaseReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestMapPurchaseReward_descriptor_;
}

const CMsgGCQuestMapPurchaseReward& CMsgGCQuestMapPurchaseReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestMapPurchaseReward* CMsgGCQuestMapPurchaseReward::default_instance_ = NULL;

CMsgGCQuestMapPurchaseReward* CMsgGCQuestMapPurchaseReward::New() const {
  return new CMsgGCQuestMapPurchaseReward;
}

void CMsgGCQuestMapPurchaseReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_item_defindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestMapPurchaseReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 store_item_defindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_item_defindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestMapPurchaseReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 store_item_defindex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->store_item_defindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestMapPurchaseReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 store_item_defindex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->store_item_defindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestMapPurchaseReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 store_item_defindex = 1;
    if (has_store_item_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_item_defindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestMapPurchaseReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestMapPurchaseReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestMapPurchaseReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestMapPurchaseReward::MergeFrom(const CMsgGCQuestMapPurchaseReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_store_item_defindex(from.store_item_defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestMapPurchaseReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMapPurchaseReward::CopyFrom(const CMsgGCQuestMapPurchaseReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMapPurchaseReward::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestMapPurchaseReward::Swap(CMsgGCQuestMapPurchaseReward* other) {
  if (other != this) {
    std::swap(store_item_defindex_, other->store_item_defindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestMapPurchaseReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestMapPurchaseReward_descriptor_;
  metadata.reflection = CMsgGCQuestMapPurchaseReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestResponse::CMsgGCQuestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestResponse::InitAsDefaultInstance() {
}

CMsgGCQuestResponse::CMsgGCQuestResponse(const CMsgGCQuestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestResponse::~CMsgGCQuestResponse() {
  SharedDtor();
}

void CMsgGCQuestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestResponse_descriptor_;
}

const CMsgGCQuestResponse& CMsgGCQuestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestResponse* CMsgGCQuestResponse::default_instance_ = NULL;

CMsgGCQuestResponse* CMsgGCQuestResponse::New() const {
  return new CMsgGCQuestResponse;
}

void CMsgGCQuestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestResponse::MergeFrom(const CMsgGCQuestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestResponse::CopyFrom(const CMsgGCQuestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestResponse::Swap(CMsgGCQuestResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestResponse_descriptor_;
  metadata.reflection = CMsgGCQuestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCSetDisablePartyQuestProgress::kStateFieldNumber;
#endif  // !_MSC_VER

CMsgGCSetDisablePartyQuestProgress::CMsgGCSetDisablePartyQuestProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCSetDisablePartyQuestProgress::InitAsDefaultInstance() {
}

CMsgGCSetDisablePartyQuestProgress::CMsgGCSetDisablePartyQuestProgress(const CMsgGCSetDisablePartyQuestProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCSetDisablePartyQuestProgress::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCSetDisablePartyQuestProgress::~CMsgGCSetDisablePartyQuestProgress() {
  SharedDtor();
}

void CMsgGCSetDisablePartyQuestProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCSetDisablePartyQuestProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCSetDisablePartyQuestProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCSetDisablePartyQuestProgress_descriptor_;
}

const CMsgGCSetDisablePartyQuestProgress& CMsgGCSetDisablePartyQuestProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCSetDisablePartyQuestProgress* CMsgGCSetDisablePartyQuestProgress::default_instance_ = NULL;

CMsgGCSetDisablePartyQuestProgress* CMsgGCSetDisablePartyQuestProgress::New() const {
  return new CMsgGCSetDisablePartyQuestProgress;
}

void CMsgGCSetDisablePartyQuestProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCSetDisablePartyQuestProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCSetDisablePartyQuestProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCSetDisablePartyQuestProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCSetDisablePartyQuestProgress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCSetDisablePartyQuestProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCSetDisablePartyQuestProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCSetDisablePartyQuestProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCSetDisablePartyQuestProgress::MergeFrom(const CMsgGCSetDisablePartyQuestProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCSetDisablePartyQuestProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSetDisablePartyQuestProgress::CopyFrom(const CMsgGCSetDisablePartyQuestProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSetDisablePartyQuestProgress::IsInitialized() const {
  
  return true;
}

void CMsgGCSetDisablePartyQuestProgress::Swap(CMsgGCSetDisablePartyQuestProgress* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCSetDisablePartyQuestProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCSetDisablePartyQuestProgress_descriptor_;
  metadata.reflection = CMsgGCSetDisablePartyQuestProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestProgressReport::kQuestIdFieldNumber;
const int CMsgQuestProgressReport::kStar0EarnedFieldNumber;
const int CMsgQuestProgressReport::kStar1EarnedFieldNumber;
const int CMsgQuestProgressReport::kStar2EarnedFieldNumber;
const int CMsgQuestProgressReport::kItemsEarnedFieldNumber;
const int CMsgQuestProgressReport::kRewardCreditsEarnedFieldNumber;
const int CMsgQuestProgressReport::kContractCompletedFieldNumber;
#endif  // !_MSC_VER

CMsgQuestProgressReport::CMsgQuestProgressReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgQuestProgressReport::InitAsDefaultInstance() {
}

CMsgQuestProgressReport::CMsgQuestProgressReport(const CMsgQuestProgressReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgQuestProgressReport::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  star_0_earned_ = false;
  star_1_earned_ = false;
  star_2_earned_ = false;
  reward_credits_earned_ = 0u;
  contract_completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestProgressReport::~CMsgQuestProgressReport() {
  SharedDtor();
}

void CMsgQuestProgressReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQuestProgressReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestProgressReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestProgressReport_descriptor_;
}

const CMsgQuestProgressReport& CMsgQuestProgressReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgQuestProgressReport* CMsgQuestProgressReport::default_instance_ = NULL;

CMsgQuestProgressReport* CMsgQuestProgressReport::New() const {
  return new CMsgQuestProgressReport;
}

void CMsgQuestProgressReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
    star_0_earned_ = false;
    star_1_earned_ = false;
    star_2_earned_ = false;
    reward_credits_earned_ = 0u;
    contract_completed_ = false;
  }
  items_earned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestProgressReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_0_earned;
        break;
      }
      
      // optional bool star_0_earned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_0_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_0_earned_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_1_earned;
        break;
      }
      
      // optional bool star_1_earned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_1_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_1_earned_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star_2_earned;
        break;
      }
      
      // optional bool star_2_earned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_2_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &star_2_earned_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_items_earned;
        break;
      }
      
      // repeated uint64 items_earned = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_items_earned())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_items_earned())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_items_earned;
        if (input->ExpectTag(48)) goto parse_reward_credits_earned;
        break;
      }
      
      // optional uint32 reward_credits_earned = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_credits_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_credits_earned_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_contract_completed;
        break;
      }
      
      // optional bool contract_completed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contract_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contract_completed_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgQuestProgressReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }
  
  // optional bool star_0_earned = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->star_0_earned(), output);
  }
  
  // optional bool star_1_earned = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->star_1_earned(), output);
  }
  
  // optional bool star_2_earned = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->star_2_earned(), output);
  }
  
  // repeated uint64 items_earned = 5;
  for (int i = 0; i < this->items_earned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->items_earned(i), output);
  }
  
  // optional uint32 reward_credits_earned = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reward_credits_earned(), output);
  }
  
  // optional bool contract_completed = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->contract_completed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgQuestProgressReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }
  
  // optional bool star_0_earned = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->star_0_earned(), target);
  }
  
  // optional bool star_1_earned = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->star_1_earned(), target);
  }
  
  // optional bool star_2_earned = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->star_2_earned(), target);
  }
  
  // repeated uint64 items_earned = 5;
  for (int i = 0; i < this->items_earned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->items_earned(i), target);
  }
  
  // optional uint32 reward_credits_earned = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reward_credits_earned(), target);
  }
  
  // optional bool contract_completed = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->contract_completed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgQuestProgressReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }
    
    // optional bool star_0_earned = 2;
    if (has_star_0_earned()) {
      total_size += 1 + 1;
    }
    
    // optional bool star_1_earned = 3;
    if (has_star_1_earned()) {
      total_size += 1 + 1;
    }
    
    // optional bool star_2_earned = 4;
    if (has_star_2_earned()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 reward_credits_earned = 6;
    if (has_reward_credits_earned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_credits_earned());
    }
    
    // optional bool contract_completed = 7;
    if (has_contract_completed()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint64 items_earned = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_earned_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->items_earned(i));
    }
    total_size += 1 * this->items_earned_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestProgressReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestProgressReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestProgressReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestProgressReport::MergeFrom(const CMsgQuestProgressReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_earned_.MergeFrom(from.items_earned_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_id(from.quest_id());
    }
    if (from._has_bit(1)) {
      set_star_0_earned(from.star_0_earned());
    }
    if (from._has_bit(2)) {
      set_star_1_earned(from.star_1_earned());
    }
    if (from._has_bit(3)) {
      set_star_2_earned(from.star_2_earned());
    }
    if (from._has_bit(5)) {
      set_reward_credits_earned(from.reward_credits_earned());
    }
    if (from._has_bit(6)) {
      set_contract_completed(from.contract_completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestProgressReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestProgressReport::CopyFrom(const CMsgQuestProgressReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestProgressReport::IsInitialized() const {
  
  return true;
}

void CMsgQuestProgressReport::Swap(CMsgQuestProgressReport* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(star_0_earned_, other->star_0_earned_);
    std::swap(star_1_earned_, other->star_1_earned_);
    std::swap(star_2_earned_, other->star_2_earned_);
    items_earned_.Swap(&other->items_earned_);
    std::swap(reward_credits_earned_, other->reward_credits_earned_);
    std::swap(contract_completed_, other->contract_completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestProgressReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestProgressReport_descriptor_;
  metadata.reflection = CMsgQuestProgressReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgConsumePaintkit::kSourceIdFieldNumber;
const int CMsgConsumePaintkit::kTargetDefindexFieldNumber;
#endif  // !_MSC_VER

CMsgConsumePaintkit::CMsgConsumePaintkit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConsumePaintkit::InitAsDefaultInstance() {
}

CMsgConsumePaintkit::CMsgConsumePaintkit(const CMsgConsumePaintkit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConsumePaintkit::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = GOOGLE_ULONGLONG(0);
  target_defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConsumePaintkit::~CMsgConsumePaintkit() {
  SharedDtor();
}

void CMsgConsumePaintkit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConsumePaintkit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConsumePaintkit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConsumePaintkit_descriptor_;
}

const CMsgConsumePaintkit& CMsgConsumePaintkit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgConsumePaintkit* CMsgConsumePaintkit::default_instance_ = NULL;

CMsgConsumePaintkit* CMsgConsumePaintkit::New() const {
  return new CMsgConsumePaintkit;
}

void CMsgConsumePaintkit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_id_ = GOOGLE_ULONGLONG(0);
    target_defindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConsumePaintkit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_defindex;
        break;
      }
      
      // optional uint32 target_defindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_defindex_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConsumePaintkit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_id(), output);
  }
  
  // optional uint32 target_defindex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_defindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConsumePaintkit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_id(), target);
  }
  
  // optional uint32 target_defindex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_defindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConsumePaintkit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_id = 1;
    if (has_source_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 target_defindex = 2;
    if (has_target_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_defindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConsumePaintkit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConsumePaintkit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConsumePaintkit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConsumePaintkit::MergeFrom(const CMsgConsumePaintkit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_source_id(from.source_id());
    }
    if (from._has_bit(1)) {
      set_target_defindex(from.target_defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConsumePaintkit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumePaintkit::CopyFrom(const CMsgConsumePaintkit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumePaintkit::IsInitialized() const {
  
  return true;
}

void CMsgConsumePaintkit::Swap(CMsgConsumePaintkit* other) {
  if (other != this) {
    std::swap(source_id_, other->source_id_);
    std::swap(target_defindex_, other->target_defindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConsumePaintkit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConsumePaintkit_descriptor_;
  metadata.reflection = CMsgConsumePaintkit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPainkitDevGrant::kPaintkitDefindexFieldNumber;
const int CMsgPainkitDevGrant::kWearFieldNumber;
const int CMsgPainkitDevGrant::kItemDefindexFieldNumber;
#endif  // !_MSC_VER

CMsgPainkitDevGrant::CMsgPainkitDevGrant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPainkitDevGrant::InitAsDefaultInstance() {
}

CMsgPainkitDevGrant::CMsgPainkitDevGrant(const CMsgPainkitDevGrant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPainkitDevGrant::SharedCtor() {
  _cached_size_ = 0;
  paintkit_defindex_ = 0u;
  wear_ = 0;
  item_defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPainkitDevGrant::~CMsgPainkitDevGrant() {
  SharedDtor();
}

void CMsgPainkitDevGrant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPainkitDevGrant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPainkitDevGrant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPainkitDevGrant_descriptor_;
}

const CMsgPainkitDevGrant& CMsgPainkitDevGrant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPainkitDevGrant* CMsgPainkitDevGrant::default_instance_ = NULL;

CMsgPainkitDevGrant* CMsgPainkitDevGrant::New() const {
  return new CMsgPainkitDevGrant;
}

void CMsgPainkitDevGrant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paintkit_defindex_ = 0u;
    wear_ = 0;
    item_defindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPainkitDevGrant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 paintkit_defindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintkit_defindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_wear;
        break;
      }
      
      // optional float wear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wear_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_defindex;
        break;
      }
      
      // optional uint32 item_defindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_defindex_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPainkitDevGrant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 paintkit_defindex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paintkit_defindex(), output);
  }
  
  // optional float wear = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->wear(), output);
  }
  
  // optional uint32 item_defindex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_defindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPainkitDevGrant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 paintkit_defindex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paintkit_defindex(), target);
  }
  
  // optional float wear = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->wear(), target);
  }
  
  // optional uint32 item_defindex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_defindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPainkitDevGrant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 paintkit_defindex = 1;
    if (has_paintkit_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintkit_defindex());
    }
    
    // optional float wear = 2;
    if (has_wear()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 item_defindex = 3;
    if (has_item_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_defindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPainkitDevGrant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPainkitDevGrant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPainkitDevGrant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPainkitDevGrant::MergeFrom(const CMsgPainkitDevGrant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_paintkit_defindex(from.paintkit_defindex());
    }
    if (from._has_bit(1)) {
      set_wear(from.wear());
    }
    if (from._has_bit(2)) {
      set_item_defindex(from.item_defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPainkitDevGrant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPainkitDevGrant::CopyFrom(const CMsgPainkitDevGrant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPainkitDevGrant::IsInitialized() const {
  
  return true;
}

void CMsgPainkitDevGrant::Swap(CMsgPainkitDevGrant* other) {
  if (other != this) {
    std::swap(paintkit_defindex_, other->paintkit_defindex_);
    std::swap(wear_, other->wear_);
    std::swap(item_defindex_, other->item_defindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPainkitDevGrant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPainkitDevGrant_descriptor_;
  metadata.reflection = CMsgPainkitDevGrant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCQuestStrangeEvent::kOwnerAccountIdFieldNumber;
const int GCQuestStrangeEvent::kScorerAccountIdFieldNumber;
const int GCQuestStrangeEvent::kQuestIdFieldNumber;
const int GCQuestStrangeEvent::kStrangeEventIdFieldNumber;
const int GCQuestStrangeEvent::kScoreFieldNumber;
#endif  // !_MSC_VER

GCQuestStrangeEvent::GCQuestStrangeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCQuestStrangeEvent::InitAsDefaultInstance() {
}

GCQuestStrangeEvent::GCQuestStrangeEvent(const GCQuestStrangeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCQuestStrangeEvent::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_ = 0u;
  scorer_account_id_ = 0u;
  quest_id_ = GOOGLE_ULONGLONG(0);
  strange_event_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCQuestStrangeEvent::~GCQuestStrangeEvent() {
  SharedDtor();
}

void GCQuestStrangeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCQuestStrangeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCQuestStrangeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCQuestStrangeEvent_descriptor_;
}

const GCQuestStrangeEvent& GCQuestStrangeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

GCQuestStrangeEvent* GCQuestStrangeEvent::default_instance_ = NULL;

GCQuestStrangeEvent* GCQuestStrangeEvent::New() const {
  return new GCQuestStrangeEvent;
}

void GCQuestStrangeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_account_id_ = 0u;
    scorer_account_id_ = 0u;
    quest_id_ = GOOGLE_ULONGLONG(0);
    strange_event_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCQuestStrangeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scorer_account_id;
        break;
      }
      
      // optional uint32 scorer_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorer_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorer_account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quest_id;
        break;
      }
      
      // optional uint64 quest_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strange_event_id;
        break;
      }
      
      // optional uint32 strange_event_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strange_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_event_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCQuestStrangeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 owner_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }
  
  // optional uint32 scorer_account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scorer_account_id(), output);
  }
  
  // optional uint64 quest_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->quest_id(), output);
  }
  
  // optional uint32 strange_event_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strange_event_id(), output);
  }
  
  // optional uint32 score = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCQuestStrangeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 owner_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }
  
  // optional uint32 scorer_account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scorer_account_id(), target);
  }
  
  // optional uint64 quest_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->quest_id(), target);
  }
  
  // optional uint32 strange_event_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strange_event_id(), target);
  }
  
  // optional uint32 score = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCQuestStrangeEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 owner_account_id = 1;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }
    
    // optional uint32 scorer_account_id = 2;
    if (has_scorer_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorer_account_id());
    }
    
    // optional uint64 quest_id = 3;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }
    
    // optional uint32 strange_event_id = 4;
    if (has_strange_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_event_id());
    }
    
    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCQuestStrangeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCQuestStrangeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCQuestStrangeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCQuestStrangeEvent::MergeFrom(const GCQuestStrangeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from._has_bit(1)) {
      set_scorer_account_id(from.scorer_account_id());
    }
    if (from._has_bit(2)) {
      set_quest_id(from.quest_id());
    }
    if (from._has_bit(3)) {
      set_strange_event_id(from.strange_event_id());
    }
    if (from._has_bit(4)) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCQuestStrangeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQuestStrangeEvent::CopyFrom(const GCQuestStrangeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestStrangeEvent::IsInitialized() const {
  
  return true;
}

void GCQuestStrangeEvent::Swap(GCQuestStrangeEvent* other) {
  if (other != this) {
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(scorer_account_id_, other->scorer_account_id_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(strange_event_id_, other->strange_event_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCQuestStrangeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCQuestStrangeEvent_descriptor_;
  metadata.reflection = GCQuestStrangeEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning( pop )
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic pop
#endif // _PS3
#endif // _GNUC

