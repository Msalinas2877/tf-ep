// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsystemmsgs.pb.h"

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(push)
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _PS3
#endif // _GNUC

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CCommunity_GamePersonalDataCategoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GamePersonalDataCategoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataCategories_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataCategories_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataEntries_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataEntries_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_TerminateGamePersonalDataEntries_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_TerminateGamePersonalDataEntries_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsystemmsgs_2eproto() {
  protobuf_AddDesc_gcsystemmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsystemmsgs.proto");
  GOOGLE_CHECK(file != NULL);
  CCommunity_GamePersonalDataCategoryInfo_descriptor_ = file->message_type(0);
  static const int CCommunity_GamePersonalDataCategoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, localization_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, template_file_),
  };
  CCommunity_GamePersonalDataCategoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GamePersonalDataCategoryInfo_descriptor_,
      CCommunity_GamePersonalDataCategoryInfo::default_instance_,
      CCommunity_GamePersonalDataCategoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GamePersonalDataCategoryInfo));
  CCommunity_GetGamePersonalDataCategories_Request_descriptor_ = file->message_type(1);
  static const int CCommunity_GetGamePersonalDataCategories_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, appid_),
  };
  CCommunity_GetGamePersonalDataCategories_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataCategories_Request_descriptor_,
      CCommunity_GetGamePersonalDataCategories_Request::default_instance_,
      CCommunity_GetGamePersonalDataCategories_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataCategories_Request));
  CCommunity_GetGamePersonalDataCategories_Response_descriptor_ = file->message_type(2);
  static const int CCommunity_GetGamePersonalDataCategories_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, app_assets_basename_),
  };
  CCommunity_GetGamePersonalDataCategories_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataCategories_Response_descriptor_,
      CCommunity_GetGamePersonalDataCategories_Response::default_instance_,
      CCommunity_GetGamePersonalDataCategories_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataCategories_Response));
  CCommunity_GetGamePersonalDataEntries_Request_descriptor_ = file->message_type(3);
  static const int CCommunity_GetGamePersonalDataEntries_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, continue_token_),
  };
  CCommunity_GetGamePersonalDataEntries_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataEntries_Request_descriptor_,
      CCommunity_GetGamePersonalDataEntries_Request::default_instance_,
      CCommunity_GetGamePersonalDataEntries_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataEntries_Request));
  CCommunity_GetGamePersonalDataEntries_Response_descriptor_ = file->message_type(4);
  static const int CCommunity_GetGamePersonalDataEntries_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, gceresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, continue_token_),
  };
  CCommunity_GetGamePersonalDataEntries_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataEntries_Response_descriptor_,
      CCommunity_GetGamePersonalDataEntries_Response::default_instance_,
      CCommunity_GetGamePersonalDataEntries_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataEntries_Response));
  CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_ = file->message_type(5);
  static const int CCommunity_TerminateGamePersonalDataEntries_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, steamid_),
  };
  CCommunity_TerminateGamePersonalDataEntries_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_,
      CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_,
      CCommunity_TerminateGamePersonalDataEntries_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_TerminateGamePersonalDataEntries_Request));
  CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_ = file->message_type(6);
  static const int CCommunity_TerminateGamePersonalDataEntries_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, gceresult_),
  };
  CCommunity_TerminateGamePersonalDataEntries_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_,
      CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_,
      CCommunity_TerminateGamePersonalDataEntries_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_TerminateGamePersonalDataEntries_Response));
  EGCSystemMsg_descriptor_ = file->enum_type(0);
  ESOMsg_descriptor_ = file->enum_type(1);
  EGCBaseClientMsg_descriptor_ = file->enum_type(2);
  EGCToGCMsg_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsystemmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GamePersonalDataCategoryInfo_descriptor_, &CCommunity_GamePersonalDataCategoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataCategories_Request_descriptor_, &CCommunity_GetGamePersonalDataCategories_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataCategories_Response_descriptor_, &CCommunity_GetGamePersonalDataCategories_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataEntries_Request_descriptor_, &CCommunity_GetGamePersonalDataEntries_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataEntries_Response_descriptor_, &CCommunity_GetGamePersonalDataEntries_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_, &CCommunity_TerminateGamePersonalDataEntries_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_, &CCommunity_TerminateGamePersonalDataEntries_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsystemmsgs_2eproto() {
  delete CCommunity_GamePersonalDataCategoryInfo::default_instance_;
  delete CCommunity_GamePersonalDataCategoryInfo_reflection_;
  delete CCommunity_GetGamePersonalDataCategories_Request::default_instance_;
  delete CCommunity_GetGamePersonalDataCategories_Request_reflection_;
  delete CCommunity_GetGamePersonalDataCategories_Response::default_instance_;
  delete CCommunity_GetGamePersonalDataCategories_Response_reflection_;
  delete CCommunity_GetGamePersonalDataEntries_Request::default_instance_;
  delete CCommunity_GetGamePersonalDataEntries_Request_reflection_;
  delete CCommunity_GetGamePersonalDataEntries_Response::default_instance_;
  delete CCommunity_GetGamePersonalDataEntries_Response_reflection_;
  delete CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_;
  delete CCommunity_TerminateGamePersonalDataEntries_Request_reflection_;
  delete CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_;
  delete CCommunity_TerminateGamePersonalDataEntries_Response_reflection_;
}

void protobuf_AddDesc_gcsystemmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022gcsystemmsgs.proto\"j\n\'CCommunity_GameP"
    "ersonalDataCategoryInfo\022\014\n\004type\030\001 \001(\t\022\032\n"
    "\022localization_token\030\002 \001(\t\022\025\n\rtemplate_fi"
    "le\030\003 \001(\t\"A\n0CCommunity_GetGamePersonalDa"
    "taCategories_Request\022\r\n\005appid\030\001 \001(\r\"\216\001\n1"
    "CCommunity_GetGamePersonalDataCategories"
    "_Response\022<\n\ncategories\030\001 \003(\0132(.CCommuni"
    "ty_GamePersonalDataCategoryInfo\022\033\n\023app_a"
    "ssets_basename\030\002 \001(\t\"u\n-CCommunity_GetGa"
    "mePersonalDataEntries_Request\022\r\n\005appid\030\001"
    " \001(\r\022\017\n\007steamid\030\002 \001(\004\022\014\n\004type\030\003 \001(\t\022\026\n\016c"
    "ontinue_token\030\004 \001(\t\"l\n.CCommunity_GetGam"
    "ePersonalDataEntries_Response\022\021\n\tgceresu"
    "lt\030\001 \001(\r\022\017\n\007entries\030\002 \003(\t\022\026\n\016continue_to"
    "ken\030\003 \001(\t\"U\n3CCommunity_TerminateGamePer"
    "sonalDataEntries_Request\022\r\n\005appid\030\001 \001(\r\022"
    "\017\n\007steamid\030\002 \001(\004\"I\n4CCommunity_Terminate"
    "GamePersonalDataEntries_Response\022\021\n\tgcer"
    "esult\030\001 \001(\r*\304\032\n\014EGCSystemMsg\022\023\n\017k_EGCMsg"
    "Invalid\020\000\022\021\n\rk_EGCMsgMulti\020\001\022\030\n\024k_EGCMsg"
    "GenericReply\020\n\022\026\n\022k_EGCMsgSystemBase\0202\022\036"
    "\n\032k_EGCMsgAchievementAwarded\0203\022\026\n\022k_EGCM"
    "sgConCommand\0204\022\030\n\024k_EGCMsgStartPlaying\0205"
    "\022\027\n\023k_EGCMsgStopPlaying\0206\022\033\n\027k_EGCMsgSta"
    "rtGameserver\0207\022\032\n\026k_EGCMsgStopGameserver"
    "\0208\022\025\n\021k_EGCMsgWGRequest\0209\022\026\n\022k_EGCMsgWGR"
    "esponse\020:\022\"\n\036k_EGCMsgGetUserGameStatsSch"
    "ema\020;\022*\n&k_EGCMsgGetUserGameStatsSchemaR"
    "esponse\020<\022\"\n\036k_EGCMsgGetUserStatsDEPRECA"
    "TED\020=\022 \n\034k_EGCMsgGetUserStatsResponse\020>\022"
    "\032\n\026k_EGCMsgAppInfoUpdated\020?\022\033\n\027k_EGCMsgV"
    "alidateSession\020@\022#\n\037k_EGCMsgValidateSess"
    "ionResponse\020A\022\"\n\036k_EGCMsgLookupAccountFr"
    "omInput\020B\022\033\n\027k_EGCMsgSendHTTPRequest\020C\022#"
    "\n\037k_EGCMsgSendHTTPRequestResponse\020D\022\030\n\024k"
    "_EGCMsgPreTestSetup\020E\022\037\n\033k_EGCMsgRecordS"
    "upportAction\020F\022(\n$k_EGCMsgGetAccountDeta"
    "ils_DEPRECATED\020G\022\"\n\036k_EGCMsgReceiveInter"
    "AppMessage\020I\022\030\n\024k_EGCMsgFindAccounts\020J\022\025"
    "\n\021k_EGCMsgPostAlert\020K\022\027\n\023k_EGCMsgGetLice"
    "nses\020L\022\030\n\024k_EGCMsgGetUserStats\020M\022\027\n\023k_EG"
    "CMsgGetCommands\020N\022\037\n\033k_EGCMsgGetCommands"
    "Response\020O\022\032\n\026k_EGCMsgAddFreeLicense\020P\022\""
    "\n\036k_EGCMsgAddFreeLicenseResponse\020Q\022\031\n\025k_"
    "EGCMsgGetIPLocation\020R\022!\n\035k_EGCMsgGetIPLo"
    "cationResponse\020S\022\035\n\031k_EGCMsgSystemStatsS"
    "chema\020T\022\032\n\026k_EGCMsgGetSystemStats\020U\022\"\n\036k"
    "_EGCMsgGetSystemStatsResponse\020V\022\025\n\021k_EGC"
    "MsgSendEmail\020W\022\035\n\031k_EGCMsgSendEmailRespo"
    "nse\020X\022\034\n\030k_EGCMsgGetEmailTemplate\020Y\022$\n k"
    "_EGCMsgGetEmailTemplateResponse\020Z\022\032\n\026k_E"
    "GCMsgGrantGuestPass\020[\022\"\n\036k_EGCMsgGrantGu"
    "estPassResponse\020\\\022\035\n\031k_EGCMsgGetAccountD"
    "etails\020]\022%\n!k_EGCMsgGetAccountDetailsRes"
    "ponse\020^\022\033\n\027k_EGCMsgGetPersonaNames\020_\022#\n\037"
    "k_EGCMsgGetPersonaNamesResponse\020`\022\030\n\024k_E"
    "GCMsgMultiplexMsg\020a\022$\n k_EGCMsgWebAPIReg"
    "isterInterfaces\020e\022\034\n\030k_EGCMsgWebAPIJobRe"
    "quest\020f\022(\n$k_EGCMsgWebAPIJobRequestHttpR"
    "esponse\020h\022+\n\'k_EGCMsgWebAPIJobRequestFor"
    "wardResponse\020i\022\031\n\024k_EGCMsgMemCachedGet\020\310"
    "\001\022!\n\034k_EGCMsgMemCachedGetResponse\020\311\001\022\031\n\024"
    "k_EGCMsgMemCachedSet\020\312\001\022\034\n\027k_EGCMsgMemCa"
    "chedDelete\020\313\001\022\033\n\026k_EGCMsgMemCachedStats\020"
    "\314\001\022#\n\036k_EGCMsgMemCachedStatsResponse\020\315\001\022"
    "\025\n\020k_EGCMsgSQLStats\020\322\001\022\035\n\030k_EGCMsgSQLSta"
    "tsResponse\020\323\001\022\037\n\032k_EGCMsgMasterSetDirect"
    "ory\020\334\001\022\'\n\"k_EGCMsgMasterSetDirectoryResp"
    "onse\020\335\001\022#\n\036k_EGCMsgMasterSetWebAPIRoutin"
    "g\020\336\001\022+\n&k_EGCMsgMasterSetWebAPIRoutingRe"
    "sponse\020\337\001\022&\n!k_EGCMsgMasterSetClientMsgR"
    "outing\020\340\001\022.\n)k_EGCMsgMasterSetClientMsgR"
    "outingResponse\020\341\001\022\027\n\022k_EGCMsgSetOptions\020"
    "\342\001\022\037\n\032k_EGCMsgSetOptionsResponse\020\343\001\022\030\n\023k"
    "_EGCMsgSystemBase2\020\364\003\022#\n\036k_EGCMsgGetPurc"
    "haseTrustStatus\020\365\003\022+\n&k_EGCMsgGetPurchas"
    "eTrustStatusResponse\020\366\003\022\032\n\025k_EGCMsgUpdat"
    "eSession\020\367\003\022%\n k_EGCMsgGCAccountVacStatu"
    "sChange\020\370\003\022\034\n\027k_EGCMsgCheckFriendship\020\371\003"
    "\022$\n\037k_EGCMsgCheckFriendshipResponse\020\372\003\022\""
    "\n\035k_EGCMsgGetPartnerAccountLink\020\373\003\022*\n%k_"
    "EGCMsgGetPartnerAccountLinkResponse\020\374\003\022)"
    "\n$k_EGCMsgVSReportedSuspiciousActivity\020\375"
    "\003\022(\n#k_EGCMsgAccountTradeBanStatusChange"
    "\020\376\003\022$\n\037k_EGCMsgAccountLockStatusChange\020\377"
    "\003\022\037\n\032k_EGCMsgDPPartnerMicroTxns\020\200\004\022\'\n\"k_"
    "EGCMsgDPPartnerMicroTxnsResponse\020\201\004\022\025\n\020k"
    "_EGCMsgGetIPASN\020\202\004\022\035\n\030k_EGCMsgGetIPASNRe"
    "sponse\020\203\004\022\036\n\031k_EGCMsgGetAppFriendsList\020\204"
    "\004\022&\n!k_EGCMsgGetAppFriendsListResponse\020\205"
    "\004\022\"\n\035k_EGCMsgVacVerificationChange\020\206\004\022%\n"
    " k_EGCMsgAccountPhoneNumberChange\020\207\004\022#\n\036"
    "k_EGCMsgAccountTwoFactorChange\020\210\004\022 \n\033k_E"
    "GCMsgCheckClanMembership\020\211\004\022(\n#k_EGCMsgC"
    "heckClanMembershipResponse\020\212\004\022\036\n\031k_EGCMs"
    "gInviteUserToLobby\020\213\004\0221\n,k_EGCMsgGetGame"
    "PersonalDataCategoriesRequest\020\214\004\0222\n-k_EG"
    "CMsgGetGamePersonalDataCategoriesRespons"
    "e\020\215\004\022.\n)k_EGCMsgGetGamePersonalDataEntri"
    "esRequest\020\216\004\022/\n*k_EGCMsgGetGamePersonalD"
    "ataEntriesResponse\020\217\004\0224\n/k_EGCMsgTermina"
    "teGamePersonalDataEntriesRequest\020\220\004\0225\n0k"
    "_EGCMsgTerminateGamePersonalDataEntriesR"
    "esponse\020\221\004*\225\002\n\006ESOMsg\022\023\n\017k_ESOMsg_Create"
    "\020\025\022\023\n\017k_ESOMsg_Update\020\026\022\024\n\020k_ESOMsg_Dest"
    "roy\020\027\022\034\n\030k_ESOMsg_CacheSubscribed\020\030\022\036\n\032k"
    "_ESOMsg_CacheUnsubscribed\020\031\022\033\n\027k_ESOMsg_"
    "UpdateMultiple\020\032\022#\n\037k_ESOMsg_CacheSubscr"
    "iptionCheck\020\033\022%\n!k_ESOMsg_CacheSubscript"
    "ionRefresh\020\034\022$\n k_ESOMsg_CacheSubscribed"
    "UpToDate\020\035*\353\001\n\020EGCBaseClientMsg\022\030\n\023k_EMs"
    "gGCPingRequest\020\271\027\022\031\n\024k_EMsgGCPingRespons"
    "e\020\272\027\022\032\n\025k_EMsgGCClientWelcome\020\244\037\022\032\n\025k_EM"
    "sgGCServerWelcome\020\245\037\022\030\n\023k_EMsgGCClientHe"
    "llo\020\246\037\022\030\n\023k_EMsgGCServerHello\020\247\037\022\032\n\025k_EM"
    "sgGCClientGoodbye\020\250\037\022\032\n\025k_EMsgGCServerGo"
    "odbye\020\251\037*\354\002\n\nEGCToGCMsg\022\032\n\025k_EGCToGCMsgM"
    "asterAck\020\226\001\022\"\n\035k_EGCToGCMsgMasterAckResp"
    "onse\020\227\001\022\027\n\022k_EGCToGCMsgRouted\020\230\001\022\034\n\027k_EG"
    "CToGCMsgRoutedReply\020\231\001\022#\n\036k_EMsgGCUpdate"
    "SubGCSessionInfo\020\232\001\022$\n\037k_EMsgGCRequestSu"
    "bGCSessionInfo\020\233\001\022,\n\'k_EMsgGCRequestSubG"
    "CSessionInfoResponse\020\234\001\022&\n!k_EGCToGCMsgM"
    "asterStartupComplete\020\235\001\022!\n\034k_EMsgGCToGCS"
    "OCacheSubscribe\020\236\001\022#\n\036k_EMsgGCToGCSOCach"
    "eUnsubscribe\020\237\001B\005H\001\200\001\000", 5022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsystemmsgs.proto", &protobuf_RegisterTypes);
  CCommunity_GamePersonalDataCategoryInfo::default_instance_ = new CCommunity_GamePersonalDataCategoryInfo();
  CCommunity_GetGamePersonalDataCategories_Request::default_instance_ = new CCommunity_GetGamePersonalDataCategories_Request();
  CCommunity_GetGamePersonalDataCategories_Response::default_instance_ = new CCommunity_GetGamePersonalDataCategories_Response();
  CCommunity_GetGamePersonalDataEntries_Request::default_instance_ = new CCommunity_GetGamePersonalDataEntries_Request();
  CCommunity_GetGamePersonalDataEntries_Response::default_instance_ = new CCommunity_GetGamePersonalDataEntries_Response();
  CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_ = new CCommunity_TerminateGamePersonalDataEntries_Request();
  CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_ = new CCommunity_TerminateGamePersonalDataEntries_Response();
  CCommunity_GamePersonalDataCategoryInfo::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataCategories_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataCategories_Response::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataEntries_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataEntries_Response::default_instance_->InitAsDefaultInstance();
  CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsystemmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsystemmsgs_2eproto {
  StaticDescriptorInitializer_gcsystemmsgs_2eproto() {
    protobuf_AddDesc_gcsystemmsgs_2eproto();
  }
} static_descriptor_initializer_gcsystemmsgs_2eproto_;

const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCSystemMsg_descriptor_;
}
bool EGCSystemMsg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 210:
    case 211:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESOMsg_descriptor_;
}
bool ESOMsg_IsValid(int value) {
  switch(value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCBaseClientMsg_descriptor_;
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch(value) {
    case 3001:
    case 3002:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCToGCMsg_descriptor_;
}
bool EGCToGCMsg_IsValid(int value) {
  switch(value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CCommunity_GamePersonalDataCategoryInfo::_default_type_;
const ::std::string CCommunity_GamePersonalDataCategoryInfo::_default_localization_token_;
const ::std::string CCommunity_GamePersonalDataCategoryInfo::_default_template_file_;
#ifndef _MSC_VER
const int CCommunity_GamePersonalDataCategoryInfo::kTypeFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kLocalizationTokenFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kTemplateFileFieldNumber;
#endif  // !_MSC_VER

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_GamePersonalDataCategoryInfo::InitAsDefaultInstance() {
}

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_GamePersonalDataCategoryInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  localization_token_ = const_cast< ::std::string*>(&_default_localization_token_);
  template_file_ = const_cast< ::std::string*>(&_default_template_file_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  SharedDtor();
}

void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (localization_token_ != &_default_localization_token_) {
    delete localization_token_;
  }
  if (template_file_ != &_default_template_file_) {
    delete template_file_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GamePersonalDataCategoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GamePersonalDataCategoryInfo_descriptor_;
}

const CCommunity_GamePersonalDataCategoryInfo& CCommunity_GamePersonalDataCategoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_GamePersonalDataCategoryInfo* CCommunity_GamePersonalDataCategoryInfo::default_instance_ = NULL;

CCommunity_GamePersonalDataCategoryInfo* CCommunity_GamePersonalDataCategoryInfo::New() const {
  return new CCommunity_GamePersonalDataCategoryInfo;
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(1)) {
      if (localization_token_ != &_default_localization_token_) {
        localization_token_->clear();
      }
    }
    if (_has_bit(2)) {
      if (template_file_ != &_default_template_file_) {
        template_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GamePersonalDataCategoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_localization_token;
        break;
      }
      
      // optional string localization_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localization_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localization_token().data(), this->localization_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_template_file;
        break;
      }
      
      // optional string template_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->template_file().data(), this->template_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_GamePersonalDataCategoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional string localization_token = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->localization_token(), output);
  }
  
  // optional string template_file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->template_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_GamePersonalDataCategoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional string localization_token = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localization_token(), target);
  }
  
  // optional string template_file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_GamePersonalDataCategoryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional string localization_token = 2;
    if (has_localization_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_token());
    }
    
    // optional string template_file = 3;
    if (has_template_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GamePersonalDataCategoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GamePersonalDataCategoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_localization_token(from.localization_token());
    }
    if (from._has_bit(2)) {
      set_template_file(from.template_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {
  
  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::Swap(CCommunity_GamePersonalDataCategoryInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(localization_token_, other->localization_token_);
    std::swap(template_file_, other->template_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GamePersonalDataCategoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GamePersonalDataCategoryInfo_descriptor_;
  metadata.reflection = CCommunity_GamePersonalDataCategoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataCategories_Request::kAppidFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_GetGamePersonalDataCategories_Request::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataCategories_Request_descriptor_;
}

const CCommunity_GetGamePersonalDataCategories_Request& CCommunity_GetGamePersonalDataCategories_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_GetGamePersonalDataCategories_Request* CCommunity_GetGamePersonalDataCategories_Request::default_instance_ = NULL;

CCommunity_GetGamePersonalDataCategories_Request* CCommunity_GetGamePersonalDataCategories_Request::New() const {
  return new CCommunity_GetGamePersonalDataCategories_Request;
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_GetGamePersonalDataCategories_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataCategories_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {
  
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::Swap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataCategories_Request_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataCategories_Request_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCommunity_GetGamePersonalDataCategories_Response::_default_app_assets_basename_;
#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataCategories_Response::kCategoriesFieldNumber;
const int CCommunity_GetGamePersonalDataCategories_Response::kAppAssetsBasenameFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_GetGamePersonalDataCategories_Response::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor() {
  _cached_size_ = 0;
  app_assets_basename_ = const_cast< ::std::string*>(&_default_app_assets_basename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  if (app_assets_basename_ != &_default_app_assets_basename_) {
    delete app_assets_basename_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataCategories_Response_descriptor_;
}

const CCommunity_GetGamePersonalDataCategories_Response& CCommunity_GetGamePersonalDataCategories_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_GetGamePersonalDataCategories_Response* CCommunity_GetGamePersonalDataCategories_Response::default_instance_ = NULL;

CCommunity_GetGamePersonalDataCategories_Response* CCommunity_GetGamePersonalDataCategories_Response::New() const {
  return new CCommunity_GetGamePersonalDataCategories_Response;
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (app_assets_basename_ != &_default_app_assets_basename_) {
        app_assets_basename_->clear();
      }
    }
  }
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_categories;
        if (input->ExpectTag(18)) goto parse_app_assets_basename;
        break;
      }
      
      // optional string app_assets_basename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_assets_basename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_assets_basename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_assets_basename().data(), this->app_assets_basename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }
  
  // optional string app_assets_basename = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_assets_basename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->categories(i), target);
  }
  
  // optional string app_assets_basename = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_assets_basename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_GetGamePersonalDataCategories_Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string app_assets_basename = 2;
    if (has_app_assets_basename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_assets_basename());
    }
    
  }
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataCategories_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_app_assets_basename(from.app_assets_basename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {
  
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::Swap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  if (other != this) {
    categories_.Swap(&other->categories_);
    std::swap(app_assets_basename_, other->app_assets_basename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataCategories_Response_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataCategories_Response_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCommunity_GetGamePersonalDataEntries_Request::_default_type_;
const ::std::string CCommunity_GetGamePersonalDataEntries_Request::_default_continue_token_;
#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kSteamidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kTypeFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kContinueTokenFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_GetGamePersonalDataEntries_Request::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  steamid_ = GOOGLE_ULONGLONG(0);
  type_ = const_cast< ::std::string*>(&_default_type_);
  continue_token_ = const_cast< ::std::string*>(&_default_continue_token_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (continue_token_ != &_default_continue_token_) {
    delete continue_token_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataEntries_Request_descriptor_;
}

const CCommunity_GetGamePersonalDataEntries_Request& CCommunity_GetGamePersonalDataEntries_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_GetGamePersonalDataEntries_Request* CCommunity_GetGamePersonalDataEntries_Request::default_instance_ = NULL;

CCommunity_GetGamePersonalDataEntries_Request* CCommunity_GetGamePersonalDataEntries_Request::New() const {
  return new CCommunity_GetGamePersonalDataEntries_Request;
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    steamid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(3)) {
      if (continue_token_ != &_default_continue_token_) {
        continue_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steamid;
        break;
      }
      
      // optional uint64 steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_continue_token;
        break;
      }
      
      // optional string continue_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continue_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // optional uint64 steamid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }
  
  // optional string type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // optional string continue_token = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->continue_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // optional uint64 steamid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }
  
  // optional string type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  // optional string continue_token = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->continue_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_GetGamePersonalDataEntries_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }
    
    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional string continue_token = 4;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataEntries_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
    if (from._has_bit(1)) {
      set_steamid(from.steamid());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_continue_token(from.continue_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {
  
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::Swap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(steamid_, other->steamid_);
    std::swap(type_, other->type_);
    std::swap(continue_token_, other->continue_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataEntries_Request_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataEntries_Request_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCommunity_GetGamePersonalDataEntries_Response::_default_continue_token_;
#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataEntries_Response::kGceresultFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kEntriesFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kContinueTokenFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_GetGamePersonalDataEntries_Response::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  gceresult_ = 0u;
  continue_token_ = const_cast< ::std::string*>(&_default_continue_token_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  if (continue_token_ != &_default_continue_token_) {
    delete continue_token_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataEntries_Response_descriptor_;
}

const CCommunity_GetGamePersonalDataEntries_Response& CCommunity_GetGamePersonalDataEntries_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_GetGamePersonalDataEntries_Response* CCommunity_GetGamePersonalDataEntries_Response::default_instance_ = NULL;

CCommunity_GetGamePersonalDataEntries_Response* CCommunity_GetGamePersonalDataEntries_Response::New() const {
  return new CCommunity_GetGamePersonalDataEntries_Response;
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gceresult_ = 0u;
    if (_has_bit(2)) {
      if (continue_token_ != &_default_continue_token_) {
        continue_token_->clear();
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }
      
      // repeated string entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entries(0).data(), this->entries(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectTag(26)) goto parse_continue_token;
        break;
      }
      
      // optional string continue_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continue_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gceresult = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }
  
  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->entries(i).data(), this->entries(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entries(i), output);
  }
  
  // optional string continue_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->continue_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gceresult = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }
  
  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entries(i).data(), this->entries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->entries(i), target);
  }
  
  // optional string continue_token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->continue_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_GetGamePersonalDataEntries_Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gceresult = 1;
    if (has_gceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gceresult());
    }
    
    // optional string continue_token = 3;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }
    
  }
  // repeated string entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataEntries_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gceresult(from.gceresult());
    }
    if (from._has_bit(2)) {
      set_continue_token(from.continue_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {
  
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::Swap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  if (other != this) {
    std::swap(gceresult_, other->gceresult_);
    entries_.Swap(&other->entries_);
    std::swap(continue_token_, other->continue_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataEntries_Response_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataEntries_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_TerminateGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_TerminateGamePersonalDataEntries_Request::kSteamidFieldNumber;
#endif  // !_MSC_VER

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Request::InitAsDefaultInstance() {
}

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_;
}

const CCommunity_TerminateGamePersonalDataEntries_Request& CCommunity_TerminateGamePersonalDataEntries_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_TerminateGamePersonalDataEntries_Request* CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_ = NULL;

CCommunity_TerminateGamePersonalDataEntries_Request* CCommunity_TerminateGamePersonalDataEntries_Request::New() const {
  return new CCommunity_TerminateGamePersonalDataEntries_Request;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steamid;
        break;
      }
      
      // optional uint64 steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // optional uint64 steamid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // optional uint64 steamid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_TerminateGamePersonalDataEntries_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_TerminateGamePersonalDataEntries_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
    if (from._has_bit(1)) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {
  
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Swap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_;
  metadata.reflection = CCommunity_TerminateGamePersonalDataEntries_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_TerminateGamePersonalDataEntries_Response::kGceresultFieldNumber;
#endif  // !_MSC_VER

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Response::InitAsDefaultInstance() {
}

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  gceresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_;
}

const CCommunity_TerminateGamePersonalDataEntries_Response& CCommunity_TerminateGamePersonalDataEntries_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();  return *default_instance_;
}

CCommunity_TerminateGamePersonalDataEntries_Response* CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_ = NULL;

CCommunity_TerminateGamePersonalDataEntries_Response* CCommunity_TerminateGamePersonalDataEntries_Response::New() const {
  return new CCommunity_TerminateGamePersonalDataEntries_Response;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gceresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gceresult = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gceresult = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_TerminateGamePersonalDataEntries_Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gceresult = 1;
    if (has_gceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gceresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_TerminateGamePersonalDataEntries_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gceresult(from.gceresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {
  
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Swap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  if (other != this) {
    std::swap(gceresult_, other->gceresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_;
  metadata.reflection = CCommunity_TerminateGamePersonalDataEntries_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning( pop )
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic pop
#endif // _PS3
#endif // _GNUC

